<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PLUSManaged</name>
    </assembly>
    <members>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError">
            <summary>Automation Client errors.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_NONE">
            <summary>No error occurred.  The operation was successful.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_STARTUP_ERROR">
            <summary>(Not applicable to PLUSManaged) Winsock could not be started.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_RESOLVE_HOST">
            <summary>(Not applicable to PLUSManaged, which will instead have an Exception object held in a property.) The specified server could not be found.  Verify the computer is connected to the Internet, and that any firewall/proxy present is configured properly.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_CREATE_SOCKET">
            <summary>(Not applicable to PLUSManaged) This is an internal problem that is normally fixed by either rebooting the computer, or installing the latest version of Internet Explorer. </summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_CONNECT_TO_SERVER">
            <summary>(Not applicable to PLUSManaged, which will instead have an Exception object held in a property.) Could not connect to the specified server.  Verify the computer is connected to the Internet, and that any firewall/proxy present is configured properly.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_SEND_DATA">
            <summary>(Not applicable to PLUSManaged) This is an internal problem that is normally fixed by either rebooting the computer, or installing the latest version of Internet Explorer.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_READ_DATA">
            <summary>(Not applicable to PLUSManaged) This is an internal problem that is normally fixed by either rebooting the computer, or installing the latest version of Internet Explorer.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_NO_MORE_SOFTWARE_KEYS_AVAILABLE">
            <summary>The License ID has no (zero) activations left.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_INVALID_SERVER_RESPONSE">
            <summary>The response received from the server is not in the expected format.  This can sometimes indicate a response from something like a proxy sever, or an error on the server.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_CANNOT_ALLOCATE_MEMORY">
            <summary>(Not applicable to PLUSManaged) This is an internal error, and you should contact technical support for assistance.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CANNOT_RESOLVE_PROXY">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WININET_UNAVAILABLE">
            <summary>(Not applicable to PLUSManaged) When specifying WinInet only flags, WinInet is unavailable on the target system.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WININET_FUNCTION_UNAVAILABLE">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_NO_CONNECTION">
            <summary>(Not applicable to PLUSManaged, which will instead have an Exception object held in a property.) No Internet connection is available.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_INTERNAL_ERROR">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_CONNECT_ERROR">
            <summary>(Not applicable to PLUSManaged) Cannot connect to internet. Verify internet connection.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WINSOCK_BUFFER_OVERFLOW">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_PARTIAL_CONNECTION">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_INVALID_PROXY_LOGIN">
            <summary>(Not applicable to PLUSManaged) Verify that the proxy information entered by user is valid.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_SERVER_DOWN">
            <summary>(Not applicable to PLUSManaged) The server is non-responsive, or the page is formatted improperly. </summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_FILE_ERROR">
            <summary>(Not applicable to PLUSManaged) Could not create or open the file.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_FTP_FILENOTFOUND">
            <summary>(Not applicable to PLUSManaged) File could not be found on FTP server.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_CANCEL">
            <summary>(Not applicable to PLUSManaged) The user clicked "Cancel".</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_ERROR_CREATING_WINDOW">
            <summary>(Not applicable to PLUSManaged) While downloading a file, the "Download Dialog box" could not be created.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_COULD_NOT_CREATE_FILE">
            <summary>(Not applicable to PLUSManaged) The file could not be created.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_ITEMNOTFOUND">
            <summary>(Not applicable to PLUSManaged) The item specified is invalid, or non-existent.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_INVALIDPASSWORD">
            <summary>(Not applicable to PLUSManaged) The "password" specified could not be validated.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_UPLOADFAILED">
            <summary>(Not applicable to PLUSManaged) This is an internal error. Please contact technical support.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_CONNECTION_TIMEOUT">
            <summary>(Not applicable to PLUSManaged) No longer used.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_OS_INVALID">
            <summary>(Not applicable to PLUSManaged) The operating system does not support this functionality.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_INVALID_PARAMETERS">
            <summary>(Not applicable to PLUSManaged) The parameter specified is invalid or out of range.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_HTTP_FILENOTFOUND">
            <summary>(Not applicable to PLUSManaged) File could not be found on HTTP server.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_ENCRYPTION_FAILED">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to encrypt web service request.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_SIGNING_FAILED">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to sign web service request.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_DECRYPTION_FAILED">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to decrypt web service response.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_VERIFICATION_FAILED">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to verify signature of web service response.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_CANONICALIZATION_FAILED">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to canonicalize web service response.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_WEBSERVICE_RETURNED_FAILURE">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Call succeeded but web service returned an error.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_LOG_ENTRYNOTFOUND">
            <summary>(Not applicable to PLUSManaged) Previous usage log entry no found.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_LOG_CANNOT_ERASE">
            <summary>(Not applicable to PLUSManaged) Failed to delete usage log.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_LOG_CANNOT_OPEN">
            <summary>(Not applicable to PLUSManaged) Failed to open usage log.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientError.SWKERR_CANNOT_PARSE_RESPONSE">
            <summary>(Not applicable to PLUSManaged - See <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations and methods available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class.) Failed to parse a web service response.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall">
            <summary>Base implementation for Automation Client web form calls.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebFormCall">
            <summary>Base implementation for web form calls, including things like posting data to the trial tracking service, making previous-generation (Automation Client) calls, etc...</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.#ctor(System.String,com.softwarekey.Client.WebService.WebFormCallHttpMethod)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.WebFormCall"/> object.</summary>
            <param name="url">The URL to the web form.</param>
            <param name="method">The <see cref="T:com.softwarekey.Client.WebService.WebFormCallHttpMethod"/> that will be used for this object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.GenerateEncodedString(System.Collections.Specialized.NameValueCollection)">
            <summary>Generates a URL encoded string from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</summary>
            <param name="collection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> from which the string will be generated.</param>
            <returns>Returns a URL encoded string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.InitializeResponseInformation(System.Net.HttpWebResponse)">
            <summary>Populates properties with basic response information.</summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.ProcessHttpCommand(System.String)">
            <summary>Processes an HTTP command.</summary>
            <param name="url">The URL where the request will be submitted.</param>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/> and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.ProcessHttpCommand(System.String,System.Boolean)">
            <summary>Processes an HTTP command.</summary>
            <param name="url">The URL where the request will be submitted.</param>
            <param name="isInitialAttempt">true if this is the first attempt, or false is this is an automatic fall-back/retry attempt (usually for falling-back from https:// to http://).</param>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/> and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm">
            <summary>Calls the web form.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/> and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.Url">
            <summary>Gets the absolute URI.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.Method">
            <summary>Gets the HTTP method that will be used.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.PostValues">
            <summary>Gets the post values.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.UrlEncodedPostData">
            <summary>Gets the URL encoded form post data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.ContentEncoding">
            <summary>Gets or sets the encoding used for the request and response (UTF-8 is the default).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.ContentType">
            <summary>Gets or sets the content type ("application/x-www-form-urlencoded" is the default).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.LastException">
            <summary>Gets or sets the last <see cref="T:System.Exception"/> that occurred when calling the web form.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.Proxy">
            <summary>Gets or sets the proxy server settings.  Leave as null/Nothing to use the system's default proxy settings.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired">
            <summary>Gets or sets whether the proxy server requires authentication.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.Response">
            <summary>Gets or sets the response returned from the server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.RequireSsl">
            <summary>Gets or sets whether or not SSL is required.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.StatusCode">
            <summary>Gets or sets the status code of the response returned from the server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebFormCall.Timeout">
            <summary>Gets or sets the timeout (in milliseconds).  The default is 30000 milliseconds (or 30 seconds).</summary>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.#ctor(System.String,com.softwarekey.Client.WebService.WebFormCallHttpMethod)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall"/> object.</summary>
            <param name="url">The URL to the web form.</param>
            <param name="method">The <see cref="T:com.softwarekey.Client.WebService.WebFormCallHttpMethod"/> that will be used for this object.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.TryParseValueFromResponse(System.String,System.String@)">
            <summary>Tries to parse a string value from the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.Response"/>.</summary>
            <param name="searchString">The search string used to locate the value in the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.Response"/>.</param>
            <param name="value">The parsed value.</param>
            <returns>Returns true if the value was successfully parsed.  If false was returned, check the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/> property for a possible cause.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.TryParseValueFromResponse(System.String,System.Int32@)">
            <summary>Tries to parse a 32 bit integer value from the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.Response"/>.</summary>
            <param name="searchString">The search string used to locate the value in the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.Response"/>.</param>
            <param name="value">The parsed value.</param>
            <returns>Returns true if the value was successfully parsed.  If false was returned, check the <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/> property for a possible cause.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode">
            <summary>Gets or sets the Automation Client error code.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus">
            <summary>
            <para>Implementation for calling server-side scripts which were originally designed to work with the Automation Client's
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetLicenseStatus.htm">SK_GetLicenseStatus</see> and
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetLicenseStatusEx.htm">SK_GetLicenseStatusEx</see> functions.</para>
            </summary>
            <remarks>
            <para>In general, if you are using SOLO Server, you should be using
            <see cref="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus">License.CheckInstallationStatus</see> or the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus">WebServiceCall implementation</see> for status checks.
            The same information can also be retrieved from SOLO Server using <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck"/>.</para>
            <note type="implementnotes">
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties must be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.LicenseID"/></item>
            </list>
            </note>
            <para>Optional fields that may be populated before calling <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method include:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.Password"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.ProductID"/> - When set, the License ID specified must be for the specified Product ID.  (In most cases, this should match the value used in <see cref="P:com.softwarekey.Client.Licensing.License.ThisProductID">License.ThisProductID</see>.)</item>
            </list>
            <example>This example shows how to make a typical activation call for a PLUSManaged license:
            <code language="cs">
            public bool RetrieveLicenseStatus(int licenseID, string password, int productID, out string status, out int replacedBy, out string licenseUpdate)
            {
                //TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                GetLicenseStatus statusCall = new GetLicenseStatus("https://secure.softwarekey.com/solo/customers/getlicensestatus.asp");
                statusCall.LicenseID = licenseID;
                statusCall.Password = password;
                statusCall.ProductID = productID;
                
                //TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                bool successful = statusCall.CallWebForm();
                if (successful)
                {
                    status = statusCall.Status;
                    replacedBy = statusCall.ReplacedBy;
                    licenseUpdate = statusCall.LicenseUpdate;
                }
                else
                {
                    status = "";
                    replacedBy = 0;
                    licenseUpdate = "";
                    //TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                }
                
                return successful;
            }
            </code>
            <code language="vbnet">
            Public Function RetrieveLicenseStatus(ByVal licenseID As Integer, ByVal password As String, ByVal productID As Integer, ByRef status As String, ByRef replacedBy As Integer, ByRef LicenseUpdate As String) As Boolean
                'TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                Dim statusCall As New GetLicenseStatus("https://secure.softwarekey.com/solo/customers/getlicensestatus.asp")
                statusCall.LicenseID = licenseID
                statusCall.Password = password
                statusCall.ProductID = productID
                
                'TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                Dim successful As Boolean = statusCall.CallWebForm()
                If successful Then
                    status = statusCall.Status
                    replacedBy = statusCall.ReplacedBy
                    licenseUpdate = statusCall.LicenseUpdate
                Else
                    status = ""
                    replacedBy = 0
                    licenseUpdate = ""
                    'TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                End If
                
                Return successful
            End Function
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus"/> object.</summary>
            <param name="url">The URL to the web form.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.LicenseID">
            <summary>Gets or sets the License ID (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.Password">
            <summary>Gets or sets password (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.ProductID">
            <summary>Gets or sets the Product ID.  When specified, the License ID must be for the Product ID specified.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.Status">
            <summary>Gets the status of the License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.ReplacedBy">
            <summary>Gets the License ID which replaced the License ID which was validated by this object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetLicenseStatus.LicenseUpdate">
            <summary>Gets the License Update data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData">
            <summary>
            <para>Implementation for calling server-side scripts which were originally designed to with with the Automation Client's
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetRegData.htm">SK_GetRegData</see> and
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetRegDataEx.htm">SK_GetRegDataEx</see> functions.</para>
            </summary>
            <remarks>
            <para>In general, if you are using SOLO Server, all of the information provided by this script is included with the license files returned by SOLO Server when using
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">License.ActivateInstallationLicenseFile</see> or the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile">WebServiceCall implementation</see> for activation.  Additionally,
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck"/> may be used to retrieve registration data from SOLO Server as well.</para>
            <note type="implementnotes">
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties must be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.LicenseID"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.Password"/></item>
            </list>
            </note>
            <example>This example shows how to make a typical call:
            <code language="cs">
            public bool RetrieveRegistrationData(int licenseID, string password, out string companyName, out string contactName, out string email)
            {
                //TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                GetRegData registrationCall = new GetRegData("https://secure.softwarekey.com/solo/customers/getregdata.asp");
                registrationCall.LicenseID = licenseID;
                registrationCall.Password = password;
                
                //TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                bool successful = registrationCall.CallWebForm();
                if (successful)
                {
                    companyName = registrationCall.CompanyName;
                    contactName = registrationCall.ContactName;
                    email = registrationCall.Email;
                }
                else
                {
                    companyName = "";
                    contactName = "";
                    email = "";
                    //TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                }
                
                //TODO: This sample function's prototype only supports a subset of values returned by a GetRegData call.  You may add additional parameters and update the function as needed.
                
                return successful;
            }
            </code>
            <code language="vbnet">
            Public Function RetrieveRegistrationData(ByVal licenseID As Integer, ByVal password As String, ByRef companyName As String, ByRef contactName As String, ByRef email As String) As Boolean
                'TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                Dim registrationCall As New GetRegData("https://secure.softwarekey.com/solo/customers/getregdata.asp")
                registrationCall.LicenseID = licenseID
                registrationCall.Password = password
                
                'TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                Dim successful As Boolean = registrationCall.CallWebForm()
                If successful Then
                    companyName = registrationCall.CompanyName
                    contactName = registrationCall.ContactName
                    email = registrationCall.Email
                Else
                    companyName = ""
                    contactName = ""
                    email = ""
                    'TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                End If
                
                'TODO: This sample function's prototype only supports a subset of values returned by a GetRegData call.  You may add additional parameters and update the function as needed.
                
                Return successful
            End Function
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData"/> object.</summary>
            <param name="url">The URL to the web form.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.LicenseID">
            <summary>Gets or sets the License ID (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.Password">
            <summary>Gets or sets password (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.CompanyName">
            <summary>Gets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.ContactName">
            <summary>Gets the customer's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.Email">
            <summary>Gets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.Phone">
            <summary>Gets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.UserDefinedString1">
            <summary>Gets the User Defined String 1 value, which often contains the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.UserDefinedString2">
            <summary>Gets the User Defined String 2 value, which often contains the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.UserDefinedString3">
            <summary>Gets the User Defined String 3 value, which often contains the customer's third address line (usually including City, State/Province, and Zip/Postal Code).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.UserDefinedString4">
            <summary>Gets the User Defined String 4 value, which often contains the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetRegData.UserDefinedString5">
            <summary>Gets the User Defined String 5 value, which often contains the customer's fax number.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData">
            <summary>
            <para>Implementation for calling server-side scripts which were originally designed to with with the Automation Client's
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetTCData.htm">SK_GetTCData</see> and
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_GetTCDataEx.htm">SK_GetTCDataEx</see> functions.</para>
            </summary>
            <remarks>
            <para>In general, if you are using SOLO Server, you should be using
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">License.ActivateInstallationLicenseFile</see> or the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile">WebServiceCall implementation</see> for activation.</para>
            <note type="implementnotes">
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties must be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.LicenseID"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.Password"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.UserCode1"/>, which is also referred to as the "Session Code" or "cenum" in Protection PLUS 4.</item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.UserCode2"/>, which is also referred to as the Computer ID in Protection PLUS 4.</item>
            </list>
            </note>
            <para>Optional fields that may be populated before calling <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method include:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ProductID"/> - When set, the License ID specified must be for the specified Product ID.  In most cases, this should match the value used in <see cref="P:com.softwarekey.Client.Licensing.License.ThisProductID">License.ThisProductID</see>.</item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ProductOptionID"/> - When set, the License ID specified must be for the specified Product Option ID.</item>
            </list>
            <example>This example shows how to make a typical activation call for a PLUSManaged license:
            <code language="cs">
            public bool ActivateOnline(int licenseID, string password, int userCode1, int userCode2, int productID, out int activationCode1, out int activationCode2, out string licenseUpdate)
            {
                //TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                GetTcData activationCall = new GetTcData("https://secure.softwarekey.com/solo/unlock/getcode.asp");
                activationCall.LicenseID = licenseID;
                activationCall.Password = password;
                activationCall.UserCode1 = userCode1;
                activationCall.UserCode2 = userCode2;
                activationCall.ProductID = productID;
                
                //TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                bool successful = activationCall.CallWebForm();
                if (successful)
                {
                    activationCode1 = activationCall.ActivationCode1;
                    activationCode2 = activationCall.ActivationCode2;
                    licenseUpdate = activationCall.LicenseUpdate;
                }
                else
                {
                    activationCode1 = 0;
                    activationCode2 = 0;
                    licenseUpdate = "";
                    //TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                }
                
                return successful;
            }
            </code>
            <code language="vbnet">
            Public Function ActivateOnline (ByVal licenseID As Integer, ByVal password As String, ByVal userCode1 As Integer, ByVal userCode2 As Integer, ByVal productID As Integer, ByRef activationCode1 As Integer, ByRef activationCode2 As Integer, ByRef LicenseUpdate As String) As Boolean
                'TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                Dim activationCall As New GetTcData("https://secure.softwarekey.com/solo/unlock/getcode.asp")
                activationCall.LicenseID = licenseID
                activationCall.Password = password
                activationCall.UserCode1 = userCode1
                activationCall.UserCode2 = userCode2
                activationCall.ProductID = productID
                
                'TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                Dim successful As Boolean = activationCall.CallWebForm()
                If successful Then
                    activationCode1 = activationCall.ActivationCode1
                    activationCode2 = activationCall.ActivationCode2
                    licenseUpdate = activationCall.LicenseUpdate
                Else
                    activationCode1 = 0
                    activationCode2 = 0
                    licenseUpdate = ""
                    'TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                End If
                
                Return successful
            End Function
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData"/> object.</summary>
            <param name="url">The URL to the web form.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.LicenseID">
            <summary>Gets or sets the License ID (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.Password">
            <summary>Gets or sets password (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ProductID">
            <summary>Gets or sets the Product ID.  When specified, the License ID must be for the Product ID specified.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ProductOptionID">
            <summary>Gets or sets the Product Option ID.  When set, the License ID must be for the Product Option ID specified.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.UserCode1">
            <summary>Gets or sets User Code 1 (required).  In Protection PLUS 4, this is also referred to as the "Session Code" or "cenum".
            This value can be generated using <see cref="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.GenerateUserCode1Value">PLUS4Methods.GenerateUserCode1Value</see>.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.UserCode2">
            <summary>Gets or sets User Code 2 (required).  In Protection PLUS, this is also referred to as the "Computer ID".
            This value can be generated using <see cref="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.GenerateUserCode2Value(System.String)">PLUS4Methods.GenerateUserCode2Value</see>.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ActivationCode1">
            <summary>Gets Activation Code 1.  This is also known as "RegKey1" in Protection PLUS 4, and will be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the codes using <see cref="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.ValidateTriggerCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)"/>.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.ActivationCode2">
            <summary>Gets or sets Activation Code 2.  This is also known as "RegKey2" in Protection PLUS 4, and may be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the codes using <see cref="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.ValidateTriggerCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)"/>.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.GetTcData.LicenseUpdate">
            <summary>Gets the License Update data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData">
            <summary>
            <para>Implementation for calling server-side scripts which were originally designed to with with the Automation Client's
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_PostEvalData.htm">SK_PostEvalData</see> and
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_PostEvalDataEx.htm">SK_PostEvalDataEx</see> functions.</para>
            <note type="implementnotes">
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties must be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.ProductID"/> (In most cases, this should match the value used in <see cref="P:com.softwarekey.Client.Licensing.License.ThisProductID">License.ThisProductID</see>.)</item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Email"/></item>
            </list>
            </note>
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties may be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.CompanyName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.DistributorID"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.FirstName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.LastName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Address1"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Address2"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.City"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.StateProvince"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.PostalCode"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Country"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Phone"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Source"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString1"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString2"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString3"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString4"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString5"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString6"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString7"/></item>
            </list>
            <para>Your application is responsible for enforcing what data your users are required to enter.</para>
            <example>This example shows how to make a typical activation call for a PLUSManaged license:
            <code language="cs">
            public bool PostEvaluationData(int productID, string email, string companyName, string firstName, string lastName, string phone, out int registrationID)
            {
                //TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL or SOLO Server.
                PostEvalData evalCall = new PostEvalData("https://secure.softwarekey.com/solo/products/trialsignup.asp");
                evalCall.ProductID = productID;
                evalCall.Email = email;
                evalCall.CompanyName = companyName;
                evalCall.FirstName = firstName;
                evalCall.LastName = lastName;
                evalCall.Phone = phone;
                //TODO: Add additional arguments to this function and initialize additional properties here as needed.
                
                //TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                bool successful = evalCall.CallWebForm();
                if (successful)
                {
                    registrationID = evalCall.RegistrationID;
                }
                else
                {
                    registrationID = 0;
                    //TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                }
                
                return successful;
            }
            </code>
            <code language="vbnet">
            Public Function PostEvaluationData(ByVal productID As Integer, ByVal email As String, ByVal companyName As String, ByVal firstName As String, ByVal lastName As String, ByVal phone As String, ByRef registrationID As Integer) As Boolean
                'TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL or SOLO Server.
                Dim evalCall As New PostEvalData("https://secure.softwarekey.com/solo/unlock/getcode.asp")
                evalCall.ProductID = productID
                evalCall.Email = email
                evalCall.CompanyName = companyName
                evalCall.FirstName = firstName
                evalCall.LastName = lastName
                evalCall.Phone = phone
                'TODO: Add additional arguments to this function and initialize additional properties here as needed.
                
                'TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                Dim successful As Boolean = evalCall.CallWebForm()
                If successful Then
                    registrationID = evalCall.RegistrationID
                Else
                    registrationID = 0
                    'TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                End If
                
                Return successful
            End Function
            </code>
            </example>
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData"/> object.</summary>
            <param name="url">The URL to the web form.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.ProductID">
            <summary>Gets or sets the Product ID designated by SOLO Server for the application being evaluated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.CompanyName">
            <summary>Gets or sets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.DistributorID">
            <summary>Gets or sets the distributor's unique ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Email">
            <summary>Gets or sets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.FirstName">
            <summary>Gets or sets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.LastName">
            <summary>Gets or sets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Address1">
            <summary>Gets or sets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Address2">
            <summary>Gets or sets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.City">
            <summary>Gets or sets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.StateProvince">
            <summary>Gets or sets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.PostalCode">
            <summary>Gets or sets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Country">
            <summary>Gets or sets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Phone">
            <summary>Gets or sets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.Source">
            <summary>Gets or sets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString1">
            <summary>Gets or sets the User Defined String (Misc) Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString2">
            <summary>Gets or sets the User Defined String (Misc) Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString3">
            <summary>Gets or sets the User Defined String (Misc) Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString4">
            <summary>Gets or sets the User Defined String (Misc) Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString5">
            <summary>Gets or sets the User Defined String (Misc) Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString6">
            <summary>Gets or sets the User Defined String (Misc) Field 6 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.UserDefinedString7">
            <summary>Gets or sets the User Defined String (Misc) Field 7 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostEvalData.RegistrationID">
            <summary>Gets the registration/evaluation ID returned after successfully registering with SOLO Server.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData">
            <summary>
            <para>Implementation for calling server-side scripts which were originally designed to with with the Automation Client's
            <see href="http://www.softwarekey.com/help/plusman/Content/SWKeyCL/SWKeyCL_SK_PostRegData.htm">SK_PostRegData</see> function.
            If you are using SOLO Server (including SOLO Server Shared URL
            and SOLO Server Dedicated URL), then you should use <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration"/>.</para>
            <note type="implementnotes">
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties must be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.LicenseID"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Password"/></item>
            </list>
            </note>
            <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebFormCall.CallWebForm"/> method, the following properties may be set:</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.CompanyName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.FirstName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.LastName"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Address1"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Address2"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.City"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.StateProvince"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.PostalCode"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Country"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Phone"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Fax"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Email"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Overwrite"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.NotifyProduct"/></item>
                <item><see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.NotifyPartners"/></item>
            </list>
            <para>Your application is responsible for enforcing what data your users are required to enter.</para>
            <note type="caution"><para>It is important to note that leaving any of the optional fields empty above will result in an empty
            value being stored.  This is especially something to be aware of when setting the
            <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Overwrite">Overwrite</see> property to true.</para></note>
            <example>This example shows how to make a typical activation call for a PLUSManaged license:
            <code language="cs">
            public bool PostRegistrationData(int licenseID, string password, string email, string companyName, string firstName, string lastName, string phone)
            {
                //TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                PostRegData registrationCall = new PostRegData("https://secure.softwarekey.com/solo/postings/postregdata.asp");
                registrationCall.LicenseID = licenseID;
                registrationCall.Password = password;
                registrationCall.Email = email;
                registrationCall.CompanyName = companyName;
                registrationCall.FirstName = firstName;
                registrationCall.LastName = lastName;
                registrationCall.Phone = phone;
                //TODO: Add additional arguments to this function and initialize additional properties here as needed.
                
                //TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                bool successful = registrationCall.CallWebForm();
                if (!successful)
                {
                    //TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                }
                
                return successful;
            }
            </code>
            <code language="vbnet">
            Public Function PostRegistrationData(ByVal licenseID As Integer, ByVal password As String, ByVal email As String, ByVal companyName As String, ByVal firstName As String, ByVal lastName As String, ByVal phone As String, ByRef registrationID As Integer) As Boolean
                'TODO: The URL used below is for SOLO Server Shared URL.  You will need to update this URL if you are using Instant SOLO Server Dedicated URL, or SOLO Server.
                Dim registrationCall As New PostRegData("https://secure.softwarekey.com/solo/postings/postregdata.asp")
                registrationCall.LicenseID = licenseID
                registrationCall.Password = password
                registrationCall.Email = email
                registrationCall.CompanyName = companyName
                registrationCall.FirstName = firstName
                registrationCall.LastName = lastName
                registrationCall.Phone = phone
                'TODO: Add additional arguments to this function and initialize additional properties here as needed.
                
                'TODO: Initialize the Proxy property here as appropriate if you need to support proxy server authentication.
                
                Dim successful As Boolean = registrationCall.CallWebForm()
                If Not successful Then
                    'TODO: Evaluate the AutomationClientErrorCode, LastException, and ProxyAuthenticationRequired properties for possible reasons why the call failed.
                End If
                
                Return successful
            End Function
            </code>
            </example>
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData"/> object.</summary>
            <param name="url">The URL to the web form.</param>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.CallWebForm">
            <summary>Calls the Automation Client web page.</summary>
            <returns>Returns true if successful.  If false is returned, check the <see cref="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.AutomationClientWebFormCall.AutomationClientErrorCode"/>, <see cref="P:com.softwarekey.Client.WebService.WebFormCall.LastException"/>, and <see cref="P:com.softwarekey.Client.WebService.WebFormCall.ProxyAuthenticationRequired"/> properties for possible reasons why the call failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.LicenseID">
            <summary>Gets or sets the License ID (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Password">
            <summary>Gets or sets password (required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.CompanyName">
            <summary>Gets or sets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.FirstName">
            <summary>Gets or sets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.LastName">
            <summary>Gets or sets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Address1">
            <summary>Gets or sets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Address2">
            <summary>Gets or sets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.City">
            <summary>Gets or sets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.StateProvince">
            <summary>Gets or sets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.PostalCode">
            <summary>Gets or sets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Country">
            <summary>Gets or sets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Phone">
            <summary>Gets or sets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Fax">
            <summary>Gets or sets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Email">
            <summary>Gets or sets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.Overwrite">
            <summary>Gets or sets whether prior registration data should be overwritten when present.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.NotifyProduct">
            <summary>Gets or sets whether the customer should be notified of product-related events, releases, and promotions.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PostRegData.NotifyPartners">
            <summary>Gets or sets whether the customer should be notified of partner promotions.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods">
            <summary>Static methods for Protection PLUS 4 compatibility.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.ValidateTriggerCode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>Determines whether or not a trigger code is valid.  Note this does not process the trigger code or modify the license file in any way.</summary>
            <remarks>
            <note type="inheritinfo">
            <para>If the return value is false, then the Trigger Code is considered invalid.  This can be caused for several reasons, including, but not limited to:</para>
            <list type="bullet">
                <item>The user mistyped one or more of the user code and/or activation code values.</item>
                <item>The Trigger Code Seed used in the application does not match the seed used when generating the trigger code.  Check the Product Option configuration in SOLO Server or the Product Definition settings in LFEdit to verify if this is the issue.</item>
                <item>The session code (User Code 1) is now different from the one used when generating the Trigger Code.</item>
                <item>The dataSeed (also known as the RegKey2 seed) is not an acceptable value, between 1 and 255.</item>
                <item>The dataSeed (also known as the RegKey2 seed) is not the same value used when encrypting the tcData value (or when generating activationCode2).</item>
                <item>The tcData value encrypted (or the value used when generating activationCode2) was too large (or greater than 16383).</item>
            </list>
            </note>
            </remarks>
            <param name="activationCode1">Activation Code 1 (RegKey 1).</param>
            <param name="activationCode2">Activation Code 2 (RegKey 2).  Pass zero to omit.</param>
            <param name="userCode1">User Code 1 (Session Code/Code Entry Number).</param>
            <param name="userCode2">User Code 2 (Computer ID).</param>
            <param name="tcSeed">Trigger Code Seed.</param>
            <param name="dataSeed">Event Data Seed (RegKey2 Seed, which must be a value between 1 and 255).</param>
            <param name="code">Trigger Code Number, which will receive a value between 1 and 50 when successful.</param>
            <param name="tcData">Trigger Code Event Data, which will receive a value between 0 and 16383 when successful.</param>
            <returns>If the trigger code is valid, this method returns true and specifies the trigger code and event data in the code and tcData arguments, respectively.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.TCode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Decrypts an activation code (compatible with <see href="http://www.softwarekey.com/help/plusman/Content/KeyLib/pp_tcode.htm" target="_blank">pp_tcode</see>). Note this does not process the trigger code or modify the license file in any way.</summary>
            <remarks>
            <note type="inheritinfo">
            <para>If the return value is zero, then the Trigger Code is considered invalid.  This can be caused for several reasons, including, but not limited to:</para>
            <list type="bullet">
                <item>The user mistyped one of the values.</item>
                <item>The Trigger Code Seed used in the application does not match the seed used when generating the trigger code.  Check the Product Option configuration in SOLO Server or the Product Definition settings in LFEdit to verify if this is the issue.</item>
                <item>The session code (User Code 1) is now different from the one used when generating the Trigger Code.</item>
            </list>
            </note>
            </remarks>
            <param name="activationCode1">Activation Code 1 (RegKey 1)</param>
            <param name="userCode1">User Code 1 (Session Code/Code Entry Number)</param>
            <param name="userCode2">User Code 2 (Computer ID)</param>
            <param name="seed">Trigger Code Seed</param>
            <returns>Returns the Trigger Code number, or 0 if the Trigger Code number could not be determined.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.NEncrypt(System.Int32,System.Int32)">
            <summary>Encrypts a number or RegKey2 value (compatible with <see href="http://www.softwarekey.com/help/plusman/Content/KeyLib/pp_nencrypt.htm" target="_blank">pp_nencrypt</see>).</summary>
            <remarks>
            <note type="inheritinfo">
            <para>If the return value is -1, then the value or seed is considered invalid.  This can be caused for several reasons, including, but not limited to:</para>
            <list type="bullet">
                <item>The seed (often the RegKey2 Seed in this case) is not an acceptable value, between 1 and 255.</item>
                <item>The number being encrypted is too large (or greater than 16383).</item>
            </list>
            </note>
            </remarks>
            <param name="number">The numeric value (between 0 and 16383) to encrypt.</param>
            <param name="seed">The encryption seed, which must be a value between 1 and 255.</param>
            <returns>Returns the encrypted number, or -1 if encryption failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.NDecrypt(System.Int32,System.Int32)">
            <summary>Decrypts a number or RegKey2 value (compatible with <see href="http://www.softwarekey.com/help/plusman/Content/KeyLib/pp_ndecrypt.htm" target="_blank">pp_ndecrypt</see>).</summary>
            <remarks>
            <note type="inheritinfo">
            <para>If the return value is -1, then the value is considered invalid.  This can be caused for several reasons, including, but not limited to:</para>
            <list type="bullet">
                <item>The user mistyped the value being decrypted (usually called Activation Code 2 or RegKey2).</item>
                <item>The seed (also known as the RegKey2 seed) is not an acceptable value, between 1 and 255.</item>
                <item>The seed (also known as the RegKey2 seed) is not the same value used when encrypting the number value.</item>
                <item>The number value encrypted (or the value used when generating RegKey2) was too large (or greater than 16383).</item>
            </list>
            </note>
            </remarks>
            <param name="number">The number to decrypt.</param>
            <param name="seed">The encryption seed, which must be a value between 1 and 255.</param>
            <returns>Returns the decrypted number, or -1 if decryption failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.GenerateUserCode1Value">
            <summary>Generates a Protection PLUS 4 compatible "User Code 1" (or Session Code) value, which may be used to make each activation attempt and each trigger code issued for a system unique.</summary>
            <remarks><para>This generates values compatible with <see href="http://www.softwarekey.com/help/plusman/Content/KeyLib/pp_cenum.htm">pp_cenum</see>.</para></remarks>
            <returns>Returns a Protection PLUS 4 compatible "User Code 1" (or Session Code) value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.GenerateUserCode2Value(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">
            <summary>Generates a Protection PLUS 4 Trigger Code "User Code 2" (or "Computer ID") value from a list of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects.</summary>
            <param name="identifiers">The <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects which identify the system being activated.</param>
            <remarks>
            <note type="caution">
            <para>The Protection PLUS 4 compatible "User Code 2" or "Computer ID" generated by this method are NOT designed to match Computer ID values
            generated by Protection PLUS 4, and are also NOT designed to work with the Protection PLUS 4 Computer ID thresholds.  This method only
            provides a simple way to generate a Protection PLUS 4 compatible Computer ID to use with activation, and is NOT designed for any purpose
            other than providing a reasonable, compatible means of ensuring a Protection PLUS 4 trigger code is only processed for the appropriate
            system.
            </para>
            </note>
            <note type="caution">
            <para>This method does not validate the <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> list is a valid object, therefore before calling this method always validate 
            the <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> list is not null.  Otherwise, your application may receive a null reference exception.
            </para>
            </note>
            </remarks>
            <returns>Returns a 32-bit integer value representing a Protection PLUS 4 compatible "Computer ID" or "User Code 2" value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods.GenerateUserCode2Value(System.String)">
            <summary>Generates a Protection PLUS 4 Trigger Code "User Code 2" (or "Computer ID") value from a string which contains data that uniquely identifies the system.</summary>
            <param name="identifiers">The string which uniquely identifies the system being activated.</param>
            <remarks>
            <note type="caution">
            <para>The Protection PLUS 4 compatible "User Code 2" or "Computer ID" generated by this method are NOT designed to match Computer ID values
            generated by Protection PLUS 4, and are also NOT designed to work with the Protection PLUS 4 Computer ID thresholds.  This method only
            provides a simple way to generate a Protection PLUS 4 compatible Computer ID to use with activation, and is NOT designed for any purpose
            other than providing a reasonable, compatible means of ensuring a Protection PLUS 4 trigger code is only processed for the appropriate
            system.
            </para>
            </note>
            <note type="caution">
            <para>This method does not validate the <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> string is a valid object, therefore before calling this method always validate 
            the <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> string is not null or empty.  Otherwise, your application may receive a null reference exception.
            </para>
            </note>
            </remarks>
            <returns>Returns a 32-bit integer value representing a Protection PLUS 4 compatible "Computer ID" or "User Code 2" value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods._TCode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Decrypts an activation code</summary>
            <param name="regKey1">Int32</param>
            <param name="userCode1">Int32</param>
            <param name="userCode2">Int32</param>
            <param name="seed">Int32</param>
            <returns>Int32</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods._NEncrypt(System.Int32,System.Int32)">
            <summary>Processes number encryption compatible with pp_nencrypt</summary>
            <param name="number">Int32</param>
            <param name="seed">Int32</param>
            <returns>Int32</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods._NDecrypt(System.Int32,System.Int32)">
            <summary>Processes number decryption compatible with pp_ndecrypt</summary>
            <param name="number">Int32</param>
            <param name="seed">Int32</param>
            <returns>Int32</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods._GenerateUserCode1Value">
            <summary>Generates a Protection PLUS 4 compatible "User Code 1" (or Session Code) value, which may be used to make each activation attempt and each trigger code issued for a system unique.</summary>
            <remarks><para>This generates values compatible with <see href="http://www.softwarekey.com/help/plusman/Content/KeyLib/pp_cenum.htm">pp_cenum</see>.</para></remarks>
            <returns>Returns a Protection PLUS 4 compatible "User Code 1" (or Session Code) value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Compatibility.ProtectionPLUS4.PLUS4Methods._GenerateUserCode2Value(System.String)">
            <summary>Generates a Protection PLUS 4 Trigger Code "User Code 2" (or "Computer ID") value from a string which contains data that uniquely identifies the system.</summary>
            <param name="identifiers">The string which uniquely identifies the system being activated.</param>
            <returns>Returns a 32-bit integer value representing a Protection PLUS 4 compatible "Computer ID" or "User Code 2" value.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper">
            <summary>Class for processing symmetric cryptographic routines via the Rijndael/AES algorithm.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper">
            <summary>Base class for handling symmetric/secret-key cryptographic routines.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper"/> object.</summary>
            <param name="encryptionObject">The object (which must be derived from <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>) used to process cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper"/> object, and initializes IV and Key data from base64 encoded strings</summary>
            <param name="encryptionObject">The object (which must be derived from <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>) used to process cryptographic routines.</param>
            <param name="IV">The base 64 encoded string containing the initialization vector.</param>
            <param name="key">The base 64 encoded string containing the key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Initialize(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>Initializes the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object used for cryptographic routines.</summary>
            <param name="encryptionObject">The <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object used for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Initialize(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>Initializes the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object used for cryptographic routines.</summary>
            <param name="encryptionObject">The <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object used for cryptographic routines.</param>
            <param name="iv">The base 64 encoded string containing the Initialization Vector.</param>
            <param name="key">The base 64 encoded string containing the Key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Encrypt(System.Byte[])">
            <summary>Processes Encryption</summary>
            <param name="input">The byte array to encrypt.</param>
            <returns>Returns a byte array containing the encrypted data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Decrypt(System.Byte[])">
            <summary>Processes decryption</summary>
            <param name="input">The byte array to decrypt.</param>
            <returns>Returns a byte array containing the decrypted data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Clear">
            <summary>Clears cryptographic data from memory - the object is not usable after calling this method!</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Dispose">
            <summary>Clears cryptographic data from memory - the object is not usable after calling this method!</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Dispose(System.Boolean)">
            <summary>Clears cryptographic data from memory - the object is not usable after calling this method!</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.GenerateNewEncryptionObject">
            <summary>Creates a new encryption object of the same type.</summary>
            <returns>Returns a new <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object of the same type used in this instance.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.GenerateKey(System.Int32)">
            <summary>Generates a new encryption key.  (This does not modify this object's key.)</summary>
            <param name="keySize">The key size (in bits - i.e. 128 or 256).</param>
            <returns>Returns a byte array containing the new Key data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.GenerateKey">
            <summary>Generates a new encryption key using the this object's key size.  (This does not modify this object's key.)</summary>
            <returns>Returns a byte array containing the new Key data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.GenerateIV">
            <summary>Generates a new initialization vector.  (This does not modify this object's initialization vector.)</summary>
            <returns>Returns a byte array containing the new Initialization Vector data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.EncryptionObject">
            <summary>Gets or sets the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> object used for cryptographic routines.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.IV">
            <summary>Gets or sets the base 64 encoded Initialization Vector string</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.SymmetricEncryptionHelper.Key">
            <summary>Gets or sets the base 64 encoded Key string</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper"/> object with specified key data.</summary>
            <param name="iv">The base 64 encoded Initialization Vector.</param>
            <param name="key">The base 64 encoded Key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper.#ctor(System.Byte[],System.Byte[])">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper"/> object with specified key data.</summary>
            <param name="iv">The base 64 encoded Initialization Vector.</param>
            <param name="key">The base 64 encoded Key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RijndaelEncryptionHelper.GetInitializedEncryptionObject(System.Byte[],System.Byte[])">
            <summary>Creates a new RijndaelManaged object and initializes the key data.</summary>
            <param name="iv">The initialization vector.</param>
            <param name="key">The key.</param>
            <returns>Returns a new RijndaelManaged object with the key initialized.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.XmlRsaDecryption">
            <summary>Performs RSA Algorithm decryption and verification on XML documents.</summary>
            <remarks>
            <note type="caution">
            <para>
            Use of this class directly is atypical and generally not recommended.  This is 
            available to make it easier to use customized License File and Web service
            request formats.
            </para>
            </note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase">
            <summary>Base class from which XML, RSA Algorithm cryptographic routines are implemented.</summary>
            <remarks>
            <note type="caution">
            <para>
            Use of this class directly is atypical and generally not recommended.  This is 
            available to make it easier to use customized License File and Web service
            request formats.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase"/> object.  (Requires the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.EncryptionKey"/> and <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument"/> properties to be set before calling the <see cref="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.Process"/> method!)</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase"/> object, initialized with the encryption data and input document.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlDocument object to process.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase"/> object, initialized with the encryption data and input XML document string.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XML string data to process.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase"/> object, initialized with the encryption data and input XML root node.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlNode object referencing the root/document node to process.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.Process">
            <summary>Processes the input document.</summary>
            <returns>Returns true and stores the result in the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocument"/> property if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.EncryptionKey">
            <summary>Gets or sets the Encryption Key data required for cryptographic routines.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.EncryptionOptions">
            <summary>Gets or sets options used when encrypting or decrypting.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.SignatureOptions">
            <summary>Gets or sets options used when creating or verifying digital signatures.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument">
            <summary>Gets or sets the input XmlDocument.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocumentString">
            <summary>Gets or sets the input XML string.  (Changing the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument"/> property affects this property, and setting this property updates the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument"/> property.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocument">
            <summary>Gets or sets the output XmlDocument (null when processing has not been or completed, or failed).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError">
            <summary>Gets or sets the last error that occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocumentString">
            <summary>Gets the output XML string (derived from the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocument"/> property, this is an empty string null when processing has not been or completed, or failed).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.UseEncryption">
            <summary>Gets whether encryption or decryption is required.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.UseSignatures">
            <summary>Gets whether digital signatures need to be created or verified.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaDecryption"/> object.  (Requires the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.EncryptionKey"/> and <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument"/> properties to be set before calling the <see cref="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.Process"/> method!)</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaDecryption"/> object, initialized with the encryption data and input document.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlDocument object to decrypt and verify.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaDecryption"/> object, initialized with the encryption data and input XML document string.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XML string data to decrypt and verify.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaDecryption"/> object, initialized with the encryption data and input XML root node.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlNode object referencing the root/document node to decrypt and verify.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.Process">
            <summary>Processes the input document.</summary>
            <returns>Returns true and stores the result in the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocument"/> property if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.ProcessDecryption(System.Xml.XmlDocument@)">
            <summary>Processes encryption.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaDecryption.ProcessVerifying(System.Xml.XmlDocument@)">
            <summary>Processes the verification of the digital signature.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaDecryption.Recursive">
            <summary>Gets or sets whether all elements are decrypted recursively (recommended for most web service calls).  Setting this property to false will result in only the first level being decrypted.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.XmlRsaDecryption.VerifyWithBothKeys">
            <summary>Gets or sets whether verification will be attempted with both keys.  (If true, the behavior specified in the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.SignatureOptions"/> property is overridden.  This is helpful for special cases, such as writable license files.)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.XmlRsaEncryption">
            <summary>Performs RSA Algorithm signing and encryption on XML documents.</summary>
            <remarks>
            <note type="caution">
            <para>
            Use of this class directly is atypical and generally not recommended.  This is 
            available to make it easier to use customized License File and Web service
            request formats.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryption"/> object.  (Requires the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.EncryptionKey"/> and <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.InputDocument"/> properties to be set before calling the <see cref="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.Process"/> method!)</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryption"/> object, initialized with the encryption data and input document.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlDocument object to sign and encrypt.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryption"/> object, initialized with the encryption data and input XML document string.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XML string data to sign and encrypt.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.XmlRsaEncryption"/> object, initialized with the encryption data and input XML root node.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object pre-initialized with the encryption data.</param>
            <param name="input">The XmlNode object referencing the root/document node to sign and encrypt.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.Process">
            <summary>Processes the input document.</summary>
            <returns>Returns true and and stores the result in the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.OutputDocument"/> property if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.ProcessEncryption(System.Xml.XmlDocument@)">
            <summary>Processes encryption.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.XmlRsaEncryption.ProcessSigning(System.Xml.XmlDocument@)">
            <summary>Digitally signs the input document.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Encryption.XmlRsaEncryptionBase.LastError"/> property for details.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.XmlRsaEncryptionOptions">
            <summary>Encryption and Decryption Options.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaEncryptionOptions.OmitEncryption">
            <summary>Omit encryption and decryption</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaEncryptionOptions.UseClientKey">
            <summary>Use the Client Key</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaEncryptionOptions.UseServerKey">
            <summary>Use the Server Key</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaEncryptionOptions.Default">
            <summary>Use the key pair as appropriate</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions">
            <summary>Digital Signature Options.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions.OmitSignature">
            <summary>Omit signing or verifying digital signatures.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions.UseClientKey">
            <summary>Use the Client Key.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions.UseServerKey">
            <summary>Use the Server Key.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions.EncryptionDefault">
            <summary>Use the key pair as appropriate for encryption.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.XmlRsaSignatureOptions.DecryptionDefault">
            <summary>Use the key pair as appropriate for decryption.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseImageAlias">
            <summary>Enables creation and management of License File aliases hidden within an image file.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAlias">
            <summary>Base, abstract class for implementing License File aliases.</summary>
            <remarks>
            <para>
            Aliases are simply hidden copies of the License file.  Though these may technically exist anywhere you see fit (through custom
            implementation), currently supported implementations only support use of the file-system and the Windows Registry.  The currently
            supported implementations are listed below:
            </para>
            <list type="table">
                <listheader>
                    <term>Name</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term><see cref="T:com.softwarekey.Client.Licensing.LicenseFileSystemAlias"/></term>
                    <description>Implements file-system based aliases, which are hidden copies of the License File which reside on the system's file-system.</description>
                </item>
                <item>
                    <term><see cref="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias"/></term>
                    <description>Implements Windows Registry based aliases, which are hidden copies of the License File which reside on the system's Registry.</description>
                </item>
                <item>
                    <term><see cref="T:com.softwarekey.Client.Licensing.LicenseImageAlias"/></term>
                    <description>Implements Image based aliases, which are hidden copies of the License File which reside within image pixel data.</description>
                </item>
            </list>
            <note type="caution">
            <para>
            When aliases are written, this library attempts to write the license file alias to disk, and also attempts to give full permissions everyone
            access to this file (using <see cref="T:System.Security.Principal.WellKnownSidType">WellKnownSidType.WorldSid</see>).
            This is done to help avoid UAC issues with Windows Vista/2008 and later, and is the same behavior performed by Protection PLUS 4 SDK libraries and Instant Protection PLUS 3.
            Please <see href="http://www.softwarekey.com/go/?ID=31" target="_blank">see our knowledge-base</see>
            for additional information.
            </para>
            </note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.m_lastError">
            <summary>The last error that occurred</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.#ctor(System.String,com.softwarekey.Client.Licensing.LicenseAlias.LocationType,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> object.</summary>
            <param name="location">The full/absolute path or location to the alias.</param>
            <param name="type">The type of location.</param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object containing the required encryption data.</param>
            <param name="useEncryption">Whether or not to use encryption.  (Set to true if unsure.)</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.CheckAlias">
            <summary>Compares the current license to the alias.</summary>
            <returns>Returns true if the alias is found to be valid.  If it is not valid, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.DeleteAlias">
            <summary>Deletes the current alias.</summary>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the most current license file data.</summary>
            <param name="license">The license contents to write.</param>
            <returns>Returns true if the alias was written successfully.  If it failed to write, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.CheckAlias(System.String)">
            <summary>Decrypts and verifies the alias document, and checks its last updated date.</summary>
            <param name="alias">The contents of the alias to validate.</param>
            <returns>Returns true if the alias is valid.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAlias.GetMostCurrentAlias(System.Collections.Generic.List{com.softwarekey.Client.Licensing.LicenseAlias})">
            <summary>Gets the most current alias from a list.</summary>
            <param name="aliases">Generic list of <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> objects.</param>
            <returns>Returns the most current <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> object.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Location">
            <summary>Gets the location of the alias.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Type">
            <summary>Gets the type location in which the alias is stored.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError">
            <summary>Gets the last error that occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.LastUpdated">
            <summary>Gets the date the alias was last updated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAlias.Contents">
            <summary>Gets the contents of the alias file.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAlias.LocationType">
            <summary>The type of location in which the alias is to be stored</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.Unknown">
            <summary>Unknown type of alias location</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.FileSystem">
            <summary>The alias is located on a file system accessible by the computer</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAlias.LocationType.WindowsRegistry">
            <summary>The alias is located in the Windows registry on the current computer</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseImageAlias.#ctor(System.String,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean)">
            <summary>Constructor for managing a License File alias located within the image data of an image file.</summary>
            <param name="location">The absolute path to the alias file.</param>
            <param name="encryptionKey">The client encryption key CSP blob.</param>
            <param name="useEncryption">Set to true to use encrypted alias files.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseImageAlias.CheckAlias">
            <summary>Compares the current license to the alias.</summary>
            <returns>Returns true if the alias is found to be valid.  If it is not valid, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseImageAlias.DeleteAlias">
            <summary>Deletes the current alias file.</summary>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseImageAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the most current license file data.</summary>
            <remarks>
            <note type="caution">
            <para>
            This method uses the <see cref="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)"/> to try to give all users full control of the alias file.  This helps
            avoid problems with the UAC in Windows, and helps avoid problems that can often be encountered when your application stores alias files
            in a location that is shared by all users.
            </para>
            </note>
            </remarks>
            <param name="license">The license contents to write to the alias.</param>
            <returns>Returns true if the alias is written successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseImageAlias.ImageFormat">
            <summary>Gets the format of the image.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseImageAlias.AliasImageFormat">
            <summary>Image types/formats.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseImageAlias.AliasImageFormat.Unsupported">
            <summary>An unsupported image format.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseImageAlias.AliasImageFormat.Bitmap">
            <summary>Bitmap (*.bmp) image format.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAuthor">
            <summary>Contains data about the SOLO Server Author which issued the license.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.Author"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseDataObject">
            <summary>Abstract class used for implement objects which hold supplemental license data.</summary>
            <remarks>
            <para>This class is used to implement a variety of license data objects, including:</para>
            <list type="bullet">
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseAuthor"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseCustomer"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseDistributor"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseProduct"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseValidationOptions"/></item>
                <item><see cref="T:com.softwarekey.Client.Licensing.LicenseGroup"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseDataObject.EnforceWritable">
            <summary>Used to throw an <see cref="T:System.InvalidOperationException"/> in set accessor methods when used with read-only licenses.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDataObject.Writable">
            <summary>Whether or not the object was loaded for a writable license.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAuthor.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseAuthor"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAuthor.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseAuthor"/> object initialized with XML from the license file.</summary>
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAuthor.ToXml">
            <summary>Generates an XmlDocument containing the current object's data.</summary>
            <returns>Returns an XmlDocument containing the current object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.AuthorID">
            <summary>Gets or sets the Author ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.CompanyName">
            <summary>Gets or sets the Author Company Name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportEmail">
            <summary>Gets or sets the Author Support Email Address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportSite">
            <summary>Gets or sets the Author Support Web Site Address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.SupportPhone">
            <summary>Gets or sets the Author Support Phone Number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAuthor.CustomData">
            <summary>Gets or sets the Author Custom Data, which contains custom XML or alphanumeric data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseCustomer">
            <summary>Contains data about the SOLO Server Customer to which the license belongs.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.Customer"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseCustomer.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseCustomer"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseCustomer.#ctor(System.Xml.XmlNode)">
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseCustomer.ToXml">
            <summary>Generates an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</summary>
            <returns>Returns an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.CustomerID">
            <summary>Gets or sets the unique Customer ID (typically issued by SOLO Server) for this customer.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.FirstName">
            <summary>Gets or sets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.LastName">
            <summary>Gets or sets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.CompanyName">
            <summary>Gets or sets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Address1">
            <summary>Gets or sets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Address2">
            <summary>Gets or sets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.City">
            <summary>Gets or sets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.StateProvince">
            <summary>Gets or sets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.PostalCode">
            <summary>Gets or sets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Country">
            <summary>Gets or sets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Email">
            <summary>Gets or sets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Phone">
            <summary>Gets or sets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Fax">
            <summary>Gets or sets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.Unregistered">
            <summary>Gets or sets whether or not the customer is unregistered.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.NotifyPartners">
            <summary>Gets or sets whether the customer will receive email alerts from trusted partners.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.NotifyProducts">
            <summary>Gets or sets whether the customer will receive email alerts for products updates.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseCustomer.ExcludeFromAll">
            <summary>Gets or sets whether or not the customer has opted to be excluded from all marketing and product communications.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseDistributor">
            <summary>Contains data about the SOLO Server Distributor with which the license is associated.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.Distributor"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseDistributor.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseDistributor"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseDistributor.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseDistributor"/> object initialized with XML from the license file.</summary>
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseDistributor.ToXml">
            <summary>Generates an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</summary>
            <returns>Returns an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.DistributorID">
            <summary>Gets or sets the distributor's unique ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Type">
            <summary>Gets or sets the type of distributor.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.CompanyName">
            <summary>Gets or sets the distributor's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Phone">
            <summary>Gets or sets the distributor's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Email">
            <summary>Gets or sets the distributor's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.WebSite">
            <summary>Gets or sets the distributor's web site.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Address1">
            <summary>Gets or sets the distributor's address (line 1).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Address2">
            <summary>Gets or sets the distributor's address (line 2).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Address3">
            <summary>Gets or sets the distributor's address (line 3).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseDistributor.Country">
            <summary>Gets or sets the country where the distributor is located.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseGroup">
            <summary>Contains data about the SOLO Server License Group for which the license was assigned.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseGroup.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseGroup"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseGroup.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseGroup"/> object initialized with XML from the license file.</summary>
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseGroup.ToXml">
            <summary>Generates an XmlDocument containing the current object's data.</summary>
            <returns>Returns an XmlDocument containing the current object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseGroup.LicenseGroupID">
            <summary>Gets or sets the License Group ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseGroup.LicenseGroupName">
            <summary>Gets or sets the License Group Name.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProduct">
            <summary>Contains data about the SOLO Server Product for which the license was issued.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.Product"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProduct.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProduct"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProduct.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProduct"/> object initialized with XML from the license file.</summary>
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProduct.ToXml">
            <summary>Generates an XmlDocument containing the current object's data.</summary>
            <returns>Returns an XmlDocument containing the current object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.ProductID">
            <summary>Gets or sets the Product ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.ProductName">
            <summary>Gets or sets the Product Name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProduct.CustomData">
            <summary>Gets or sets the Product Custom Data, which contains custom XML or alphanumeric data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProductOption">
            <summary>Contains data about the SOLO Server Product Option for which the license was issued.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.ProductOption"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption"/> object initialized with XML from the license file.</summary>
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.ParseProductOptionType(System.String)">
            <summary>Parses a Product Option type string from SOLO Server to a more readable enumeration.</summary>
            <param name="value">The string value representing the Product Option type.</param>
            <returns>Returns a <see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType"/>.  If the string is unrecognized, <see cref="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.Custom"/> is returned.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionTypeToString(com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType)">
            <summary>Returns a string value representing the current option type.</summary>
            <param name="type">The <see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType"/> value.</param>
            <returns>Returns a SOLO Server product option type string representation of the <see cref="T:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType"/>.  If the string is unsupported, an empty string is returned.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductOption.ToXml">
            <summary>Generates an XmlDocument containing the current object's data.</summary>
            <returns>Returns an XmlDocument containing the current object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.ProdOptionID">
            <summary>Gets or sets the Product Option ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionName">
            <summary>Gets or sets the Product Option Name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionType">
            <summary>Gets or sets the Product Option Type.</summary>
            <remarks>Setting this property will also change the value returned by <see cref="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionTypeString"/>.</remarks>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionTypeString">
            <summary>Gets or sets the Product Option Type string value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseProductOption.CustomData">
            <summary>Gets or sets the Product Option Custom Data, which contains custom XML or alphanumeric data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType">
            <summary>Supported SOLO Server product option types.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.ActivationCode">
            <summary>Standard Protection PLUS 4 and 5 activation code.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.ActivationCodeWithQuantity">
            <summary>Protection PLUS 4 and 5 activation code with the quantity of items ordered.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.ActivationCodeWithFixedValue">
            <summary>Protection PLUS 4 and 5 activation code with an additional, fixed value.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.ActivationCodeWithDaysLeft">
            <summary>Protection PLUS 4 and 5 activation code with the number of days left until the license expires.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.VolumeLicense">
            <summary>Protection PLUS 5 volume license.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.DownloadableLicenseWithTriggerCodeValidation">
            <summary>Protection PLUS 5 downloadable license with Protection PLUS 4 compatible trigger code validation.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseProductOption.ProductOptionType.Custom">
            <summary>An unknown or Custom value.  See the <see cref="P:com.softwarekey.Client.Licensing.LicenseProductOption.OptionTypeString"/> property.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseValidationOptions">
            <summary>Contains data about the SOLO Server License Validation Options associated with the license.</summary>
            <remarks>
            <para>
            This object's data is available in the <see cref="T:com.softwarekey.Client.Licensing.License"/> class's <see cref="P:com.softwarekey.Client.Licensing.License.LicenseValidationOptions"/> property.
            These settings may be utilized by your application when implementing the license refresh logic.
            </para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseValidationOptions.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseValidationOptions"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseValidationOptions.#ctor(System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseValidationOptions"/> object.</summary>
            <param name="licenseValidationOptionID">The unique License Validation Option ID.</param>
            <param name="licenseValidationOptionName">The name of the License Validation Options settings.</param>
            <param name="refreshLicenseAlwaysRequired">Whether a refresh is always required when the application is run.</param>
            <param name="refreshLicenseAttemptFrequency">The number of days to wait before attempts to refresh and validate the license against SOLO Server.</param>
            <param name="refreshLicenseRequireFrequency">The number of days to wait before attempts to refresh and validate the license against SOLO Server are required.</param>
            <param name="refreshLicenseRequireWarningPeriod">The number of days before a required license refresh with SOLO Server to start notifying the user about the upcoming required license refresh.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseValidationOptions.#ctor(System.Xml.XmlNode)">
            <param name="xml">The license file XML.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseValidationOptions.ToXml">
            <summary>Generates an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</summary>
            <returns>Returns an <see cref="T:System.Xml.XmlDocument"/> that contains this object's data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.LicenseValidationOptionID">
            <summary>Gets or sets the unique License Validation Options ID (typically issued by SOLO Server).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.LicenseValidationOptionName">
            <summary>Gets or sets the name of the License Validation Options settings.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.RefreshLicenseAlwaysRequired">
            <summary>Gets or sets whether a refresh is always required when the application is run.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.RefreshLicenseAttemptFrequency">
            <summary>Gets or sets the number of days to wait before attempts to refresh and validate the license against SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.RefreshLicenseRequireFrequency">
            <summary>Gets or sets the number of days to wait before attempts to refresh and validate the license against SOLO Server are required.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseValidationOptions.RefreshLicenseRequireWarningPeriod">
            <summary>Gets or sets the number of days before a required license refresh with SOLO Server to start notifying the user about the upcoming required license refresh.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a motherboard's BIOS UUID.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The BiosUuidIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifier">
            <summary>Abstract System Identifier class, from which all SystemIdentifiers are implemented</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_defaultIdNumber">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_name">
            <summary>The unique identifier name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_value">
            <summary>The identifier value</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_type">
            <summary>The type of identifier</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifier.m_valueHash">
            <summary>The hash of the identifier value</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The identifier's value.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the SystemIdentifier (i.e. NicIdentifier1).</param>
            <param name="value">The identifier's value.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the SystemIdentifier (i.e. NicIdentifier1).</param>
            <param name="value">The identifier's value.</param>
            <param name="hash">A hash of the identifier's value.</param>
            <param name="type">The type of system identifier (i.e. NicIdentifier).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToString">
            <summary>Generates an XML formatted string of the SystemIdentifier.</summary>
            <returns>Returns an XML formatted string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToActivationDataString">
            <summary>Generates an XML formatted string of the system identifier, formatted for SOLO Server's XmlActivationService web service.</summary>
            <returns>Returns an XML formatted string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.ToXml">
            <summary>Generates an XmlDocument of the SystemIdentifier.</summary>
            <returns>Returns an XmlDocument composed of the SystemIdentifier data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.Equals(System.Object)">
            <summary>Compares two SystemIdentifier objects to see if they identify a the same component.</summary>
            <param name="obj">The SystemIdentifier object to compare.</param>
            <returns>Returns true if the objects identify the same component.  This is determined by the <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type"/> and <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.ValueHash"/> properties.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>Returns the hash code for the current object.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.op_Equality(com.softwarekey.Client.Licensing.SystemIdentifier,com.softwarekey.Client.Licensing.SystemIdentifier)">
            <summary>Compares two SystemIdentifier objects to see if they identify a the same component.</summary>
            <param name="a">The first SystemIdentifier object to compare.</param>
            <param name="b">The second SystemIdentifier object to compare.</param>
            <returns>Returns true if the objects identify the same component.  This is determined by the <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type"/> and <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.ValueHash"/> properties.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.op_Inequality(com.softwarekey.Client.Licensing.SystemIdentifier,com.softwarekey.Client.Licensing.SystemIdentifier)">
            <summary>Compares two SystemIdentifier objects to see if they identify a different component.</summary>
            <param name="a">The first SystemIdentifier object to compare.</param>
            <param name="b">The second SystemIdentifier object to compare.</param>
            <returns>Returns true if the objects do not identify the same component.  This is determined by the <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type"/> and <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.ValueHash"/> properties.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.TryParse(System.String,com.softwarekey.Client.Licensing.SystemIdentifier@)">
            <summary>Parses an XML string representation of a System Identifier.</summary>
            <param name="value">The string to try to parse.</param>
            <param name="identifier">The resulting SystemIdentifier.</param>
            <returns>Returns true if the value was parsed successfully.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">
            <summary>Generates an Activation Data XML document from a specified list of SystemIdentifier objects.</summary>
            <param name="identifiers">A generic list of SystemIdentifier objects.</param>
            <returns>Returns an XmlDocument with the SystemIdentifier data, which may be used for activation requests.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Name">
            <summary>Gets or sets the name of the system identifier.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type">
            <summary>Gets the system identifier's type.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.Value">
            <summary>Gets or sets the plain-text value of the system identifier.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifier.ValueHash">
            <summary>Gets or sets the SHA-512 hash generated from the Value.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The BIOS UUID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object, initialized with the name and value</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object.</param>
            <param name="value">The BIOS UUID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object, initialized with the name, value, and hash</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object.</param>
            <param name="value">The BIOS UUID.</param>
            <param name="hash">Hash of the BIOS UUID.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.BiosUuidIdentifier.Type">
            <summary>Gets this system identifier's type ("BiosUuidIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a motherboard's BIOS UUID.</summary>
            <remarks>
            <note type="caution">
            <para>This algorithm is presently only supported on Windows.  Any attempt to use it on other platforms will cause a
            <see cref="T:System.PlatformNotSupportedException"/> to be thrown.</para>
            </note>
            <note type="caution"><para>The LicenseWindowsRegistryAlias class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm">
            <summary>Abstract class from which all SystemIdentifierAlgorithm implementations are derived.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.m_algorithmId">
            <summary>Static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.#ctor(System.String)">
            <summary>SystemIdentifierAlgorithm constructor allowing a custom algorithm name to be specified.</summary>
            <param name="algorithmId">The name of the algorithm being used (i.e. "NicIdentifier").</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of SystemIdentifier objects for the implemented algorithm.</summary>
            <returns>Returns a generic list of SystemIdentifier objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> objects, which should only ever contain a single entry (or no entries if the BIOS UUID could not be retrieved).</summary>
            <remarks>
            <para>
            The list contains a single <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> object, which contains an identifier
            based on the motherboard BIOS UUID on the computer running the application.
            </para>
            <note type="caution">
            <para>
            Though it is not generally a frequent occurrence, this value will change when a user changes or
            replaces his or her motherboard.
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> objects, which should only ever contain a single entry (or no entries if the BIOS UUID could not be retrieved).</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.BiosUuidIdentifierAlgorithm.GetWindowsWmiIdentifiers">
            <summary>Performs Windows Management Instrumentation (WMI) query to generate a generic list of <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> objects.</summary>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.BiosUuidIdentifier"/> objects.  (This list should only ever contain a single entry.)</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.CustomSystemIdentifier">
            <summary>Class used when parsing custom <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects from a license's authorized identifiers.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.CustomSystemIdentifier.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.CustomSystemIdentifier"/> object.</summary>
            <param name="name">The name of the CustomSystemIdentifier object.</param>
            <param name="value">The custom identifier data.</param>
            <param name="hash">Hash of the custom identifier data.</param>
            <param name="type">The type of <see cref="T:com.softwarekey.Client.Licensing.CustomSystemIdentifier"/> created.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.CustomSystemIdentifier.GenerateIdentifierName(System.String)">
            <summary>Generates a name for the identifier if one is not already provided.</summary>
            <param name="name">The name of the identifier, if already specified.  Providing a null or empty string will result in a new name being generated automatically.</param>
            <returns>Returns the name provided.  If no name is specified, a new name is automatically generated and returned.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.CustomSystemIdentifier.Type">
            <summary>Gets the type of <see cref="T:com.softwarekey.Client.Licensing.CustomSystemIdentifier"/> created.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.DomainNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a user's domain name.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.DomainNameIdentifier.m_domainNameIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifier.#ctor">
            <summary>DefaultCreates a new <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The user's domain name (or the computer name, if not attached to a domain).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the DomainNameIdentifier object.</param>
            <param name="value">The user's domain name (or the computer name, if not attached to a domain).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the DomainNameIdentifier object.</param>
            <param name="value">The user's domain name (or the computer name, if not attached to a domain).</param>
            <param name="hash">Hash of the user's domain name (or the computer name, if not attached to a domain).</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.DomainNameIdentifier.Type">
            <summary>Gets this system identifier's type ("DomainNameIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a system based on the computer's domain.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.DomainNameIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> objects.</summary>
            <remarks>
            <para>
            The list contains a single <see cref="T:com.softwarekey.Client.Licensing.DomainNameIdentifier"/> object, which contains an identifier
            based on the name of the domain the user running the application is authenticated with.
            </para>
            <note type="caution">
            <para>
            Though it is not generally a frequent occurrence, users with administrative
            access to computers can change domain associations and user account names,
            which will change the identifier generated.  If the computer is not associated with a
            domain, then the computer's name is used instead.
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of DomainNameIdentifier objects.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying hard disk volume format serial numbers on fixed disks.</summary>
            <remarks>
            <note type="caution">
            <para>This algorithm is presently only supported on Windows, macOS, and Linux.  Any attempt to use it on other platforms will cause a
            <see cref="T:System.PlatformNotSupportedException"/> to be thrown.</para>
            </note>
            <note type="caution"><para>The HardDiskVolumeSerialIdentifierAlgorithm class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetWindowsDriveSerialNumber(System.String)">
            <summary>Gets the drive format serial number for a given drive letter</summary>
            <param name="driveLetter">The drive letter to get the serial from</param>
            <returns>Returns a string containing the Windows drive format serial for the given drive letter.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetWindowsWmiIdentifiers">
            <summary>Generates a list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> from a WMI query.</summary>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm"/> object.</summary>
            <exception cref="T:System.PlatformNotSupportedException"/>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.#ctor(com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm"/> object, initialized with a specified <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType"/>.</summary>
            <exception cref="T:System.PlatformNotSupportedException"/>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects.</summary>
            <remarks>
            <para>
            The list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects contains an identifier
            for each drive letter not omitted by the <see cref="P:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.Filter"/> property.
            </para>
            <note type="caution">
            <para>
            The volume format serial is generated when a partition is formatted,
            which means you should be mindful of the following possibilities when
            considering use of this algorithm:</para>
            <list type="bullet">
             <item><description>The volume format serial is generated for a given partition.  A fixed drive may contain multiple partitions, so this does not directly identify a physical drive.  Partitions may be duplicated onto other computers via system imaging tools such as Norton Ghost, which may result in this information staying the same, even on dissimilar hardware.</description></item>
             <item><description>Formatting a drive or partition will result in a new volume format serial being generated.</description></item>
             <item><description>If the software is running in a virtual machine guest environment, it may be possible for that environment to be replicated and run in multiple copies.  This would result in this information remaining the same across all copies of a given guest environment.  The <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation"/> class can help detect this kind of environment.</description></item>
            </list>
            </note>
            </remarks>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers(com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType)">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects with the specified filter.  This overrides the value in the <see cref="P:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.Filter"/> poperty (but does not change this property's value).</summary>
            <remarks>
            <para>
            The list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects contains an identifier
            for each drive letter not omitted by the specified filter.  See <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType"/>
            for a list of supported filter types, and notes on the behavior for each.
            </para>
            <note type="caution">
            <para>
            The volume format serial is generated when a partition is formatted,
            which means you should be mindful of the following possibilities when
            considering use of this algorithm:</para>
            <list type="bullet">
             <item><description>The volume format serial is generated for a given partition.  A fixed drive may contain multiple partitions, so this does not directly identify a physical drive.  Partitions may be duplicated onto other computers via system imaging tools such as Norton Ghost, which may result in this information staying the same, even on dissimilar hardware.</description></item>
             <item><description>Formatting a drive or partition will result in a new volume format serial being generated.</description></item>
             <item><description>If the software is running in a virtual machine guest environment, it may be possible for that environment to be replicated and run in multiple copies.  This would result in this information remaining the same across all copies of a given guest environment.  The <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation"/> class can help detect this kind of environment.</description></item>
            </list>
            </note>
            </remarks>
            <param name="filter">The filter used to omit unwanted identifiers.</param>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers(System.String[])">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects. (No additional filtering is applied to specified drives.)</summary>
            <remarks>
            <para>
            The list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects contains an identifier
            for each specified drive letter.
            </para>
            <note type="caution">
            <para>
            The volume format serial is generated when a partition is formatted,
            which means you should be mindful of the following possibilities when
            considering use of this algorithm:</para>
            <list type="bullet">
             <item><description>The volume format serial is generated for a given partition.  A fixed drive may contain multiple partitions, so this does not directly identify a physical drive.  Partitions may be duplicated onto other computers via system imaging tools such as Norton Ghost, which may result in this information staying the same, even on dissimilar hardware.</description></item>
             <item><description>Formatting a drive or partition will result in a new volume format serial being generated.</description></item>
             <item><description>If the software is running in a virtual machine guest environment, it may be possible for that environment to be replicated and run in multiple copies.  This would result in this information remaining the same across all copies of a given guest environment.  The <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation"/> class can help detect this kind of environment.</description></item>
            </list>
            </note>
            </remarks>
            <param name="drives">The array of drives, for each of which a <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> will be generated.</param>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifier(System.String)">
            <summary>Generates a <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> for a specified drive letter.</summary>
            <param name="drive">The drive letter to for which a <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> will be generated.</param>
            <returns>Returns the generated <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">The specified drive may not be null.</exception>
            <exception cref="T:System.ArgumentException">	The first letter of the specified drive is not a letter from 'a' to 'z' (not case sensitive), or the specified drive does not refer to a valid drive.</exception>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.Filter">
            <summary>Gets or sets the <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType">Filter type</see> used when generating the identifiers in the <see cref="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers"/> method.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for identifying/authorizing a system based on License ID.  This is typically only used for volume licensing, and these identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifier.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The computer's fully qualified host name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifier.#ctor(System.String,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the LicenseIDIdentifier object.</param>
            <param name="value">The License ID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifier.#ctor(System.String,System.Int32,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the LicenseIDIdentifier object.</param>
            <param name="value">The License ID.</param>
            <param name="hash">Hash of the License ID.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseIDIdentifier.Type">
            <summary>Returns this system identifier's type ("LicenseIDIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying/authorizing a system based on the License ID.  This is typically only used for volume licensing.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm.ThisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates an empty, generic list of <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> objects.  Use the <see cref="M:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm.GetIdentifier(System.Int32)"/> method to get a list for a specified License ID.</summary>
            <returns>Returns an empty, generic list of <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseIDIdentifierAlgorithm.GetIdentifier(System.Int32)">
            <summary>Generates a generic list with one <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object for the specified License ID.</summary>
            <param name="licenseID">The License ID.</param>
            <returns>Returns a generic list with one <see cref="T:com.softwarekey.Client.Licensing.LicenseIDIdentifier"/> object for the specified License ID.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes">
            <summary>Types of identifiers that may be generated using the <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes.ProcessorName">
            <summary>The processor name.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes.ProcessorVendor">
            <summary>The processor vendor or manufacturer.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes.ProcessorVersion">
            <summary>The processor version, which includes the model and the stepping.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a system based on its processor/CPU.</summary>
                /// <remarks>
            <note type="caution"><para>The ProcessorIdentifierAlgorithm class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.#ctor(com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes[])">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm"/> object.</summary>
            <param name="identifierTypes">The types of identifiers to include when calling <see cref="M:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.GetIdentifiers"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/>, <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/>, and <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> objects (based on the <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes"/> specified in the constructor).</summary>
            <remarks>
            <note type="caution">
            <para>
            Some processors may include the clock speed with the processor name.  You may set <see cref="P:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.ExcludeClockSpeedFromProcessorName"/>
            to prevent this from affecting the resulting <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> objects generated.
            </para>
            </note>
            <para>
            The number of each type of identifier generated typically varies
            </para>
            </remarks>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/>, <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/>, and <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> objects (based on the <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes"/> specified in the constructor).</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.GetWindowsWmiIdentifiers">
            <summary>Performs Windows Management Instrumentation (WMI) query to generate a generic list of <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/>, <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/>, and <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> objects (based on the <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes"/> specified in the constructor).</summary>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/>, <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/>, and <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> objects (based on the <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithmTypes"/> specified in the constructor).</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.ExcludeClockSpeedFromProcessorName">
            <summary>Gets or sets whether or not the clock speed should be omitted when generating <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> objects. IMPORTANT: Setting this to true will require some users to reactivate.</summary>
            <remarks>
            <note type="caution">
            <para>
            Setting this property to true will change the resulting <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> values generated. As a consequence,
            computers which have already been activated and include the clock speed in the processor name will require reactivation. However,
            it may be possible to compensate for this change using <see href="http://www.softwarekey.com/help/plus5/Content/PLUSManaged_Copy_Protection.htm">customized validation and fuzzy matching</see>.
            </para>
            </note>
            <para>
            As with any identifier algorithm that derives its value from hardware information, the processor name comes from the driver provided by the manufacturer.
            In some/many cases (Intel processors in particular), the processor name may include the clock speed.  Some examples of processor name values with and
            without the clock speed included by the driver is below.
            </para>
            <list type="bullet">
                <item>Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz</item>
                <item>AMD FX(tm)-8120 Eight-Core Processor</item>
            </list>
            <note type="implementnotes">
            <para>With virtualization software, it is possible for the clock speed to change when settings change in the hypervisor.</para>
            </note>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.IncludeProcessorNameIdentifiers">
            <summary>Gets whether or not <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> objects should be included when generating the list of identifiers.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.IncludeProcessorVendorIdentifiers">
            <summary>Gets whether or not <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> objects should be included when generating the list of identifiers.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm.IncludeProcessorVersionIdentifiers">
            <summary>Gets whether or not <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> objects should be included when generating the list of identifiers.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a processor's name.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The ProcessorNameIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorNameIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The processor's name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object.</param>
            <param name="value">The processor's name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorNameIdentifier"/> object.</param>
            <param name="value">The processor's name.</param>
            <param name="hash">Hash of the processor's name.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorNameIdentifier.Type">
            <summary>Gets this system identifier's type ("ProcessorNameIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a processor's vendor or manufacturer.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The ProcessorVendorIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The processor's vendor or manufacturer.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object.</param>
            <param name="value">The processor's vendor or manufacturer.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier"/> object.</param>
            <param name="value">The processor's vendor or manufacturer.</param>
            <param name="hash">Hash of the processor's vendor or manufacturer.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorVendorIdentifier.Type">
            <summary>Gets this system identifier's type ("ProcessorVendorIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a processor's version.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.ProcessorIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The ProcessorVersionIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The processor's version.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object.</param>
            <param name="value">The processor's version.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the <see cref="T:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier"/> object.</param>
            <param name="value">The processor's version.</param>
            <param name="hash">Hash of the processor's version.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ProcessorVersionIdentifier.Type">
            <summary>Gets this system identifier's type ("ProcessorVersionIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a computer's fully qualified host name.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The computer's fully qualified host name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the ServerHostNameIdentifier object.</param>
            <param name="value">The computer's fully qualified host name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the ServerHostNameIdentifier object.</param>
            <param name="value">The computer's fully qualified host name.</param>
            <param name="hash">Hash of the computer's fully qualified host name.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ServerHostNameIdentifier.Type">
            <summary>Gets this system identifier's type ("ServerHostNameIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a system based on the computer's fully qualified host name.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm.ThisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ServerHostNameIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of ServerHostNameIdentifier objects.</summary>
            <remarks>
            <para>
            The list contains a single ServerHostNameIdentifier object, which contains an identifier
            based on the fully qualified host name of the computer running the application.
            </para>
            <note type="caution">
            <para>
            Though it is not generally a frequent occurrence, users with administrative access to
            computers can change their name, which will change the identifier generated.
            </para>
            </note>
            <note type="caution">
            <para>
            It is possible for this method to throw an System.Net.Sockets.SocketException if the system's host name
            cannot be resolved. This can be resolved by either adding an entry in the DNS server's zone file for
            the host running your application (if the DNS server used by the host can be managed by the same
            person or company using the host system), or by updating the hosts file
            (C:\Windows\System32\drivers\etc\hosts on Windows or /etc/hosts on Unix) to contain a fixed IP address
            for the system's host name.  If you opt to edit the hosts file, adding the system's host name to an
            existing line could result in that line's first entry being returned for this algorithm.  (For example,
            adding your system's host name to the end of the line for localhost would likely cause the algorithm to
            use localhost as the server host name.)
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of ServerHostNameIdentifier objects.</returns>
            <exception cref="T:System.Net.Sockets.SocketException"/>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.UserNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a user name.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.UserNameIdentifier.m_userNameIdentifierId">
            <summary>The static member for tracking default identifiers generated.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The username of the user running the application when the identifier was created.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the UserNameIdentifier object.</param>
            <param name="value">The username of the user running the application when the identifier was created.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the UserNameIdentifier object.</param>
            <param name="value">The username of the user running the application when the identifier was created.</param>
            <param name="hash">Hash of the username of the user running the application when the identifier was created.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.UserNameIdentifier.Type">
            <summary>Gets this system identifier's type ("UserNameIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a username on a system.
             <para><note type="caution"><para>The value of this identifier may be different when the Protection PLUS 5 SDK is used from an installer application than the value obtained when used from an installed application. It is not guaranteed the installer will run under the same user account as the installed application.  If using Protection PLUS 5 SDK from an installer and this identifier is required, it is recommended to use <see href="https://www.softwarekey.com/help/plus5/#PLUSNative_Copy_Protection.htm" target="_blank">Fuzzy-Matching</see> in order to account for a possible difference between the value obtained under the installer and the value obtained from the installed application .</para></note></para>
            </summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.UserNameIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of UserNameIdentifier objects.</summary>
            <returns>Returns a generic list of UserNameIdentifier objects, which will always contain only 1 object (representing the current user logged into the system, running the application).</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseAliasValidation">
            <summary>Validates the aliases for a <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/>.</summary>
            <remarks>
            <para>See the <see cref="M:com.softwarekey.Client.Licensing.LicenseAliasValidation.#ctor(com.softwarekey.Client.Licensing.WritableLicense)">constructor</see> for implementation details.</para>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemValidation">
            <summary>Base class from which for all system validations are implemented.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemValidation.m_LastError">
            <summary>The last error that occurred within this SystemValidation object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemValidation.Validate">
            <summary>Performs the system validation.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemValidation.LastError">
            <summary>Gets or sets the last error encountered in this object.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseAliasValidation.REQUIRE_ALL_ALIASES">
            <summary>This constant value may be used when setting the <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.NumberOfValidAliasesRequired"/> property to require all aliases to pass validation.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAliasValidation.#ctor(com.softwarekey.Client.Licensing.WritableLicense)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseAliasValidation"/> object for validating aliases for a <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/>.</summary>
            <param name="license">The <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> which needs to have its aliases validated.</param>
            <remarks>
            <note type="caution">By default, <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.OverwriteOlder"/> option is set to true.  When this is enabled, any aliases that is newer than the license file and the rest of the aliases will be used to overwrite the license file and the other aliases.</note>
            <note type="caution">When <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.OverwriteOlder"/> is set to true, a valid, absolute path to your application's license file must be specified in the <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.LicenseFilePath"/> property.  If <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.LicenseFilePath"/> is not set properly, the <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> object will load the latest alias, but will not automatically save it to the file system.</note>
            <note type="caution">By default, all aliases configured for your <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> implementation will be required to pass validation, and at least one aliases must be configured.  See the <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.NumberOfValidAliasesRequired"/> property for additional information.</note>
            <para>After initializing your <see cref="T:com.softwarekey.Client.Licensing.LicenseAliasValidation"/> object and its properties, call the <see cref="M:com.softwarekey.Client.Licensing.LicenseAliasValidation.Validate"/> method to validate the aliases configured in the <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> (these are configured via the <see cref="M:com.softwarekey.Client.Licensing.WritableLicense.AddAlias(com.softwarekey.Client.Licensing.LicenseAlias)"/> method.</para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAliasValidation.Validate">
            <summary>Implements standard <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> validation.</summary>
            <returns>Returns true if validation is successful, which would indicate the license aliases passed validation.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseAliasValidation.CheckAliases(System.Int32@,System.Int32@)">
            <summary>Checks all License File aliases</summary>
            <param name="numToValidate">The number of aliases to validate</param>
            <param name="numValid">The number of valid aliases (which passed the checks)</param>
            <returns>Returns true if all aliases passed validation.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError">LastError</see> property and the numToValidate and numValid arguments for details.  Please note that each alias has its own <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property, which may also contain additional details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.OverwriteOlder">
            <summary>Gets or sets whether or not the license file and other aliases should be overwritten if an alias appears to be newer (true by default).</summary>
            <note type="caution">When this property is set to true, a valid, absolute path to your application's license file must be specified in the <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.LicenseFilePath"/> property.  If <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.LicenseFilePath"/> is not set properly, the <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> object will load the latest alias, but will not automatically save it to the file system.</note>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.LicenseFilePath">
            <summary>Gets or sets the absolute path to the writable license file.</summary>
            <note type="caution">When <see cref="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.OverwriteOlder"/> is set to true, a valid, absolute path to your application's license file must be specified in this property.  If this is not set properly, the <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> object will load the latest alias, but will not automatically save it to the file system.</note>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.NumberOfValidAliasesRequired">
            <summary>Gets or sets the number of valid aliases required for validation to pass (<see cref="F:com.softwarekey.Client.Licensing.LicenseAliasValidation.REQUIRE_ALL_ALIASES"/> by default).</summary>
            <remarks>
            <para>
            Using a value of <see cref="F:com.softwarekey.Client.Licensing.LicenseAliasValidation.REQUIRE_ALL_ALIASES"/> to require all configured aliases to pass validation is recommended.  This value
            implicitly requires at least one alias to pass validation (meaning validation will fail when no aliases are configured and <see cref="F:com.softwarekey.Client.Licensing.LicenseAliasValidation.REQUIRE_ALL_ALIASES"/>
            is used).
            </para>
            <para>You may set this property to 0 (zero) to not require any aliases to pass validation, though this is not recommended.</para>
            <para>
            Alternatively, you may set this property's value to a minimum number of aliases that must pass validation.  So for example, if you have configured 5 aliases
            for your license, you can set this property to 3 to require at least 3 out of the 5 to pass validation.  An example of where this can be useful is in a
            scenario where you have 2 aliases stored in user-specific locations, and the other 3 in global locations.  The two user-specific locations should not
            encounter any issues, whereas the global locations might.  So setting the value to 3 essentially makes it so that in the worst-case scenario with permissions,
            the two user-aliases will pass validation, and you are implicitly requiring at least 1 global alias to pass validation.
            </para>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseAliasValidation.WriteMissingAliases">
            <summary>Gets or sets whether or not missing aliases should be written while being checked.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseEffectiveDateValidation">
            <summary>Validates a time-limited license to verify it is within the effective date/time period.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseEffectiveDateValidation.#ctor(com.softwarekey.Client.Licensing.License)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseEffectiveDateValidation"/> object.</summary>
            <param name="license">The <see cref="T:com.softwarekey.Client.Licensing.License"/> to validate.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseEffectiveDateValidation.Validate">
            <summary>Validates the license's effective dates.</summary>
            <returns>Returns true if the time-limited license is within the effective date/time period.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseProductValidation">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemValidation"/> implementation for validating the Product ID and Product Option ID in the license file.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.#ctor(com.softwarekey.Client.Licensing.License,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductValidation"/> object that may be used to verify a license's Product ID.</summary>
            <param name="license">The license which will be validated.</param>
            <param name="validProductID">A valid Product ID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.#ctor(com.softwarekey.Client.Licensing.License,System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductValidation"/> object that may be used to verify a license's Product ID and Product Option ID.</summary>
            <param name="license">The license which will be validated.</param>
            <param name="validProductID">A valid Product ID.</param>
            <param name="validProductOptionID">A valid Product Option ID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.#ctor(com.softwarekey.Client.Licensing.License,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductValidation"/> object that may be used to verify a license's Product ID.</summary>
            <param name="license">The license which will be validated.</param>
            <param name="validProductIDs">A collection of valid Product IDs.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.#ctor(com.softwarekey.Client.Licensing.License,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductValidation"/> object that may be used to verify a license's Product ID and Product Option ID.</summary>
            <param name="license">The license which will be validated.</param>
            <param name="validProductID">A valid Product ID.</param>
            <param name="validProductOptionIDs">A collection of valid Product IDs.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.#ctor(com.softwarekey.Client.Licensing.License,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseProductValidation"/> object that may be used to verify a license's Product ID and Product Option ID.</summary>
            <param name="license">The license which will be validated.</param>
            <param name="validProductIDs">A collection of valid Product IDs.</param>
            <param name="validProductOptionIDs">A collection of valid Product IDs.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseProductValidation.Validate">
            <summary>Validates the Product ID and Product Option ID authorized in the license file.</summary>
            <returns>Returns true if the Product ID and Product Option ID is valid.  If false is returned, examine the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.RemoteSessionValidation">
            <summary>Attempts to determine whether or not the application is running in a known type of remote session.  See the <see cref="T:com.softwarekey.Client.Licensing.RemoteSessionValidation.RemoteSessionTypes"/> enumeration for a list of supported session types.</summary>
            <remarks>Presently, this class only detects if an application is running in a Terminal Services/Remote Desktop session.
            <note type="caution"><para>The RemoteSessionValidation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.RemoteSessionValidation.Validate">
            <summary>Determines if the protected application is running in a remote session via something like Terminal Services/Remote Desktop.</summary>
            <returns>Returns true if the application is not running in a remote session. If a remote session was detected (or false is returned), check the <see cref="P:com.softwarekey.Client.Licensing.RemoteSessionValidation.Type"/> property to find which type of remote session was detected.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.RemoteSessionValidation.IsRemoteSession">
            <summary>Gets whether the protected application is running in a remote session.  (This property should only be referenced after calling the <see cref="M:com.softwarekey.Client.Licensing.RemoteSessionValidation.Validate"/> method once.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.RemoteSessionValidation.Type">
            <summary>Gets the type of remote session on which the protected application is running.  (This property should only be referenced after calling the <see cref="M:com.softwarekey.Client.Licensing.RemoteSessionValidation.Validate"/> method once.)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.RemoteSessionValidation.RemoteSessionTypes">
            <summary>Enumeration for types of remote sessions.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.RemoteSessionValidation.RemoteSessionTypes.None">
            <summary>None</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.RemoteSessionValidation.RemoteSessionTypes.TerminalServices">
            <summary>Terminal Services / Remote Desktop</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemClockValidation">
            <summary>Validates the system's clock to help ensure it is not being tampered with actively.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemClockValidation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemClockValidation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemClockValidation.Validate">
            <summary>Validates the system clock to ensure it is not being tampered with actively.</summary>
            <returns>
            Returns true if the system clock is valid.  Otherwise, if false is returned,
            the system clock is likely being tampered with actively, and error information is
            available in the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property.
            </returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemClockValidation.TestDuration">
            <summary>Gets or sets the amount of time (in milliseconds) to allow for the test to complete.  The default is 100 milliseconds.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemClockValidation.ThresholdPercent">
            <summary>Gets or sets the percentage of the test duration time which must pass for the validation to succeed. The value specified must be between 1 and 100.  The default value is 75.</summary>
            <remarks>
            <note type="caution">
            <para>Setting this value to anything above 90 is risky, as the actual amount of time passed while waiting will likely vary depending on the operating system and the processor.</para>
            </note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLog">
            <summary>Manages and uploads a log for a metered application.</summary>
            <remarks>
            <note type="caution"><para>The MeteringLog class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLog"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLog"/> object using a specified log file path.</summary>
            <param name="logFilePath">The absolute path to the log file.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Initialize">
            <summary>Initializes our log document object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.AddEntry(com.softwarekey.Client.Metering.MeteringLogEntry)">
            <summary>Adds a new log entry to the XML lo.g</summary>
            <param name="logEntry">The MeteringLogEntry object to add to the log.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Save">
            <summary>Saves the log (and all of its entries) to disk.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UpdateEntryTimestamp(System.String,com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent)">
            <summary>Updates a log entry's timestamp in the log file and saves changes to disk.</summary>
            <param name="sessionId">The Session ID of the log entry to update.</param>
            <param name="logEvent">The type of event (usually <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent">MeteringLogEntry.MeteringLogEntryEvent.end</see>) for which the timestamp will be updated.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UpdateEntryTimestamp(System.String,System.String)">
            <summary>Updates a log entry's timestamp in the log file and saves changes to disk.</summary>
            <param name="sessionId">The Session ID of the log entry to update.</param>
            <param name="logEvent">The type of event (usually <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent">MeteringLogEntry.MeteringLogEntryEvent.end</see>) for which the timestamp will be updated.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.Delete">
            <summary>Clears out the current log, and deletes the log file from disk.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.GetDefaultLogPath">
            <summary>Determines the default log file path to use based on the assembly's location on disk.</summary>
            <returns>Returns the default, absolute log file path.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UploadLog(com.softwarekey.Client.Metering.MeteringLog,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String)">
            <summary>Uploads a log file to SOLO Server.</summary>
            <param name="log">The MeteringLog object which contains the contents to upload.</param>
            <param name="encryptionKey">The AuthorEncryptionKey object required to post the content to SOLO Server.</param>
            <param name="installationId">The Installation ID with which the log is associated in SOLO Server.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLog.UploadLog(com.softwarekey.Client.Metering.MeteringLog,com.softwarekey.Client.Utils.AuthorEncryptionKey,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String)">
            <summary>Uploads a log file to SOLO Server.</summary>
            <param name="log">The MeteringLog object which contains the contents to upload.</param>
            <param name="encryptionKey">The AuthorEncryptionKey object required to post the content to SOLO Server.</param>
            <param name="client">
            <para>The XmlActivationService which will be used to call the SOLO Server web service.</para>
            <para>This can be configured for accessing an SOLO Server Dedicated URL, or a self-hosted instance of SOLO Server.
            This may also be used for setting additional connection information, such as information needed to access the web service through a proxy server.</para>
            </param>
            <param name="installationId">The Installation ID with which the log is associated in SOLO Server.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLog.LogFilePath">
            <summary>Gets the absolute path of the log file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLog.LogDocument">
            <summary>Gets an XmlDocument containing the log data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLogEntry">
            <summary>Represents a log entry for a metered application.  This is used with the <see cref="T:com.softwarekey.Client.Metering.MeteringLog"/> class, which is what manages the collection of these entries.</summary>
            <remarks>
            <note type="caution"><para>The MeteringLogEntry class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
            <param name="e">The event being logged.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
            <param name="e">The event being logged.</param>
            <param name="eventData">Data to include with the logged event.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
            <param name="applicationName">The name of the application being metered.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
            <param name="e">The event being logged.</param>
            <param name="eventData">Data to include with the logged event.</param>
            <param name="applicationName">The name of the application being metered.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.#ctor(System.Xml.XmlNode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Metering.MeteringLogEntry"/> object.</summary>
            <param name="xml">An XmlNode containing the log entry's data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.ToXml">
            <summary>Generates an XmlDocument with this MeteringLogEntry object's data.</summary>
            <returns>Returns an XmlDocument with this MeteringLogEntry object's data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Metering.MeteringLogEntry.Initialize(com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent,System.String,System.String)">
            <summary>Initializes a MeteringLogEntry (called by constructors)</summary>
            <param name="e">The event being logged.</param>
            <param name="eData">Data to include with the logged event.</param>
            <param name="appName">The name of the application being metered.</param>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EnteredDate">
            <summary>Gets or sets the date and time the Session ID was created.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.LogSessionID">
            <summary>Gets or sets the event's Session ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.Event">
            <summary>Gets or sets the event that occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EventString">
            <summary>Gets or sets the event type.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.EventData">
            <summary>Gets or sets any data associated with the event.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.NetBIOSName">
            <summary>Gets or sets the NetBIOS name of the system running the metered application.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.DNSName">
            <summary>Gets or sets the DNS hostname of the system running the metered application.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.UserName">
            <summary>Gets or sets the username of the user running the metered application.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Metering.MeteringLogEntry.ApplicationName">
            <summary>Gets or sets the name of the application being metered.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent">
            <summary>Metering log events types.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.start">
            <summary>Application started</summary>
        </member>
        <member name="F:com.softwarekey.Client.Metering.MeteringLogEntry.MeteringLogEntryEvent.end">
            <summary>Application terminated</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs">
            <summary>Contains data regarding progress made while searching for/through semaphore files.</summary>
            <remarks>
            This is used in the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgressEventHandler"/> delegate,
            which you may use to handle progress updates (i.e. for showing a progress bar in your application)
            via the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress"/> event.
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs.#ctor(System.Int32)">
            <summary>Default SearchProgressEventArgs constructor</summary>
            <param name="progressPercentage">The percent of search progress which has been completed.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs.ProgressPercentage">
            <summary>Percent of search progress which has been completed.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs">
            <summary>Contains data regarding progress made after completing a through semaphore files.</summary>
            <remarks>
            This is used in the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompletedEventHandler"/> delegate,
            which you may use to handle progress updates (i.e. for showing a progress bar in your application)
            via the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted"/> event.
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs.#ctor(System.Boolean)">
            <summary>Default SearchCompleteEventArgs constructor</summary>
            <param name="seatOpened">Whether or not the search was able to find an open network seat.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs.SeatOpened">
            <summary>Whether or not the search was able to find an open network seat.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore">
            <summary>Keeps track of concurrent users of an application on a network by using semaphore files in a shared network location.</summary>
            <remarks>
            <para>
            A Network Semaphore File is a file, which contains no useful data, stored on a common network directory used to assist in enforcing a Network Floating License in an application.
            One file is created and locked exclusively for each active workstation or instance of your protected application.  Other LAN users attempting to run the application will not be
            able to use any semaphore files that are locked, which is how this can enforce license compliance which limits the number of network "seats."
            </para>
            <note type="caution"><para>Any users who will use an application using this type of licensing will need access to read, write, modify, and delete the semaphore files.</para></note>
            <note type="caution">
            <para>This functionality is supported on environments where semaphore files are hosted on a Windows (SMB/CIFS) share, which functions best on
            a Local Area Network (LAN).  While this may be used in a Wide Area Network (WAN) environment (which includes scenarios where a user access
            a given "LAN" over a Virtual Private Network [VPN] connection), it is strongly advised testing is done before deploying to any given WAN
            environment.  This is because the performance of this feature is centered around that of the Windows (SMB/CIFS) shares being used to host
            the semaphore files (and WAN/VPN environments can see much slower performance than a typical LAN configuration).</para>
            </note>
            <note type="caution"><para>The NetworkSemaphore class is only supported when the system hosting the Windows (SMB/CIFS) share which houses the semaphore files,
            and the clients which access the share, all run Windows Vista/Windows Server 2008 or later.</para></note>
            <note type="caution"><para>The NetworkSemaphore class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            <note type="implementnotes">
            <para>The computer hosting the Windows (SMB/CIFS) share (the server) which houses the semaphore files is ultimately responsible for handling
            when a file is unlocked.  In most cases, applications which are terminated gracefully will unlock and delete their semaphore files.
            If the application crashes, however, the server will eventually unlock the semaphore file, but it will not delete the file.  Having
            many of these files present can lead to some performance degradation, as each of these orphaned files can take a while to try to lock
            or delete.  For this reason, the NetworkSemaphore constructor has a "runCleanupThread" argument, which may be set to true to have
            active processes try to delete orphaned files quietly, in the background.  Of course, this will increase the amount of bandwidth used,
            but can help increase performance keeping the share location clear of any orphaned files.</para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.OnSearchProgress(com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs)">
            <summary>Called when progress is made in searching for an unused seat/semaphore file.</summary>
            <param name="e">Event arguments/data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.OnSearchCompleted(com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs)">
            <summary>Called when the search for an unused seat/semaphore file has been completed.</summary>
            <param name="e">Event arguments/data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.OnInvalid(System.EventArgs)">
            <summary>Called when the network session is no longer valid.</summary>
            <param name="e">Event arguments/data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore"/> object.</summary>
            <param name="semaphoreDirectory">The absolute path to a network share where all applicable workstations and/or users have read, write, modify, and delete access.</param>
            <param name="semaphorePrefix">The prefix to use for the names of the semaphore files.</param>
            <param name="seatsTotal">The maximum number of allowed, concurrent users.</param>
            <param name="runValidationThread">Whether or not to run the validation thread once a network session is established.</param>
            <param name="validationThreadInterval">How frequently, in seconds, the validation thread should check that the network session is still valid.</param>
            <param name="runCleanupThread">Whether or not to run a semaphore cleanup thread (which deletes orphaned semaphores to improve performance) once a network session is established.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Open">
            <summary>Opens a network semaphore file.</summary>
            <returns>Returns true if the network semaphore file was opened and locked successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Close">
            <summary>Closes an open network semaphore file.</summary>
            <returns>Returns true if the network semaphore file was closed successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Search">
            <summary>Performs an asynchronous search for an unused network semaphore file. Requires handling the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted"/> and optionally the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress"/> events.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.CancelSearch">
            <summary>Cancels the search in progress.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.CreateSemaphore(System.IO.FileInfo[])">
            <summary>Creates the semaphore file.</summary>
            <param name="files">An array of files to check.</param>
            <returns>Returns true if successful.  Otherwise, false is returned, and the error is stored in the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.LastError"/> property.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.ValidationThread(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>Validates the semaphore file.</summary>
            <param name="sender">The object that called this method.</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.ValidationThread_OnInvalid(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>Called when the semaphore is found to be invalid, this fires the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Invalid"/> event.</summary>
            <param name="sender">The object that called this method.</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchThread(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>Performs the search for an unused seat/semaphore, and fires the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress"/> and <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted"/> events as appropriate.</summary>
            <param name="sender">The object that called this method.</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchThread_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>Fires the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress"/> event handler.</summary>
            <param name="sender">The object that called this method.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchThread_Completed(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>Fires the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted"/> event handler.</summary>
            <param name="sender">The object that called this method.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress">
            <summary>Occurs when progress is made in searching for an unused seat/semaphore file.  The SearchProgress event may be used by your application to keep a user informed of the progress being made while searching through semaphore files.</summary>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted">
            <summary>Occurs when the search for an unused seat/semaphore file has been completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.Invalid">
            <summary>Occurs when the network session is no longer valid.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.CleanupThreadInterval">
            <summary>Gets or sets how frequently, in seconds, the cleanup thread tries to delete each semaphore file. The default is 10 seconds.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.ValidationThreadInterval">
            <summary>Gets or sets how frequently, in seconds, the validation thread checks that the network session is still valid.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsTotal">
            <summary>Gets or sets the number of allowed concurrent users.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphorePath">
            <summary>Gets or sets the absolute path of the directory used to house the semaphore files.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphorePrefix">
            <summary>Gets or sets the prefix used when creating semaphore files.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.IsValid">
            <summary>Gets whether or not the network session is still valid.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.LastError">
            <summary>Gets the last error that occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsActive">
            <summary>Gets the number of concurrent users.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SeatsAvailable">
            <summary>Gets the number of remaining seats available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SemaphoreName">
            <summary>Gets the name of the open semaphore file. Returns an empty string if no semaphore file is open.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgressEventHandler">
            <summary>Delegate used for defining a handler method for the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchProgress"/> event.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments/data.  <see cref="P:com.softwarekey.Client.Licensing.Network.SearchProgressEventArgs.ProgressPercentage"/> property indicates the current search progress.</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompletedEventHandler">
            <summary>Delegate used for defining a handler method for the <see cref="E:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.SearchCompleted"/> event.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments/data.  <see cref="P:com.softwarekey.Client.Licensing.Network.SearchCompletedEventArgs.SeatOpened"/> property indicates whether or not an available seat could be found and opened.</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.InvalidEventHandler">
            <summary>Delegate used for defining a handler method for the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSemaphore.InvalidEventHandler"/> event.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments/data.</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSession">
            <summary>Implements support for Network Floating licensing / concurrency limit enforcement via SOLO Server.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.Boolean,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm},System.String,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> object for loading a new or existing network session.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="useEncryption">Whether or not to use encryption (set to true if unsure).</param>
            <param name="useSignatures">Whether or not to use signatures (set to true if unsure).</param>
            <param name="identifierAlgorithms">A list of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> objects to use to bind the session to the current system.</param>
            <param name="certificatePath">The absolute path to the certificate file.</param>
            <param name="loadCertificateFromFile">Whether or not the session should be initialized from an existing certificate file.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.OpenSession(System.Int32,System.String)">
            <summary>Opens a Network Floating Session.</summary>
            <param name="licenseId">The License ID issued from SOLO Server.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.OpenSession(System.Int32,System.String,com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Opens a Network Floating Session.</summary>
            <param name="licenseId">The License ID issued from SOLO Server.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.OpenSession(System.Int32,System.String,System.String,com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Opens a Network Floating Session.</summary>
            <param name="licenseId">The License ID issued from SOLO Server.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="computerName">The Computer Name identifier displayed in SOLO Server for this session.</param>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.PollSession">
            <summary>Polls SOLO Server to validate and maintain the status of the Network Floating Session.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.PollSession(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Polls SOLO Server to validate and maintain the status of the Network Floating Session.</summary>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CloseSession">
            <summary>Closes a Network Floating Session.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CloseSession(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Closes a Network Floating Session.</summary>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckoutSession(System.Decimal)">
            <summary>Requests a session check-out for a given duration of time to enable offline use.</summary>
            <param name="requestedCheckoutDuration">The amount of time (in hours) we would like the requested checkout to last.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckoutSession(System.Decimal,com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Requests a session check-out for a given duration of time to enable offline use.</summary>
            <param name="requestedCheckoutDuration">The amount of time (in hours) we would like the requested checkout to last.</param>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckinSession">
            <summary>Checks a Network Floating session back in.</summary>
            <returns>Returns true if successful or if the network session is not checked out.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckinSession(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService)">
            <summary>Checks a Network Floating session back in.</summary>
            <param name="client">The XmlNetworkFloatingService object to make the web service method call.</param>
            <returns>Returns true if successful or if the network session is not checked out.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.InitializeCurrentIdentifiers">
            <summary>Initializes the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CurrentIdentifiers"/> property with data using the algorithms specified in the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.IdentifierAlgorithms"/> property.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.ClearSession">
            <summary>Abandons the current session, clears the current session data, unlocks the certificate, deletes the certificate file if present.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.LockCertificate">
            <summary>Locks the certificate file to the process.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.UnlockCertificate">
            <summary>Unlocks the certificate file.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.DeleteCertificate">
            <summary>Unlocks and deletes the certificate file.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSession.DoSessionWebServiceCall(com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall)">
            <summary>Processes an <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService"/> web service call.</summary>
            <param name="ws">The <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> to process.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError"/> property.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.AlwaysSaveCertificate">
            <summary>Gets or sets whether the certificate should always be saved to a file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.Certificate">
            <summary>Gets the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate"/> object containing the data from the certificate issued by SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CertificatePath">
            <summary>Gets the absolute path to the certificate file used when restoring a checked-out session.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CertificateLock">
            <summary>Gets the <see cref="T:com.softwarekey.Client.Utils.FileLock"/> object used for locking the certificate file to the process.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.LastError">
            <summary>Gets the last error that occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.IdentifierAlgorithms">
            <summary>Gets the list of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> objects to use to bind the certificate to the system.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CurrentIdentifiers">
            <summary>Gets the list of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects used to identify the current system.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType">
            <summary>Enumeration for passing along the type of request we're working with internally</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Open">
            <summary>Open session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Poll">
            <summary>Poll session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Close">
            <summary>Close session request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Checkout">
            <summary>Check-out request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSession.NetworkSessionRequestType.Checkin">
            <summary>Check-in request</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate">
            <summary>Represents a certificate issued by SOLO Server for an authorized network session.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate"/> object initialized with data from an XML document.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="certificate">The XmlDocument object containing the certificate.</param>
            <param name="useEncryption">Whether or not to use encryption (set to true if unsure).</param>
            <param name="useSignatures"> Whether or not to use signatures (set to true if unsure).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.String,System.Boolean,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate"/> object initialized with data from an XML document on the file system.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="certificatePath">The absolute path to the certificate XML file.</param>
            <param name="useEncryption">Whether or not to use encryption (set to true if unsure).</param>
            <param name="useSignatures">Whether or not to use signatures (set to true if unsure).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.Initialize(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Xml.XmlDocument,System.Boolean,System.Boolean)">
            <summary>Initializes the Network Session Certificate from an XmlDocument</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="certificate">The certificate XmlDocument.</param>
            <param name="useEncryption">Whether or not to use encryption (set to true if unsure).</param>
            <param name="useSignatures">Whether or not to use signatures (set to true if unsure).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.Save(System.String)">
            <summary>Saves the NetworkSessionCertificate to a file.</summary>
            <param name="certificatePath">The absolute path specifying were to save the certificate file.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.SessionID">
            <summary>Gets the Network Session ID issued from SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ComputerName">
            <summary>Gets the name of the computer authorized for the Network Session.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LastPollDate">
            <summary>Gets the last time this machine phoned home/polled against SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AllocatedDate">
            <summary>Gets the date and time in which the Network Session was allocated/authorized.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AllocatedUntilDate">
            <summary>Gets the date and time in which the Network Session is no longer authorized - this is typically extended with Poll request or a Checkout request.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.TotalSeats">
            <summary>Gets the total number of Network Sessions allowed.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.SeatsAvailable">
            <summary>Gets the number of allowed Network Sessions not yet allocated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckedOut">
            <summary>Gets whether or not this Network Session has been checked out.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollFrequency">
            <summary>Gets the amount of time (in seconds) that should pass before the application attempts to poll against SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollRetryCount">
            <summary>Gets the number of times to retry polling against SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.PollRetryFrequency">
            <summary>Gets the amount of time (in seconds) to wait between each retry for polling against SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CustomerID">
            <summary>Gets the Customer ID in SOLO Server to which the License ID belongs.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LicenseID">
            <summary>Gets the SOLO Server License ID to which the this Session ID belongs.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ProductID">
            <summary>Gets the Product ID in SOLO Server to which the Product Option ID belongs.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.ProductOptionID">
            <summary>Gets the Product Option ID in SOLO Server with which the License ID was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckoutDurationMinimum">
            <summary>Gets the minimum amount of time (in hours) a checkout request allows.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckoutDurationMaximum">
            <summary>Gets the maximum amount of time (in hours) a checkout request allows.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.LastError">
            <summary>Gets the last error that occurred while trying to initialize the certificate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CertificatePath">
            <summary>Gets the path to the certificate file.  (Only applicable if <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CheckedOut"/> is true.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.CertificateXml">
            <summary>Gets the XmlDocument object containing the certificate.  If encryption is being used, this document is encrypted.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate.AuthorizedIdentifiers">
            <summary>Gets the of authorized <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation">
            <summary>Validates a <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/>.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation"/> object that can be used to validate a given network session's data, including time checks when possible, and requiring an exact match of System Identifier information.</summary>
            <param name="session">The <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> object to validate.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession,com.softwarekey.Client.Licensing.SystemIdentifierValidation,com.softwarekey.Client.Licensing.SystemDateTimeValidation)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation"/> object that can be used to validate a given network session's data, with specified validation objects.</summary>
            <param name="session">The <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> object to validate.</param>
            <param name="identifierValidator">The <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierValidation"/> object used to validate the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSession.CurrentIdentifiers"/>.</param>
            <param name="dateTimeValidator">The <see cref="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation"/> object used to validate the system's date and time via SNTP.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.#ctor(com.softwarekey.Client.Licensing.Network.NetworkSession,System.Boolean,System.Int32,System.Boolean,com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation"/> object that can be used to validate a given network session's data.</summary>
            <param name="session">The <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> object to validate.</param>
            <param name="useSystemIdentifierValidation">Set to true to bind network session certificates to the machines which request the sessions.  (If you are unsure, set this to true.)</param>
            <param name="matchingIdentifiersRequired">The minimum number of matching identifiers required.  (If you are unsure, set this to <see cref="F:com.softwarekey.Client.Licensing.SystemIdentifierValidation.REQUIRE_EXACT_MATCH">SystemIdentifierValidation.REQUIRE_EXACT_MATCH</see>.)</param>
            <param name="useCertificatePathValidation">Whether or not the certificate path should be validated (set to true if unsure).</param>
            <param name="ntpValidationType">The type of NTP validation to use (if unsure, set to <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType">NetworkSessionTimeValidationType.WhenAvailable</see>).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.InitializeDefaultDateTimeValidator(System.Boolean)">
            <summary>Initializes the default SystemDateTimeValidation object</summary>
            <param name="validationRequired">Set to true if NTP validation (and Internet connectivity) is required, or false to allow NTP validation to fail when there are connectivity issues.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.Validate">
            <summary>Validates the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/>.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.UseCertificatePathValidation">
            <summary>Gets or sets whether or not the certificate file's path is validated when the session is checked out.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.Session">
            <summary>Gets or sets the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> object which is to be validated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemIdentifierValidator">
            <summary>Gets or sets the <see cref="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemIdentifierValidator"/> object which is to perform the validation of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects (null if no SystemIdentifier validation is to be done).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemDateTimeValidator">
            <summary>Gets or sets the <see cref="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation"/> object which is to perform the validation of system's date and time (null if no date and time validation is to be done).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.SystemDateTimeThresholdMinutes">
            <summary>Gets or sets the allowed amount of difference in time (in minutes) between the licensed system's time and SOLO Server's time.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType">
            <summary>The requirement type for system date/time validation.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.None">
            <summary>No date/time validation is done</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.WhenAvailable">
            <summary>Validation is only done when servers can be reached</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.Network.NetworkSessionValidation.NetworkSessionTimeValidationType.AlwaysRequired">
            <summary>Validation is always required -- validation will fail if servers are not reached</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a network path.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The NetworkNameIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NetworkNameIdentifier.m_netNameIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier"/> object, initialized with the value</summary>
            <param name="value">The absolute path to a network location.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier"/> object, initialized with the name and value</summary>
            <param name="name">The name of the NetworkNameIdentifier object.</param>
            <param name="value">The absolute path to a network location.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifier"/> object, initialized with the name, value, and hash</summary>
            <param name="name">The name of the NetworkNameIdentifier object.</param>
            <param name="value">The absolute path to a network location.</param>
            <param name="hash">Hash of the absolute path to a network location.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.NetworkNameIdentifier.Type">
            <summary>Gets the system identifier's type (NetworkNameIdentifier).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a computer name.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ComputerNameIdentifier.m_computerNameIdentifierId">
            <summary>The static member for tracking default identifiers generated.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The computer's name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the ComputerNameIdentifier object.</param>
            <param name="value">The computer's name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> object, initialized with the name, value, and hash</summary>
            <param name="name">The name of the ComputerNameIdentifier object.</param>
            <param name="value">The computer's name.</param>
            <param name="hash">Hash of the computer's name.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.ComputerNameIdentifier.Type">
            <summary>Gets this system identifier's type ("ComputerNameIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a system based on the computer's name.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> objects.</summary>
            <remarks>
            <para>
            The list contains a single <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> object, which contains an identifier
            based on the name of the computer running the application.  The computer's name is obtained from the
            <see cref="P:System.Environment.MachineName">System.Environment.MachineName</see> property.
            </para>
            <note type="caution">
            <para>
            Though it is not generally a frequent occurrence, users with administrative access to computers
            can change its name, which will change the identifier generated.
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifier"/> objects.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseFileSystemAlias">
            <summary>Enables creation and management of License File aliases located in the file-system.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.#ctor(System.String,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean)">
            <summary>Constructor for managing a License File alias located on the file-system.</summary>
            <param name="location">The absolute path to the alias file.</param>
            <param name="encryptionKey">The client encryption key CSP blob.</param>
            <param name="useEncryption">Set to true to use encrypted alias files.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.CheckAlias">
            <summary>Compares the current license to the alias.</summary>
            <returns>Returns true if the alias is found to be valid.  If it is not valid, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.DeleteAlias">
            <summary>Deletes the current alias file.</summary>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseFileSystemAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the most current license file data.</summary>
            <remarks>
            <note type="caution">
            <para>
            This method uses the <see cref="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)"/> to try to give all users full control of the alias file.  This helps
            avoid problems with the UAC in Windows, and helps avoid problems that can often be encountered when your application stores alias files
            in a location that is shared by all users.
            </para>
            </note>
            </remarks>
            <param name="license">The license contents to write to the alias.</param>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias">
            <summary>Enables creation and management of License File aliases located in the Windows registry.</summary>
            <remarks>
            <note type="caution"><para>The LicenseWindowsRegistryAlias class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.#ctor(System.String,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias"/> object, which may be used for managing a license file alias located in the Windows registry.</summary>
            <remarks>
            <para>
            Assumes HKEY_LOCAL_MACHINE (<see cref="T:Microsoft.Win32.RegistryHive">RegistryHive.LocalMachine</see>) is the root/hive to which the path is relative.
            </para>
            </remarks>
            <param name="location">The full registry key path.</param>
            <param name="encryptionKey">The client encryption key.</param>
            <param name="useEncryption">Set to true to use encrypted alias files.</param>
            <param name="value">The name of the registry value (e.g. "Version").</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.#ctor(System.String,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,Microsoft.Win32.RegistryHive,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias"/> object, which may be used for managing a license file alias located in the Windows registry in a specified root key/hive.</summary>
            <remarks>
            <note type="caution">
            <para>
            The only root registry key/hive locations supported include HKEY_LOCAL_MACHINE, HKEY_CURRENT_USER, and HKEY_CLASSES_ROOT.
            Consequently, the only values supported from the <see cref="T:Microsoft.Win32.RegistryHive"/> enumeration
            include LocalMachine, CurrentUser, and ClassesRoot, respectively.
            </para>
            </note>
            </remarks>
            <param name="location">The full registry key path.</param>
            <param name="root">The root key/hive (i.e. <see cref="T:Microsoft.Win32.RegistryHive">RegistryHive.LocalMachine</see>).</param>
            <param name="encryptionKey">The client encryption key.</param>
            <param name="useEncryption">Set to true to use encrypted aliases.</param>
            <param name="value">The name of the registry value (e.g. "Version").</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.#ctor(System.String,com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,Microsoft.Win32.RegistryHive,com.softwarekey.Client.Utils.RegistryViews,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias"/> object, which may be used for managing a license file alias located in the Windows registry in a specified root key/hive, using a specified view.</summary>
            <remarks>
            <note type="caution">
            <para>
            The only root registry key/hive locations supported include HKEY_LOCAL_MACHINE, HKEY_CURRENT_USER, and HKEY_CLASSES_ROOT.
            Consequently, the only values supported from the <see cref="T:Microsoft.Win32.RegistryHive"/> enumeration
            include LocalMachine, CurrentUser, and ClassesRoot, respectively.
            </para>
            </note>
            <note type="caution">
            <para>
            Specifying anything other than <see cref="F:com.softwarekey.Client.Utils.RegistryViews.DefaultView"/> will require your application to target .NET Framework 4.0 or later.  If you use anything other than
            <see cref="F:com.softwarekey.Client.Utils.RegistryViews.DefaultView"/> while targeting earlier versions of the .NET Framework, this alias object will fail to function, and will contain a corresponding
            error in the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property.
            </para>
            </note>
            </remarks>
            <param name="location">The full registry key path.</param>
            <param name="encryptionKey">The client encryption key.</param>
            <param name="useEncryption">Set to true to use encrypted aliases.</param>
            <param name="root">The root key/hive (i.e. <see cref="T:Microsoft.Win32.RegistryHive">RegistryHive.LocalMachine</see>).</param>
            <param name="registryView">The registry view to use.  IMPORTANT: RegistryViews.DefaultView is required for applications targeting versions of the .NET Framework prior to 4.0.</param>
            <param name="value">The name of the registry value (e.g. "Version").</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.CheckAlias">
            <summary>Compares the current license to the alias.</summary>
            <returns>Returns true if the alias is found to be valid.  If it is not valid, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.DeleteAlias">
            <summary>Deletes the current alias, and returns true if successful</summary>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.WriteAlias(System.String)">
            <summary>Updates the alias with the latest and greatest license data, returns true if successful</summary>
            <remarks>
            <note type="caution">
            <para>
            This method attempts to write the license file alias to the Windows Registry, and also attempts to give full permissions everyone
            access to this registry key (using <see cref="T:System.Security.Principal.WellKnownSidType">WellKnownSidType.WorldSid</see>).
            This is done to help avoid UAC issues, and is the same behavior performed by Protection PLUS 4 SDK libraries and Instant Protection PLUS 3.
            Please <see href="http://www.softwarekey.com/go/?ID=31" target="_blank">see our knowledge-base</see> for additional information.
            </para>
            </note>
            </remarks>
            <param name="license">The license contents to write</param>
            <returns>Returns true if the alias is deleted successfully.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.WriteKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>Attempts to write the registry key (and create it if missing).</summary>
            <param name="root">The registry key to write.</param>
            <param name="license">The contents of the license to write to the registry key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.OpenBaseKey">
            <summary>Opens the base/root key (the hive).</summary>
            <returns>Returns a <see cref="T:Microsoft.Win32.RegistryKey"/> object for the base/root key (hive).</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.OpenBaseKeyDefaultView">
            <summary>Opens the base/root registry key (the hive) using the default view.</summary>
            <remarks><para>This method is compatible with versions of the .NET Framework prior to 4.0.</para></remarks>
            <returns>Returns a <see cref="T:Microsoft.Win32.RegistryKey"/> object representing the base/root key (the hive).</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.ReadKey(Microsoft.Win32.RegistryKey)">
            <summary>Reads a registry key string value</summary>
            <param name="root">The registry key string value to read.</param>
            <returns>Returns the contents of a string registry key value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseWindowsRegistryAlias.DeleteKey(Microsoft.Win32.RegistryKey)">
            <summary>Deletes a registry key.</summary>
            <param name="root">The registry key to delete.</param>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.License">
            <summary>The base License class, from which all PLUSManaged application license implementations are derived.</summary>
            <remarks>
            <note type="implementnotes">
            <para>
            This is the base class from which all PLUSManaged application licensing implementations are derived.
            Inheriting from this class directly is ideal for using read-only License Files which are signed by SOLO Server.
            If you wish to use a License File that is writable and does not require <see href="https://www.softwarekey.com/solutions/automation/" target="_blank">SOLO Server</see>,
            your implementation should inherit from the <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> class instead
            </para>
            </note>
            </remarks>
            <seealso cref="T:com.softwarekey.Client.Licensing.WritableLicense"/>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_isLicenseDecrypted">
            <summary>True if license file has been decrypted</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_isLicenseVerified">
            <summary>True if the license file has been verified</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_useEncryptedFile">
            <summary>True if license file encryption is being used</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_useWebServiceEncryption">
            <summary>True if web service encryption is being used</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_licenseFile">
            <summary>The license file XML document</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_currentSessionCode">
            <summary>The session code used to prevent a manual activation from being replayed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_sntpRequests">
            <summary>List of SNTP requests to make to try and verify the network time against multiple servers</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_identifierAlgorithms">
            <summary>The algorithms used for identifying the system</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_thisProductId">
            <summary>The SOLO Server Product ID for this product</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_productVersion">
            <summary>The version of this product</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_authorizedIdentifiers">
            <summary>The System Identifiers authorized per the license file</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_currentIdentifiers">
            <summary>The current system's identifiers</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_lastError">
            <summary>The last error</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_formatVersion">
            <summary>The format version of the license file</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_licenseId">
            <summary>The SOLO Server License ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_ActivationPassword">
            <summary>The activation password.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_quantityOrdered">
            <summary>The quantity of licenses ordered</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_installationId">
            <summary>The SOLO Server Installation ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_installationName">
            <summary>The name of the installation</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_signatureDate">
            <summary>The date in which the license file itself was created and signed</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_effectiveStartDate">
            <summary>The date in which this license becomes effective</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_effectiveEndDate">
            <summary>The date in which this license expires</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString1">
            <summary>User defined string data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString2">
            <summary>User defined string data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString3">
            <summary>User defined string data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString4">
            <summary>User defined string data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString5">
            <summary>User defined string data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString6">
            <summary>User defined string data field 6</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString7">
            <summary>User defined string data field 7</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString8">
            <summary>User defined string data field 8</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString9">
            <summary>User defined string data field 9</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedString10">
            <summary>User defined string data field 10</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber1">
            <summary>User defined numeric data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber2">
            <summary>User defined numeric data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber3">
            <summary>User defined numeric data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber4">
            <summary>User defined numeric data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedNumber5">
            <summary>User defined numeric data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate1">
            <summary>User defined date/time data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate2">
            <summary>User defined date/time data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate3">
            <summary>User defined date/time data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate4">
            <summary>User defined date/time data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedDate5">
            <summary>User defined date/time data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat1">
            <summary>User defined float data field 1</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat2">
            <summary>User defined float data field 2</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat3">
            <summary>User defined float data field 3</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat4">
            <summary>User defined float data field 4</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_userDefinedFloat5">
            <summary>User defined float data field 5</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_latestVersion">
            <summary>The latest version of the product available</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_triggerCode">
            <summary>The trigger code number issued by SOLO Server</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_triggerCodeFixedValue">
            <summary>The value of TCFixedValue from SOLO Server's product option settings</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_LicenseCustomData">
            <summary>The License custom data </summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_LicenseCounter">
            <summary>The License Counter</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_LicenseeEmail">
            <summary>Licensee Email</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_LicenseeName">
            <summary>Licensee Name</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_LicenseUpdate">
            <summary>The License update data </summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_SerialNumber">
            <summary>The serial number assigned to the license</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_ExternalReference1">
            <summary>The external reference 1 value.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_ExternalReference1Source">
            <summary>The source of the external reference 1 value.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_ExternalReference2">
            <summary>The external reference 2 value.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_ExternalReference2Source">
            <summary>The source of the external reference 2 value.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.License.m_IsTestLicense">
            <summary>Whether or not the license file is from a test License in SOLO Server.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.Boolean,System.Int32,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.License"/> object with the cryptographic keys already set in an <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="useEncryptedFile">Whether or not the license file should be encrypted.  Encryption is strongly recommended.</param>
            <param name="useWebServiceEncryption">Whether or not web service requests should be encrypted.  Encryption is strongly recommended.</param>
            <param name="productId">The Product ID (usually defined by SOLO Server) of the protected product/application.</param>
            <param name="productVersion">The current version of the product/application.  <see cref="M:com.softwarekey.Client.Utils.IOHelper.GetAssemblyFileVersion(System.Reflection.Assembly)">IOHelper.GetAssemblyFileVersion</see> can be used to retrieve the version number of your assembly.</param>
            <param name="identifierAlgorithms">Generic List of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> objects</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.initialize(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.Boolean,System.Int32,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>Helper method called by constructors to initializes the License object with the data provided</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> data object required to handle cryptographic routines</param>
            <param name="useEncryptedFile">Set to true to use an encrypted License File</param>
            <param name="useWebServiceEncryption">Set to true to encrypt XML web service requests</param>
            <param name="productId">The Product ID for the Product which is being licensed from SOLO Server</param>
            <param name="productVersion">The current version of the product (must be formatted like x.x.x.x, where each 'x' is a non-negative integer that is no longer than 5 digits).  Use an empty string to have the version number ignored.</param>
            <param name="identifierAlgorithms">Generic List of SystemIdentifierAlgorithm objects</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.initializeFromXml(System.Xml.XmlDocument)">
            <summary>Initializes properties from a plain-text XML license document.</summary>
            <param name="xml">The <see cref="T:System.Xml.XmlDocument"/> object with the initialization data</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetEncryptionKey">
            <summary>Gets the AuthorEncryptionKey object used for cryptographic routines.</summary>
            <returns>Returns an AuthorEncryptionKey object, which includes data required for cryptographic routines.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.LoadFile(System.String)">
            <summary>Loads a License File from the file system and returns true if successful</summary>
            <param name="path">The absolute path to the file on the local file-system.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.Load(System.String)">
            <summary>Loads a License File from a <see cref="T:System.String"/> in memory.</summary>
            <param name="data">The License File data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.WriteLicenseFile(System.String,System.String)">
            <summary>Writes a License File to the file system.</summary>
            <note type="caution">
            <para>
            This method uses the <see cref="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)"/> to try to give all users full control of the license file.  This helps
            avoid problems with the UAC in Windows, and helps avoid problems that can often be encountered when your application stores license files
            in a location that is shared by all users.
            </para>
            </note>
            <param name="path">The absolute path to the License File</param>
            /// <param name="lfContent">The XML content of the license.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ToXml">
            <summary>Base ToXml method (omits any SystemIdentifier information) -- do NOT use for writing license files without overriding this first!</summary>
            <returns>An XmlDocument with raw License File XML data</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ResetSessionCode">
            <summary>Creates a new session code in the CurrentSessionCode property</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetActivationRequest(System.Int32,System.String)">
            <summary>Builds a manual activation XML request string</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manual activation processing, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).  Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual activation processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessActivationResponse(System.String)">ProcessActivationResponse</see> method to process the response.
            </para>
            </remarks>
            <param name="licenseId">The License ID of the customer's license in SOLO Server</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.String,System.String)">
            <summary>Activates online using the license's current License ID, the specified customer password or activation password, and endpoint URL</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallation method.  This method will only process activation codes and set the
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  To get the License File contents from SOLO Server after calling this
            method, you would need to call the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">RefreshLicense</see> method.  A more efficient alternative is to
            call the <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String@)">ActivateInstallationLicenseFile</see> method instead, which processes the
            activation and retrieves the License File from SOLO Server at the same time.
            </para>
            </remarks>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Activates online using the license's current License ID, the specified customer password or activation password, and <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> (.NET Framework) or the XmlWebService (.NET Standard) object</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallation method.  This method will only process activation codes and set the
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  To get the License File contents from SOLO Server after calling this
            method, you would need to call the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">RefreshLicense</see> method.  A more efficient alternative is to
            call the <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String@)">ActivateInstallationLicenseFile</see> method instead, which processes the
            activation and retrieves the License File from SOLO Server at the same time.
            </para>
            </remarks>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">
            <summary>Activates online using the specified License ID, customer password or activation password, and endpoint URL.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallation method.  This method will only process activation codes and set the
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  To get the License File contents from SOLO Server after calling this
            method, you would need to call the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">RefreshLicense</see> method.  A more efficient alternative is to
            call the <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String@)">ActivateInstallationLicenseFile</see> method instead, which processes the
            activation and retrieves the License File from SOLO Server at the same time.
            </para>
            </remarks>
            <param name="licenseId">The License ID (from SOLO Server) to activate.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Activates online using the specified License ID, customer password or activation password, and <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> object.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallation method.  This method will only process activation codes and set the
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  To get the License File contents from SOLO Server after calling this
            method, you would need to call the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">RefreshLicense</see> method.  A more efficient alternative is to
            call the <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String@)">ActivateInstallationLicenseFile</see> method instead, which processes the
            activation and retrieves the License File from SOLO Server at the same time.
            </para>
            </remarks>
            <param name="licenseId">The License ID (from SOLO Server) to activate.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivationResponse(System.String)">
            <summary>Processes an activation XML response string</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationRequest(System.Int32,System.String)"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XML response string</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivationResponse(System.Xml.XmlNode)">
            <summary>Processes an activation XML response.</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationRequest(System.Int32,System.String)"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest">
            <summary>Builds a manual license refresh XML request string using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID">InstallationID</see> property</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manual license refresh processing, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual license refresh processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessLicenseRefreshResponse(System.String,System.String@)">ProcessLicenseRefreshResponse</see> method to process the response.
            </para>
            </note>
            </remarks>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">
            <summary>Returns the current license file contents from SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID">InstallationID</see> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license refresh request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_License_File_Service.htm" target="_blank">XmlLicenseFileService</see>
            web service's GetLicenseFile method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="licenseContent">The contents of the License File</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String,System.String@)">
            <summary>Returns the current license file contents from SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license refresh request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopc=Content/XML_License_File_Service.htm" target="_blank">XmlLicenseFileService</see>
            web service's GetLicenseFile method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="endpoint">The full URL to the web service (XmlLicenseFileService) endpoint</param>
            <param name="licenseContent">The contents of the License File</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.RefreshLicense(com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService,System.String@)">
            <summary>Returns the current license file contents from SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license refresh request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_License_File_Service.htm" target="_blank">XmlLicenseFileService</see>
            web service's GetLicenseFile method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="licenseContent">The contents of the License File</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessLicenseRefreshResponse(System.String,System.String@)">
            <summary>Processes an activation XML response string</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual license refresh processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XML response string.</param>
            <param name="licenseContent">The License File content returned from SOLO Server.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessLicenseRefreshResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an License Refresh XML response</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual license refresh processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual license refresh processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The <see cref="T:System.Xml.XmlNode"/> or <see cref="P:System.Xml.XmlDocument.DocumentElement"/> object containing the response XML.</param>
            <param name="licenseContent">The License File content returned from SOLO Server.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)">
            <summary>Builds a manual activation XML request string</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manual activation processing, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual activation processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessActivateInstallationLicenseFileResponse(System.String,System.String@)">ProcessActivateInstallationLicenseFileResponse</see>
            method to process the response.
            </para>
            </note>
            </remarks>
            <param name="licenseId">The License ID of the customer's license in SOLO Server</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.String,System.String,System.String@)">
            <summary>Activates online using the license's current License ID, the specified customer password or activation password, and endpoint URL</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallationLicenseFile method, which processes the activation and retrieves the License File from
            SOLO Server at the same time.
            </para>
            </remarks>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <param name="licenseContent">The License File content returned by SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String@)">
            <summary>Activates online using a specified License ID, customer password or activation password, and endpoint URL</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallationLicenseFile method, which processes the activation and retrieves the License File from
            SOLO Server at the same time.
            </para>
            </remarks>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="licenseContent">The License File content returned by SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">
            <summary>Activates online using the license's current License ID, the specified customer password or activation password, and endpoint URL</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallationLicenseFile method, which processes the activation and retrieves the License File from
            SOLO Server at the same time.
            </para>
            </remarks>
            <param name="licenseId">The License ID (from SOLO Server) to activate.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <param name="licenseContent">The License File content returned by SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String@)">
            <summary>Activates online using a specified License ID, and customer password or activation password</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallationLicenseFile method, which processes the activation and retrieves the License File from
            SOLO Server at the same time.
            </para>
            </remarks>
            <param name="licenseId">The License ID (from SOLO Server) to activate.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="licenseContent">The License File content returned by SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.String@)">
            <summary>Activates online using a specified License ID, customer password or activation password, and endpoint URL</summary>
            <overloads/>
            <remarks>
            <para>
            This processes an online activation using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's ActivateInstallationLicenseFile method, which processes the activation and retrieves the License File from
            SOLO Server at the same time.
            </para>
            </remarks>
            <param name="licenseId">The License ID (from SOLO Server) to activate.</param>
            <param name="password">The activation password assigned to the license, or the customer password, in SOLO Server.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="licenseContent">The License File content returned by SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivateInstallationLicenseFileResponse(System.String,System.String@)">
            <summary>Processes an activation XML response string</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)"/>
            method) may be processed from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XML response string</param>
            <param name="licenseContent">The License File content returned from SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessActivateInstallationLicenseFileResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an activation XML response</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)"/>
            method) may be processed from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <param name="licenseContent">The License File content returned from SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetCheckInstallationStatusRequest">
            <summary>Builds a manual status check XML request string using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manual status check processing, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual status check processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessCheckInstallationStatusResponse(System.Xml.XmlNode)">ProcessCheckInstallationStatusResponse</see> method to process the response.
            </para>
            </note>
            <note type="implementnotes">
            <para>
            If you need to check the status of the Installation ID or License ID in SOLO Server and refresh the License File at the same time,
            use the <see cref="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest"/> method to generate a license refresh request instead.
            </para>
            </note>
            </remarks>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus">
            <summary>Checks the installation status for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license status check request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's CheckInstallationStatus method using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.
            If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            <note type="implementnotes">
            <para>
            If you need to check the status of the Installation ID or License ID in SOLO Server and refresh the License File at the same time,
            use the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">RefreshLicense</see> method instead.
            </para>
            </note>
            </remarks>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus(System.String)">
            <summary>Checks the installation status for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and a specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license status check request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's CheckInstallationStatus method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            <note type="implementnotes">
            <para>
            If you need to check the status of the Installation ID or License ID in SOLO Server and refresh the License File at the same time,
            use the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String,System.String@)">RefreshLicense</see> method instead.
            </para>
            </note>
            </remarks>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Checks the installation status for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and a specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license status check request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's CheckInstallationStatus method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            <note type="implementnotes">
            <para>
            If you need to check the status of the Installation ID or License ID in SOLO Server and refresh the License File at the same time,
            use the <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String,System.String@)">RefreshLicense</see> method instead.
            </para>
            </note>
            </remarks>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessCheckInstallationStatusResponse(System.String)">
            <summary>Processes a CheckInstallationStatus XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual status check processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetCheckInstallationStatusRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessCheckInstallationStatusResponse(System.Xml.XmlNode)">
            <summary>Processes a CheckInstallationStatus XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual status check processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetCheckInstallationStatusRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetDeactivateInstallationRequest">
            <summary>Builds a manual status check XML request string using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manual deactivation processing, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode">ResetSessionCode</see>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual deactivation processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessDeactivateInstallationResponse(System.Xml.XmlNode)">ProcessDeactivateInstallationResponse</see> method to process the response.
            </para>
            </note>
            </remarks>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation">
            <summary>Deactivates the license with SOLO Server using the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license deactivation request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DeactivateInstallation method using the current value of the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.
            If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation(System.String)">
            <summary>Deactivates the license with SOLO Server using the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and the specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license deactivation request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DeactivateInstallation method using the current value of the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.
            If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService)">
            <summary>Deactivates the license with SOLO Server using the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and the specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes license deactivation request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DeactivateInstallation method using the current value of the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.
            If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessDeactivateInstallationResponse(System.String)">
            <summary>Processes a DeactivateInstallation XML response string</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual deactivation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetDeactivateInstallationRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XML response string</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessDeactivateInstallationResponse(System.Xml.XmlNode)">
            <summary>Processes a DeactivateInstallation XML response string</summary>
            <overloads/>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual deactivation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetDeactivateInstallationRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.GetDecrementLicenseCounterRequest(System.Int32)">
            <summary>Builds a manual status check XML request string using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property</summary>
            <remarks>
            <para>
            This method generates an XML request string which may be used for manually decrementing the License Counter, which is where
            the requests may be processed from another computer with Internet access (if the system being licensed has no
            or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/>
            method should be called, as this will help prevent your end-users from replaying requests.  Once the response has been
            generated and sent to the user, the user may then open a response file or paste its contents in your application, which
            can then set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application needs to support
            resuming the manual status check processing after having been closed) and use the
            <see cref="M:com.softwarekey.Client.Licensing.License.ProcessDecrementLicenseCounterResponse(System.Xml.XmlNode)">ProcessDecrementLicenseCounterResponse</see> method to process the response.
            </para>
            </note>
            <note type="implementnotes">
            <para>
            If you need to check the status of the Installation ID or License ID in SOLO Server and refresh the License File at the same time,
            use the <see cref="M:com.softwarekey.Client.Licensing.License.GetLicenseRefreshRequest"/> method to generate a license refresh request instead.
            </para>
            </note>
            </remarks>
            <param name="decrementAmount">The amount to decrement the LicenseCounter value.</param>
            <returns>Returns a string which contains the XML request string the user can post/upload to SOLO Server's manual request processing page.  If an empty string is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DecrementLicenseCounter(System.Int32)">
            <summary>Decrements the License Counter value for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes a decrement License Counter request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DecrementLicenseCounter method using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.
            If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="decrementAmount">The amount to decrement the LicenseCounter value.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DecrementLicenseCounter(System.String,System.Int32)">
            <summary>Decrements the License Counter value for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and a specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes a decrement License Counter request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DecrementLicenseCounter method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>
            </remarks>
            <param name="endpoint">The full URL to the web service (XmlActivationService) endpoint</param>
            <param name="decrementAmount">The amount to decrement the LicenseCounter value.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.DecrementLicenseCounter(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,System.Int32)">
            <summary>Decrements the License Counter value for the given Installation ID against SOLO Server using the current value in the <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property and a specified endpoint.</summary>
            <overloads/>
            <remarks>
            <para>
            This processes a decrement License Counter request using SOLO Server's
            <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see>
            web service's DecrementLicenseCounter method.  
            <see cref="P:com.softwarekey.Client.Licensing.License.InstallationID"/> property.  If the Installation ID is not set or is invalid, the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">ActivateOnline</see> may be used to get one, or you can call the
            <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">ActivateInstallationLicenseFile</see>
            method to get the Installation ID and License File at the same time.
            </para>        
            </remarks>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="decrementAmount">The amount to decrement the LicenseCounter value.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessDecrementLicenseCounterResponse(System.String)">
            <summary>Processes a DecrementLicenseCounter XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete a manual decrement License Counter processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetDecrementLicenseCounterRequest(System.Int32)"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.ProcessDecrementLicenseCounterResponse(System.Xml.XmlNode)">
            <summary>Processes a DecrementLicenseCounter XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual status check processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetDecrementLicenseCounterRequest(System.Int32)"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddIdentifierAlgorithm(com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm)">
            <summary>Adds a <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation to use for system identification and verification.</summary>
            <param name="algorithm">The <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> to use when initializing the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentIdentifiers"/> property (initialized by the <see cref="M:com.softwarekey.Client.Licensing.License.InitializeCurrentIdentifiers"/> method).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.InitializeCurrentIdentifiers">
            <summary>Initializes the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentIdentifiers"/> property using the algorithms added using the <see cref="M:com.softwarekey.Client.Licensing.License.AddIdentifierAlgorithm(com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm)"/> method.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <overloads/>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            </remarks>
            <param name="host">The NTP server host name.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <overloads/>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            </remarks>
            <param name="host">The NTP server host name.</param>
            <param name="port">The NTP server port.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.AddTimeServerCheck(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check</summary>
            <overloads/>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            </remarks>
            <param name="host">The NTP server host name.</param>
            <param name="port">The NTP server port.</param>
            <param name="sendTimeout">The maximum amount of time (in milliseconds) which can be spent sending the NTP request.</param>
            <param name="receiveTimeout">The maximum amount of time (in milliseconds) which can be spent waiting to receive a response to the NTP request.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers">
            <summary>Checks the system time against multiple time servers/sntp requests, allowing up to a 5 minute difference.</summary>
            <overloads/>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            </remarks>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers(System.Double)">
            <summary>Checks the system time against multiple time servers/sntp requests</summary>
            <overloads/>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            </remarks>
            <param name="minuteThreshold">The maximum amount of allowable difference in time (in minutes) between the system and the NTP server.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.License.CheckTimeAgainstServers(System.Collections.Generic.List{com.softwarekey.Client.Utils.SimpleNetworkTime},System.Double)">
            <summary>Checks the system time against multiple time servers/sntp requests</summary>
            <param name="requests">Generic list of SimpleNetworkTime objects</param>
            <param name="minuteThreshold">The maximum amount of allowable difference in time (in minutes) between the system and the NTP server.</param>
            <returns>Returns the result as a <see cref="T:com.softwarekey.Client.Licensing.LicenseError"/> object.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UseWebServiceEncryption">
            <summary>Gets whether or not web service requests and responses are encrypted.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ThisProductID">
            <summary>Gets or sets the Product ID (usually generated by SOLO Server) of this product/application.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProductVersion">
            <summary>Gets or sets the version of this product.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.InstallationName">
            <summary>Gets or sets the name of the installation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EncryptionKeyID">
            <summary>Gets or sets the Encryption Key identifier.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LastError">
            <summary>Gets or sets the last error encountered</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.FormatVersion">
            <summary>Gets the format version of the license file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseID">
            <summary>Gets the License ID of the license purchased and activated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ActivationPassword">
            <summary>Gets the activation password, which is usually randomly generated by SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.QuantityOrdered">
            <summary>Gets the quantity of licenses ordered.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.InstallationID">
            <summary>Gets the Installation ID which uniquely identifies the activation of the current system</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.SignatureDate">
            <summary>Gets the date in which the license file itself was created and signed.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EffectiveStartDate">
            <summary>Gets the date in which the license becomes effective.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.EffectiveEndDate">
            <summary>Gets the date in which the license expires.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString1">
            <summary>Gets the User Defined String Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString2">
            <summary>Gets the User Defined String Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString3">
            <summary>Gets the User Defined String Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString4">
            <summary>Gets the User Defined String Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString5">
            <summary>Gets the User Defined String Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString6">
            <summary>Gets the User Defined String Field 6 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString7">
            <summary>Gets the User Defined String Field 7 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString8">
            <summary>Gets the User Defined String Field 8 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString9">
            <summary>Gets the User Defined String Field 9 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedString10">
            <summary>Gets the User Defined String Field 10 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate1">
            <summary>Gets the User Defined Date-Time Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate2">
            <summary>Gets the User Defined Date-Time Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate3">
            <summary>Gets the User Defined Date-Time Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate4">
            <summary>Gets the User Defined Date-Time Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedDate5">
            <summary>Gets the User Defined Date-Time Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber1">
            <summary>Gets the User Defined Number Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber2">
            <summary>Gets the User Defined Number Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber3">
            <summary>Gets the User Defined Number Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber4">
            <summary>Gets the User Defined Number Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedNumber5">
            <summary>Gets the User Defined Number Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat1">
            <summary>Gets the User Defined Float Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat2">
            <summary>Gets the User Defined Float Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat3">
            <summary>Gets the User Defined Float Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat4">
            <summary>Gets the User Defined Float Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.UserDefinedFloat5">
            <summary>Gets the User Defined Float Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LatestVersion">
            <summary>Gets the latest version of the product available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.TriggerCode">
            <summary>Gets the Trigger Code number issued by SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.TriggerCodeFixedValue">
            <summary>Gets the Trigger Code Fixed Value issued by SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseCustomData">
            <summary>Gets the License Custom Data, which contains custom XML or alphanumeric data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseCounter">
            <summary>Gets the License Counter value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseeEmail">
            <summary>Gets the licensee's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseeName">
            <summary>Gets the licensee's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseUpdate">
            <summary>Gets the License Update data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.SerialNumber">
            <summary>Gets the Serial Number value</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ExternalReference1">
            <summary>Gets the External Reference 1 value, which is a unique identifier generated by a third-party system or service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ExternalReference1Source">
            <summary>Gets the source of the <see cref="P:com.softwarekey.Client.Licensing.License.ExternalReference1"/> value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ExternalReference2">
            <summary>Gets the External Reference 2 value, which is a unique identifier generated by a third-party system or service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ExternalReference2Source">
            <summary>Gets the source of the <see cref="P:com.softwarekey.Client.Licensing.License.ExternalReference2"/> value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.IsTestLicense">
            <summary>Gets whether or not the license file was generated from a test license.  IMPORTANT: Test licenses may eventually be deleted from SOLO Server's database!</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Author">
            <summary>Gets the Author that issued this License.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Customer">
            <summary>Gets the Customer to which this License was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Distributor">
            <summary>Gets the Distributor with which this License is associated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.Product">
            <summary>Gets the Product for which the License was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.ProductOption">
            <summary>Gets the Product Option for which the License was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseGroup">
            <summary>Gets the License Group to which the License was assigned.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.LicenseValidationOptions">
            <summary>Gets the License Validation Options.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode">
            <summary>Gets or sets the current session code, which prevents replay attacks in manual request processing.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.AuthorizedIdentifiers">
            <summary>Gets a generic list of authorized/activated system identifiers.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.CurrentIdentifiers">
            <summary>Gets a generic list of the current system's identifiers.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.License.NumberOfMatchingIdentifiers">
            <summary>Gets the the number of authorized system identifiers with matching current system identifiers.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.LicenseError">
            <summary>Class used for licensing errors, which may occur in a variety of operations performed by this library.</summary>
            <remarks>
            <para>
            Throughout the PLUSManaged library, a common paradigm in its objects is to return a <see cref="T:System.Boolean"/>
            value to indicate success (true) or some kind of failure (false).  When a failure is indicated, a LicenseError
            object may typically be referenced (through a "LastError" property) to obtain more details on the failure.
            The type of failure can be uniquely identified via the <see cref="P:com.softwarekey.Client.Licensing.LicenseError.ErrorNumber"/> property, and the description
            of this error is available through the <see cref="P:com.softwarekey.Client.Licensing.LicenseError.ErrorString"/> property.  Additionally, when the failure occurs
            within this library and involves an <see cref="T:System.Exception"/>, the <see cref="P:com.softwarekey.Client.Licensing.LicenseError.ErrorException"/> property
            contains the <see cref="T:System.Exception"/> object.
            </para>
            <para>
            When the operation which generated a failure is processed through a system outside of this library (such as a
            a call to a SOLO Server web service method), the <see cref="P:com.softwarekey.Client.Licensing.LicenseError.ExtendedErrorNumber"/> property is populated with
            that system's error number or result code.  In the case of a call to SOLO Server web service methods, the
            <see cref="M:com.softwarekey.Client.Licensing.LicenseError.GetWebServiceErrorMessage(System.Int32)"/> method may be used to retrieve a description of the error.
            </para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NONE">
            <summary>Error number for when there is no error.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_DATA">
            <summary>Error number for when invalid data is provided.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_SERVER_KEY">
            <summary>Error number for when an invalid server key is provided.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_CLIENT_KEY">
            <summary>Error number for when an invalid client key is provided.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_DECRYPTION_FAILED">
            <summary>Error number for when decrypting a document fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_VERIFICATION_FAILED">
            <summary>Error number for when verifying the signature of a document fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_ENCRYPTION_FAILED">
            <summary>Error number for when encrypting a document fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SIGNING_FAILED">
            <summary>Error number for when signing a document fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SESSION_VERIFICATION_FAILED">
            <summary>Error number for when session code verification fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INSTALLATIONID_REQUIRED">
            <summary>An Installation ID is required, but not present.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_TRIGGER_CODE_INVALID">
            <summary>Error number for when an invalid "Activation Code 1" value is entered by the user.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_TRIGGER_CODE_EVENT_DATA_INVALID">
            <summary>Error number for when an invalid "Activation Code 2" value is entered by the user.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_LICENSE_TYPE">
            <summary>Error number for when a license type is invalid or not supported.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_XML_PARSER_FAILED">
            <summary>Error number for when the XML parser fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_XML_NODE_MISSING">
            <summary>Error number for when the specified node is not present in the document.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_ARGUMENTS">
            <summary>Error number for when some or all of the function arguments are invalid.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_CONTEXT_INVALID">
            <summary>Error number for when the API context is invalid.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_STRING_CONVERSION_FAILED">
            <summary>Error number for when a string conversion operation fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_DATETIME_CONVERSION_FAILED">
            <summary>Error number for when a date-time conversion operation fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_PLUS_EVALUATION_WARNING">
            <summary>No error actually occurred, but that an evaluation envelope is being used.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_PLUS_EVALUATION_INVALID">
            <summary>The Protection PLUS 5 SDK evaluation is invalid or expired.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_PRODUCTID">
            <summary>The Product ID authorized in the license is invalid or not for this application.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_PRODUCTOPTIONID">
            <summary>The Product Option ID authorized in the license is invalid or not for this application.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_ENVELOPE_TYPE_INVALID">
            <summary>The envelope is not valid or not for application use.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INSUFFICIENT_IMAGE_SIZE">
            <summary>The license image is either too small to hold the license data or is under the minimum image size required.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_IMAGE">
            <summary>The license image is not valid.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_INVALID_CONTENT_FORMAT">
            <summary>Error number for when the data is not the expected format.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_INVALID_CONFIGURATION">
            <summary>Error number for when an invalid web service configuration is provided.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_CALL_FAILED">
            <summary>Error number for when a web service call failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_WEBSERVICE_RETURNED_FAILURE">
            <summary>Error number for when a web service call returned an error.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_REQUIRED_SERVER_VALIDATION_FAILED">
            <summary>Error number for when a any kind of validation against SOLO Server is required, but could not be completed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_HTTP_INITIALIZATION_FAILED">
            <summary>Error number for when the HTTP client fails to initialize.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_HTTP_CONNECTION_FAILED">
            <summary>Error number for when an HTTP connection fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_HTTP_COULD_NOT_RESOLVE_HOST">
            <summary>Error number for when the specified host could not be resolved.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SSL_FAILED">
            <summary>Error number for when an HTTPS request fails due to an SSL related problem.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_LOAD_LICENSE">
            <summary>Error number for when an attempt to load a license file failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_SAVE_LICENSE">
            <summary>Error number for when an attempt to save a new license file failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_NOT_EFFECTIVE_YET">
            <summary>Error number for when the license is not effective yet.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_EXPIRED">
            <summary>Error number for when the license is expired.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_ALIAS_VALIDATION_FAILED">
            <summary>Error number for when an alias's LastUpdated date could not be validated.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_ALIAS_VALIDATION_TIME_MISMATCH">
            <summary>Error number for when an alias has a LastUpdated date in the future.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_SAVE_NETWORK_CERTIFICATE">
            <summary>Error number for when an attempt to save a NetworkSessionCertificate file failed.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_CERTIFICATE_INVALID_PATH">
            <summary>Error number for when a NetworkSessionCertificate file's path is invalid.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_CERTIFICATE_REQUIRED">
            <summary>Error number for when a NetworkSessionCertificate is not present, but is required.</summary>
            <remarks>
            <para>Only used in PLUSManaged.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_DELETE_FILE">
            <summary>Error number for when an attempt to delete a license file failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_SEMAPHORE_INVALID_PATH">
            <summary>Error number for when a NetworkSemaphore file's path is invalid.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_LICENSE_FULL">
            <summary>Error number for when the number of allowed concurrent users has been reached.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_NETWORK_SEMAPHORE_LOCK_FAILED">
            <summary>Error number for when network semaphore file creation fails.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_MODULE_NOT_ACTIVE">
            <summary>Error number for when use of the application or module is not permitted.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_OPEN_FILE">
            <summary>Error number for when an attempt to open a file failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_READ_FILE">
            <summary>Error number for when an attempt to read a file failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_WRITE_FILE">
            <summary>Error number for when an attempt to write a file failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_OPEN_REGISTRY_KEY">
            <summary>Error number for when an attempt to open a registry key failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_READ_REGISTRY_KEY">
            <summary>Error number for when an attempt to read a registry key value failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_WRITE_REGISTRY_KEY">
            <summary>Error number for when an attempt to write a registry key value failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_IO_OPERATION_FAILED">
            <summary>Error number when an attempt to perform an I/O operation failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_READ_PERMISSIONS">
            <summary>Error number for when an attempt to read a file or registry key's permissions failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_SET_PERMISSIONS">
            <summary>Error number for when an attempt to set a file or registry key's permissions failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SSL_CERTIFICATE_EXPORT_FAILED">
            <summary>Error number for when an attempt to export the SSL certificate bundle failed.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SSL_CERTIFICATE_UNAVAILABLE">
            <summary>Error number for when an HTTPS request fails due to a problem with the certificate bundle.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_COULD_NOT_LOAD_VOLUME_DOWNLOADABLE_LICENSE">
            <summary>Error number for when an attempt to load a volume or downloadable license file failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SYSTEM_TIME_VERIFICATION_FAILED">
            <summary>Error number for when system time verification failed.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_SYSTEM_TIME_INVALID">
            <summary>Error number for when the system time is invalid.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_VIRTUAL_MACHINE_DETECTED">
            <summary>Error number for when a virtual machine is detected.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_REMOTE_SESSION_DETECTED">
            <summary>Error number for when a remote session is detected.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LICENSE_SYSTEM_IDENTIFIERS_DONT_MATCH">
            <summary>Error number for when system identifiers do not match.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_PLATFORM_ERROR">
            <summary>Error number for when a platform specific API or system call fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_UNSUPPORTED_OS">
            <summary>Error number for when an attempt to perform an unsupported operation occurs.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_MEMORY_ALLOCATION">
            <summary>Error number for when an attempt to allocate memory fails.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LIBRARY_UNAVAILABLE">
            <summary>Error number for when a required system library is missing for failed to load.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.LicenseError.ERROR_LIBRARY_FUNCTION_UNAVAILABLE">
            <summary>Error number for when a required library function is missing.</summary>
            <remarks>
            <para>Only used in PLUSNative.</para>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseError"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseError"/> object with the specified error.</summary>
            <param name="e">The error number/code.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.LicenseError"/> object with a specified error and extended error</summary>
            <param name="e">The error number/code.</param>
            <param name="ee">The extended error number/code, which originated from a source other than PLUSManaged.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Exception)">
            <summary>Creates a new LicenseError object with a given error number and exception</summary>
            <param name="e">The error number/code.</param>
            <param name="ex">The <see cref="T:System.Exception"/> associated with the error.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.#ctor(System.Int32,System.Int32,System.Exception)">
            <summary>Creates a new LicenseError object with a given error number, extended error number, and exception</summary>
            <param name="e">The error number/code.</param>
            <param name="ee">The extended error number/code, which originated from a source other than PLUSManaged.</param>
            <param name="ex">The <see cref="T:System.Exception"/> associated with the error.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.initialize(System.Int32,System.Exception)">
            <summary>Helper method called by all constructors to handle initialization</summary>
            <param name="e">The error number/code.</param>
            <param name="ex">The <see cref="T:System.Exception"/> associated with the error.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.initialize(System.Int32,System.Int32,System.Exception)">
            <summary>Helper method called by all constructors to handle initialization</summary>
            <param name="e">The error number/code.</param>
            <param name="ee">The extended error number/code, which originated from a source other than PLUSManaged.</param>
            <param name="ex">The <see cref="T:System.Exception"/> associated with the error.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.ToString">
            <summary>Gets a human-readable description of the error (exactly the same as the value given by the ErrorString property).</summary>
            <returns>Returns the human-readable description of the error (exactly the same as the value given by the ErrorString property).</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.GetWebServiceErrorMessage(com.softwarekey.Client.Licensing.LicenseError)">
            <summary>Gets a friendly web service error message for display.</summary>
            <overloads/>
            <param name="lastError">The LicenseError object which contains the error received.</param>
            <returns>Returns a human-readable web service error description.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.LicenseError.GetWebServiceErrorMessage(System.Int32)">
            <summary>Gets a friendly web service error message for display.</summary>
            <overloads/>
            <param name="extendedErrorCode">The Web Service Error/Result Code received.</param>
            <returns>Returns a human-readable web service error description.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorNumber">
            <summary>The error number/code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ExtendedErrorNumber">
            <summary>The extended error number/code.  This may be returned by an external source, such as a SOLO Server web service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorString">
            <summary>The human-readable description of the error.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.LicenseError.ErrorException">
            <summary>The <see cref="T:System.Exception"/> associated with the error (may be null).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a hard disk volume format serial number.  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm"/>.</summary>
            <remarks>
            <note type="caution"><para>The HardDiskVolumeSerialIdentifier class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.m_HardDiskVolumeSerialIdentifierId">
            <summary>The static member for tracking default identifiers generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The hard disk volume format serial.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> object, initialized with the name and value</summary>
            <param name="name">The name of the HardDiskVolumeSerialIdentifier object.</param>
            <param name="value">The hard disk volume format serial.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier"/> object, initialized with the name, value, and hash</summary>
            <param name="name">The name of the HardDiskVolumeSerialIdentifier object.</param>
            <param name="value">The hard disk volume format serial.</param>
            <param name="hash">Hash of the hard disk volume format serial.</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifier.Type">
            <summary>Gets this system identifier's type ("HardDiskVolumeSerialIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType">
            <summary>Enumeration defining the different types of supported filters used when retrieving the <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm"/> output from the <see cref="M:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm.GetIdentifiers"/> method.</summary>
            <remarks>
            <note type="caution">
            <para>When using a filter other than OperatingSystemRootVolume, it is possible for your users to experience noticeably
            sluggish performance.  This is because every filter except OperatingSystemRootVolume must query information on all drives,
            which can take some time when a system has many drives installed (especially if some or all of these drives power-down to
            minimize energy consumption).</para>
            </note>
            <note type="caution">
            <para>
            On Microsoft Windows, the StandardFixedOnly is the default filter, and produces behavior which is backward-compatible with
            versions of PLUSManaged earlier than 1.11.3.0.  However, this filter relies strictly on whether the drive reports itself
            as fixed or not, and many removable drives (particularly internal drives placed in removable/USB enclosures) report
            themselves as fixed drives.  If this is cause for concern or problems, please consider using the OperatingSystemRootVolume
            on any supported platform, or the WmiFixedOnly filter on Windows.
            </para>
            <para>
            In Linux and macOS, OperatingSystemRootVolume is the default filter.  Our testing has found that many removable drives are reported as
            fixed in these platforms (even when the same drive shows as removable in Windows).  Since this makes the StandardFixedOnly filter rather
            unreliable in this scenario, we strongly recommend using only the OperatingSystemRootVolume filter in Linux and macOS.
            </para>
            </note>
            <note type="caution">
            <para>
            The WmiFixedOnly filter is only supported on Windows.  Attempting to use it on other platforms cause a
            <see cref="T:System.PlatformNotSupportedException"/> to be thrown.  You can leverage the System.Environment.OSVersion.Platform
            property to conditionally use this filter and avoid this exception.
            </para>
            </note>
            <note type="caution"><para>On macOS, this algorithm is only supported while targeting the 4.0 (v4.0.30319) framework or later, and requires the
            presence of the MonoMac.dll assembly to function.  Any attempt to use it without this assembly present, or while targeting older framework
            versions, will result in unhandled exceptions being thrown.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType.NoFilter">
            <summary>Omits all filtering and returns identifiers for all drives/mount points.  This can include removable storage devices, mapped network drives, etc...</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType.OperatingSystemRootVolume">
            <summary>
            Only generates an identifier for the drive or mount point on which the operating system is installed.  This is typically the C:\
            drive on Microsoft Windows, and is always / (root) for Unix platforms.  This is the default filter on Linux and macOS.
            </summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType.StandardFixedOnly">
            <summary>
            This filters out drives that report themselves as anything other than fixed.  This is the default filter on Microsoft Windows, and
            is backward compatible versions of PLUSManaged earlier than 1.11.3.0.  Since many removable drives report themselves as fixed, you
            should consider using the WmiFixedVolume or OperatingSystemRootVolume filters on Windows, and you should use the
            OperatingSystemRootVolume filter on Linux and macOS.
            </summary>
            <note type="caution">
            <para>When using this filter, it is possible for your users to experience noticeably sluggish performance.  This is because
            every filter except OperatingSystemRootVolume must query information on all drives, which can take some time when a system
            has many drives installed (especially if some or all of these drives power-down to minimize energy consumption).</para>
            </note>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.HardDiskVolumeSerialFilterType.WmiFixedOnly">
            <summary>
            If using Windows Management Instrumentation queries (WMI) is an option for you, this provides the most information with the most
            reliable filtering.  Unlike StandardFixedOnly, this is not mislead by USB drives that still report themselves as fixed drives.
            Any attempt to use this on platforms other than Windows will cause a <see cref="T:System.PlatformNotSupportedException"/> to be thrown.
            </summary>
            <note type="caution">
            <para>When using this filter, it is possible for your users to experience noticeably sluggish performance.  This is because
            every filter except OperatingSystemRootVolume must query information on all drives, which can take some time when a system
            has many drives installed (especially if some or all of these drives power-down to minimize energy consumption).</para>
            </note>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a network path.</summary>
            <remarks>
            <note type="caution"><para>The NetworkNameIdentifierAlgorithm class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.thisAlgorithmId">
            <summary>The name of this algorithm</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm"/> object.</summary>
            <param name="networkPath">The absolute path to a network location.  Use a UNC-formatted path or a path which uses a mapped drive letter.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NetworkNameIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of ComputerNameIdentifier objects.</summary>
            <remarks>
            <para>
            The list contains a single NetworkNameIdentifier object, which contains an identifier
            based on the UNC-formatted network path.  Non-UNC-formatted paths (such as ones which
            use a mapped drive letter) are automatically formatted using the
            <see cref="M:com.softwarekey.Client.Utils.IOHelper.ToUncPath(System.String)">IOHelper.ToUncPath</see> method.
            </para>
            <note type="caution">
            <para>
            This algorithm is not meant to be used on the same machine which is hosting the share.
            For these machines (which you may want to support via Citrix/Remote Desktop services),
            we recommend using algorithms that target machine/hardware-specific details (such as
            <see cref="T:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm"/>,
            <see cref="T:com.softwarekey.Client.Licensing.HardDiskVolumeSerialIdentifierAlgorithm"/>,
            or <see cref="T:com.softwarekey.Client.Licensing.ComputerNameIdentifierAlgorithm"/>).
            </para>
            </note>
            <note type="caution">
            <para>
            Although it is not officially supported, it is possible to use Microsoft's WebDAV redirector.
            When doing so, you should expect the identifiers generated when accessing the share from a
            remote network to differ from the identifiers generated when accessing from the same/local
            network where the share is hosted.
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of NetworkNameIdentifier objects.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NicIdentifier">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> implementation for a Network Interface Card (NIC).  These identifiers are generated by <see cref="T:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm"/>.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NicIdentifier.m_nicIdentifierId">
            <summary>Static member for tracking default ID's generated</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object, initialized with the value</summary>
            <param name="value">The MAC Address/Physical Address of the Network Interface Card (NIC).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The MAC Address/Physical Address of the Network Interface Card (NIC).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.Net.NetworkInformation.NetworkInterface)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object, initialized with the value.</summary>
            <param name="value">The Network Interface Card (NIC).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the NicIdentifier object.</param>
            <param name="value">The MAC Address/Physical Address of the Network Interface Card (NIC).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> object, initialized with the name, value, and hash.</summary>
            <param name="name">The name of the NicIdentifier object.</param>
            <param name="value">The MAC Address/Physical Address of the Network Interface Card (NIC).</param>
            <param name="hash">Hash of the MAC Address/Physical Address of the Network Interface Card (NIC).</param>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.NicIdentifier.Type">
            <summary>Gets this system identifier's type ("NicIdentifier").</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm">
            <summary><see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> implementation for identifying a system based on installed Network Interface Cards (NICs).</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.thisAlgorithmId">
            <summary>This algorithm's name</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.GetIdentifiers">
            <summary>Generates a generic list of NicIdentifier objects.</summary>
            <remarks>
            <para>
            The list contains NicIdentifier objects, each identifying a given NIC's MAC/physical address.
            (You can view the MAC Address/Physical Address by running the "ipconfig /all" command
            in a command prompt.)  NICs excluded by this algorithms implementation include
            PPP/dial-up adapters (modems), tunnel adapters (VPN adapters), and loopback adapters.
            Additionally, some known virtual adapters are ignored, such as VMWare virtual adapters
            (which are installed on VMWare hosts), and certain virtual adapters installed by
            various VPN products.
            </para>
            <note type="caution">
            <para>
            When a network adapter is disabled through the control panel, or a device is removed
            entirely, the device's driver is no longer enabled.  This causes the device to no
            longer show up in the list of generated identifiers.  If you need to support removable
            Network Interface Cards, you should consider this and implement logic which allows what
            you find to be an acceptable amount of variation.
            </para>
            </note>
            </remarks>
            <returns>Returns a generic list of <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> objects.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.NicIdentifierAlgorithm.ShouldBeIgnored(System.Net.NetworkInformation.NetworkInterface)">
            <summary>Determines whether or not a network interface should be ignored.</summary>
            <param name="iface">The <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> object to evaluate.</param>
            <returns>Returns true if the <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> should be ignored when generating <see cref="T:com.softwarekey.Client.Licensing.NicIdentifier"/> objects.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper">
            <summary>Helper class for RSA Algorithm cryptographic routines.</summary>
            <remarks>
            <note type="caution">
            <para>
            This class is only meant for internal use by PLUSManaged.  Direct use of this
            class is no longer supported, and will no longer be available in a future version
            of PLUSManaged.
            </para>
            </note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_PKCS1v15_PADDINGSIZE">
            <summary>The number of bytes needed for PKCS1v15 padding</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_PKCS1OAEP_PADDINGSIZE">
            <summary>The number of bytes needed for OAEP padding</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.RSA_DEFAULT_KEYLENGTH">
            <summary>The default key length (in bits)</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_rsa">
            <summary>The cryptography provider</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_useOaepPadding">
            <summary>Whether or not OAEP padding should be used (strongly recommended to be left as true)</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.m_keyStore">
            <summary>The key store to use</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.RsaHelper"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.#ctor(com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Encryption.RsaHelper"/> object, and overrides the key store used.</summary>
            <param name="keyStore">The key-store to use.  The User key-store is recommended for most desktop applications, while Machine key-store is recommended for ASP.NET applications.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetNewProvider(System.Int32,com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>Generates a new cryptographic provider for a given key size (in bits)</summary>
            <param name="keyLength">The Key Length (in bits - i.e. 1024).</param>
            <param name="keyStore">The KeyStore to use.  Use the user key store for standard desktop applications, and the machine key store for web applications or system services.</param>
            <returns>Returns the RSACryptoServiceProvider object to use for cryptographic routines.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Clear">
            <summary>Clears cryptographic information and removes the key from the key store.   The object is not usable after calling this method!</summary>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetXmlKeyString(System.Boolean)">
            <summary>Generates an XML formatted string with key data.</summary>
            <param name="includePrivateData">Set to true to include private key data, or false to only include internal key data.</param>
            <returns>Returns the private key in an XML formatted string used by the .NET RSA cryptography provider.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SetKeysFromXml(System.String)">
            <summary>Sets the key data from an XML formatted string used by the .NET RSA cryptography provider.</summary>
            <param name="xml">The XML formatted string containing the key data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GetCspBlob(System.Boolean)">
            <summary>Generates base 64 encoded key data in the form of a CSP binary blob.</summary>
            <param name="includePrivateData">Set to true to include private key data, or false to only include public key data.</param>
            <returns>Returns a base 64 encoded string containing the CSP binary blob key data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SetKeysFromCspBlob(System.String)">
            <summary>Sets the key data based on a base 64 encoded CSP binary blob</summary>
            <param name="blob">The base 64 encoded string containing the CSP binary blob key data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GenerateKey(System.Int32)">
            <summary>Generates an XML string of a new RSA key data (uses the Machine KeyStore).</summary>
            <param name="keyLength">The key length (in bits - i.e. 1024).</param>
            <returns>Returns an XML formatted string containing new RSA key data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.GenerateKey(System.Int32,System.Boolean,com.softwarekey.Client.Encryption.RsaHelper.KeyStore)">
            <summary>Generates an XML string of a new RSA key data.</summary>
            <param name="keyLength">The key length (in bits - i.e. 1024).</param>
            <param name="includePrivateData">Set to true to include private key data, or false to only include public key data.</param>
            <param name="keyStore">The KeyStore to use.  Use the user key store for standard desktop applications, and the machine key store for web applications or system services.</param>
            <returns>Returns an XML string containing new RSA key data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Encrypt(System.String)">
            <summary>Encrypts a string value and returns the encrypted value as a base64 encoded string.</summary>
            <param name="value">The value to encrypt.</param>
            <returns>Returns the base 64 encoded, encrypted value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Decrypt(System.String)">
            <summary>Decrypts an encrypted, base 64 encoded string, and returns.</summary>
            <param name="value">The encrypted, base 64 encoded string to decrypt.</param>
            <returns>Returns the original plain-text string value.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Sign(System.String)">
            <summary>Generates an RSA signature.</summary>
            <param name="value">The value to sign.</param>
            <returns>Returns a base 64 encoded RSA digital signature.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.Verify(System.String,System.String)">
            <summary>Verifies an RSA digital signature.</summary>
            <param name="value">The value to verify.</param>
            <param name="signature">The digital signature to verify.</param>
            <returns>Returns true if the signature was verified successfully, or false if verification failed.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.ProcessBytes(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[],com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction)">
            <summary>Processes RSA Encryption and Decryption on a byte array.</summary>
            <param name="rsa">The RsaCryptoServiceProvider object used in cryptographic operations.</param>
            <param name="bytes">The byte array to process.</param>
            <param name="action">The kind of processing we are performing (i.e. encrypting or decrypting).</param>
            <returns>Returns a byte array of the processed (encrypted or decrypted) bytes.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.CanonicalizeXmlDsigCN14(System.Xml.XmlDocument)">
            <summary>Generates a canonicalized XML per the <see href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" target="_blank">W3C CN14 XML recommendation</see>.</summary>
            <param name="xmlDoc">The XmlDocument object to canonicalize.</param>
            <returns>Returns the XML formatted, canonicalized string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.SignXmlDocument(System.Xml.XmlDocument@)">
            <summary>Signs an XML Document.</summary>
            <param name="xmlDoc">The XmlDocument which will be signed and have the signature added to it.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.EncryptXmlElementByTagName(System.Xml.XmlDocument@,System.String)">
            <summary>Encrypts an XML tag by name (only encrypts and replaces 1 tag at a time)</summary>
            <param name="xmlDoc">The XmlDocument containing the tag to encrypt.</param>
            <param name="elementTagName">The tag name to find and encrypt.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.DecryptXmlDocument(System.Xml.XmlDocument@)">
            <summary>Decrypts an XML Document.</summary>
            <param name="xmlDoc">The XmlDocument object to decrypt.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.DecryptXmlDocument(System.Xml.XmlDocument@,System.Boolean)">
            <summary>Decrypts an XML Document</summary>
            <param name="xmlDoc">The XmlDocument object to decrypt.</param>
            <param name="recursive">Set to true to decrypt all encrypted elements, or set false to only decrypt the root node's immediate child elements.</param>
        </member>
        <member name="M:com.softwarekey.Client.Encryption.RsaHelper.VerifyXmlDocument(System.Xml.XmlDocument)">
            <summary>Verifies an XML document's digital signature.</summary>
            <param name="xmlDoc">The signed XmlDocument object to verify.</param>
            <returns>Returns true if the object was verified successfully, or false if verification failed.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.RsaHelper.UseOaepPadding">
            <summary>Gets or sets whether OAEP padding will be used.  If false, direct encryption (PKCS1v15 padding) will be used instead.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Encryption.RsaHelper.CharacterEncoder">
            <summary>Gets or sets the <see cref="T:System.Text.Encoding"/> object used for character encoding (UTF-8 by default).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction">
            <summary>Enumeration for determining how to process bytes during cryptographic routines</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction.EncryptData">
            <summary>Encrypt Data</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.ByteProcessingAction.DecryptData">
            <summary>Decrypt Data</summary>
        </member>
        <member name="T:com.softwarekey.Client.Encryption.RsaHelper.KeyStore">
            <summary>Enumeration for the different key store types</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.KeyStore.Machine">
            <summary>Machine Key Store</summary>
        </member>
        <member name="F:com.softwarekey.Client.Encryption.RsaHelper.KeyStore.User">
            <summary>User Key Store</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemIdentifierValidation">
            <summary>Implements basic validation of authorized system identification information against the current system's identification information.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifierValidation.REQUIRE_EXACT_MATCH">
            <summary>Constant for the value to use to indicate that an exact match is required</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.SystemIdentifierValidation.REQUIRE_AT_LEAST_ONE_MATCH">
            <summary>Constant for the value to use to indicate that at least one match is required</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierValidation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.#ctor(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier},System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier},System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierValidation"/> object with all required validation data.</summary>
            <param name="authorizedIdentifiers">Generic list of authorized SystemIdentifier objects.</param>
            <param name="currentIdentifiers">&gt;Generic list of the current system's SystemIdentifier objects.</param>
            <param name="requiredMatches">The number of required matching system identifiers.  Use SystemIdentifierValidation.REQUIRE_EXACT_MATCH to require an exact match (which is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.Validate">
            <summary>Compares the current system identifiers against the authorized system identifiers, and returns true if it successfully validates and confirms the current system's identity.</summary>
            <returns>Returns true if validation is successful, which would indicate the current systems identity is that which was authorized.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemIdentifierValidation.Validate(System.String)">
            <summary>Compares the current system identifiers against the authorized system identifiers of the specified <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type"/>, 
            and returns true if it successfully validates and confirms the identifiers have the required number of matches with the authorized system identifiers of the same type.</summary>
            <param name="identifierType">A string specifying the <see cref="P:com.softwarekey.Client.Licensing.SystemIdentifier.Type"/> to validate.</param>
            <returns>Returns true if validation is successful, which would indicate the system identifiers of the specified type were authorized.  
            If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.RequiredMatches">
            <summary>Gets or sets the number of required matching system identifiers.  Use SystemIdentifierValidation.REQUIRE_EXACT_MATCH to require an exact match (which is the default).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.AuthorizedIdentifiers">
            <summary>Gets or sets a generic list of authorized <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemIdentifierValidation.CurrentIdentifiers">
            <summary>Gets or sets a generic list of the current system's <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> objects</summary>
        </member>
        <member name="T:com.softwarekey.Client.Steg.Image.BitmapImageSteganography">
            <summary>ImageSteganogrphy implementation for Bitmap images</summary>
        </member>
        <member name="T:com.softwarekey.Client.Steg.Image.ImageSteganography">
            <summary>Base, abstract class for implementing License File aliases inside images using Steganography.</summary>
            <remarks>
            <para>
            The license data is encoded and stored in the pixel data without distorting the original image.  Currently, only
            the Bitmap image format is supported.
            </para>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_FilePath">
            <summary>The path to the image file.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_EncryptionKeyID">
            <summary>The key used in the algorithm to calculate the starting position of the payload in the image.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_PayloadStartOffset">
            <summary>The byte offset int the image pixel data where the payload begins.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_Payload">
            <summary>Contains the payload to encode.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_DecodedPayload">
            <summary>Contains the payload after it has been decoded.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_ImageData">
            <summary>The data of the entire image.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_PayLoadSize">
            <summary>The byte length of the payload data</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_IsImageLoaded">
            <summary>True if the image has been read and the data is in m_ImageData.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_SteganographyBitsPerPixel">
            <summary></summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_MinimumImageSize">
            <summary>The absolute minimum image size allowed.  Must be set in any derived class.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_MaxStartPosition">
            <summary>The maximum byte position allowed for the beginning of the payload data.  Must be set in any derived class.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_LsbBitsPerPixel">
            <summary>Number of bits per pixel when using the Least Significant Bit (LSB) method of encoding.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_VersionLsb">
            <summary>Version number when using the LSB method.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_ChecksumMax">
            <summary>The maximum bytes used in the payload data to calculate the checksum.  Must be set in any derived class.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganography.m_LastError">
            <summary>The error value.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Steg.Image.ImageSteganography"/> object.</summary>
            <param name="filePath">The absolute path to the image file.</param>
            <param name="encryptionKeyID">The Encryption Key ID from the <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object used for licensing functions.</param>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.ScanImage">
            <summary>Scan the image data for required information .</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.CalculateStartOffset">
            <summary>Calculates the starting offset from the start of the pixel data where the payload will begin.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.ReadPayload">
            <summary>Read the payload data from the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.WritePayload">
            <summary>Write the payload data to the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.WritePayload(System.Byte[])">
            <summary>Write payload data from a byte array to the image.</summary>
            <param name="payload">Byte array of payload data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.WritePayload(System.String)">
            <summary>Write payload data from a string to the image.</summary>
            <param name="payload">String containing the payload data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.DeletePayload">
            <summary>Delete the payload data from the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.EncodePayloadLSB(System.Byte[],System.Int32,System.Byte[]@,System.Int32,System.Int32)">
            <summary>Encodes data into a buffer using the Least Significant Bit (LSB) method.</summary>
            <param name="inBuffer">The buffer to encode.</param>
            <param name="inOffset">The offset byte of the inBuffer to start the encode.</param>
            <param name="outBuffer">The buffer to receive the encoded data.</param>
            <param name="outOffset">The offset byte of the outBuffer where the encoded data will begin.</param>
            <param name="length">The length of the data to encode.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.DecodePayloadLSB(System.Byte[],System.Int32,System.Byte[]@,System.Int32,System.Int32)">
            <summary>Encodes data into a buffer using the Least Significant Bit (LSB) method.</summary>
            <param name="inBuffer">The buffer to decode.</param>
            <param name="inOffset">The offset byte of the inBuffer to start the decode.</param>
            <param name="outBuffer">The buffer to receive the decoded data.</param>
            <param name="outOffset">The offset byte of the outBuffer where the decoded data will begin.</param>
            <param name="length">The length of the data to decode.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageSteganography.ReadImage">
            <summary>Reads the image file and store the byte data.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.MinimumImageSize">
            <summary>The absolute minimum image size allowed.  Must be set in any derived class.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.MaxStartPosition">
            <summary>The maximum byte position allowed for the beginning of the payload data.  Must be set in any derived class.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.LsbBitsPerPixel">
            <summary>Number of bits per pixel when using the Least Significant Bit (LSB) method of encoding.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.VersionLsb">
            <summary>Version number when using the LSB method.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.ChecksumMax">
            <summary>The maximum bytes used in the payload data to calculate the checksum.  Must be set in any derived class.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.DecodedPayloadString">
            <summary>Gets a string containing the payload data.  If the PayloadType is not Text then an empty string is returned.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageSteganography.LastError">
            <summary>The last assigned error.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.#ctor(System.String,System.String)">
            <summary>Constructor for the BitmapImageSteganography class.</summary>
            <param name="filePath">Path and name of the image file.</param>
            <param name="encryptionKeyID">Key used to calculate the payload data start position.</param>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.ScanImage">
            <summary>Scans the image data for required information.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.CalculateStartOffset">
            <summary>Calculates the starting offset from the start of the pixel data where the payload will begin.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.ReadPayload">
            <summary>Reads payload data from the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.WritePayload(System.Byte[])">
            <summary>Write payload data from a byte array to the image.</summary>
            <param name="payload">Byte array of payload data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.WritePayload(System.String)">
            <summary>Write payload data from a string to the image.</summary>
            <param name="payload">String containing the payload data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.WritePayload">
            <summary>Writes payload data to the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.DeletePayload">
            <summary>Deletes payload data from the image.</summary>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.BitmapImageSteganography.IsBitmap(System.String)">
            <summary>Checks the extension and reads in enough data from a file to detect if it is a bitmap.</summary>
            <param name="path">The path to the file.</param>
            <returns></returns>
        </member>
        <member name="T:com.softwarekey.Client.Steg.Image.ImageInfo">
            <summary>Class containing needed data from the image.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.ImageInfo.CalculatePixelDataLength">
            <summary>Calculates the length of the pixel data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.Width">
            <summary>The image width in pixels.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.Height">
            <summary>The image height in pixels.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.BitsPerPixel">
            <summary>The number of bits per pixel.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.FileLength">
            <summary>The length in bytes of the image file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.HeaderLength">
            <summary>The image header length.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.PixelDataStart">
            <summary>The byte index where the pixel data begins.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.ImageInfo.PixelDataLength">
            <summary>The length in bytes of the pixel data</summary>
        </member>
        <member name="T:com.softwarekey.Client.Steg.Image.ImageSteganographyPayloadType">
            <summary>Enumeration defining whether the payload content is text or binary data.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganographyPayloadType.Text">
            <summary>Text payload data.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Steg.Image.ImageSteganographyPayloadType.Binary">
            <summary>Binary payload data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Steg.Image.PayloadHeader">
            <summary>Class containing the payload header information.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.PayloadHeader.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.PayloadHeader.#ctor(System.Int32,System.Int16,com.softwarekey.Client.Steg.Image.ImageSteganographyPayloadType,System.Int32)">
            <summary>Constructor for the payload header information.</summary>
            <param name="checksum">Checksum used to validate the data when decoded.</param>
            <param name="version">Version number of Steganography implementation.</param>
            <param name="payloadType">The data type of the payload.</param>
            <param name="payloadLength">The length in bytes of the payload.</param>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.PayloadHeader.#ctor(System.Byte[])">
            <summary>Constructor that takes a byte.</summary>
            <param name="headerArray">Byte array containing header data.</param>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.PayloadHeader.#ctor(System.Byte[],System.Int32)">
            <summary>Constructor for the payload header information.</summary>
            <param name="headerArray">Byte array containing header data.</param>
            <param name="offset">Byte offset in the headerArray where the header data begins.</param>
        </member>
        <member name="M:com.softwarekey.Client.Steg.Image.PayloadHeader.ToArray">
            <summary>Converts the class data into byte array.</summary>
            <returns>Returns a byte array containing the required header data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.PayloadHeader.Checksum">
            <summary>Checksum used to validate the data when decoded.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.PayloadHeader.Version">
            <summary>Version number of Steganography implementation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.PayloadHeader.PayloadType">
            <summary>The data type of the payload.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.PayloadHeader.PayloadLength">
            <summary>The length in bytes of the payload.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Steg.Image.PayloadHeader.HeaderByteSize">
            <summary>The size in bytes of the header data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.KeyType">
            <summary>Enum for the different types of possible keys.</summary>  
        </member>
        <member name="T:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope">
            <summary>Loads and verifies author encryption envelopes.  These envelopes are typically issued by SOLO Server.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope"/> object, using the machine key store.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.#ctor(System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope"/> object.</summary>
            <param name="useMachineKeyStore">Default is true; set to false to use the User Key Store instead.  The User Key Store is typically best suited for desktop applications, while the machine key store is best suited for services and web applications.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.SetEnvelopeKey(System.String)">
            <summary>Sets the envelope key</summary>
            <param name="envelopeKey">The compound envelope key.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.InitializeEnvelope(System.String)">
            <summary>Initializes the data from the envelope.</summary>
            <param name="envelope">The author encryption envelope, which contains all relevant data.</param>
            <returns>Returns true when the envelope is verified, and data is initialized successfully.  If false is returned, evaluate the <see cref="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.Clear">
            <summary>Clears out previous data - THIS WILL MAKE THIS OBJECT INSTANCE UNUSABLE!</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.LastError">
            <summary>Gets the last error which occurred in this object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.EncryptionKeyID">
            <summary>Get the Encryption Key ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.ClientKey">
            <summary>Gets the Client Key object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.ServerKey">
            <summary>Gets the Server Key object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.IsEvaluation">
            <summary>Gets whether or not the envelope is for an evaluation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope.IsEvaluationExpired">
            <summary>Gets whether or not the evaluation envelope is expired.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.PredefinedCommandDirectorySets">
            <summary>Predefined sets of directories.  This is used to generate pre-defined lists of directories where commands/binaries may be located.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.PredefinedCommandDirectorySets.ApplicationDirectory">
            <summary>The same directory as the application.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.PredefinedCommandDirectorySets.UnixBin">
            <summary>Unix "bin" folders.</summary>
            <remarks>
            <para>This includes the following directories:</para>
            <list type="bullet">
                <item>/bin</item>
                <item>/usr/bin</item>
            </list>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Utils.CommandProcessor">
            <summary>Processes command-line interface (CLI) commands.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.CommandProcessor.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.CommandProcessor"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.CommandProcessor.Run">
            <summary>Runs the command.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.CommandProcessor.GeneratePredefinedDirectoryList(com.softwarekey.Client.Utils.PredefinedCommandDirectorySets)">
            <summary>Generates a list of directories where a command (or a binary to run) may be located.</summary>
            <param name="directorySet">The <see cref="T:com.softwarekey.Client.Utils.PredefinedCommandDirectorySets"/> value, indicating which set of pre-defined directories should be generated.</param>
            <returns>Returns a list of directories where a command (or a binary to run) may be located.  See the <see cref="T:com.softwarekey.Client.Utils.PredefinedCommandDirectorySets"/> enumeration for possible values that may be in the generated list.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.Arguments">
            <summary>Gets or sets the command line arguments.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.Command">
            <summary>Gets or sets the command (or the name of the binary to run).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.Directories">
            <summary>Gets or sets the list of directories in which the command (or the binary to run) is located.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.CommandPath">
            <summary>Gets the absolute path to the command.  If it is not found to be in one of the <see cref="P:com.softwarekey.Client.Utils.CommandProcessor.Directories"/>, then the <see cref="P:com.softwarekey.Client.Utils.CommandProcessor.Command"/> is returned instead.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.StandardOutput">
            <summary>Gets the standard output of the command.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.StandardError">
            <summary>Gets the standard error of the command.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.CommandProcessor.TimeOutSeconds">
            <summary>Gets or sets the number of seconds to wait before the WaitForExit method times out.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.InternetConnectionInformation">
            <summary>Tests Internet Connectivity by making a test request.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.InternetConnectionInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.InternetConnectionInformation"/> object with a specified test URL.</summary>
            <param name="testUrl">A URL to use when testing whether or not proxy authentication is required.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.#ctor(System.String,System.Int32)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.InternetConnectionInformation"/> object with a specified test URL and timeout.</summary>
            <param name="testUrl">A URL to use when testing whether or not proxy authentication is required.</param>
            <param name="testTimeout">The timeout (in milliseconds) for the test.  The default is 10000 milliseconds (or 10 seconds).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.#ctor(System.String,System.Int32,System.Net.IWebProxy)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.InternetConnectionInformation"/> object with a specified test URL, timeout, and proxy.</summary>
            <param name="testUrl">A URL to use when testing whether or not proxy authentication is required.</param>
            <param name="testTimeout">The timeout (in milliseconds) for the test.  The default is 10000 milliseconds (or 10 seconds).</param>
            <param name="proxy">The proxy server to use during the connection test.  Leave this as null to use the default system proxy (or no proxy, if no default is configured on the system).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.Initialize">
            <summary>Initializes the user proxy server information.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.InternetConnectionInformation.RunTestRequest">
            <summary>Runs a test HTTP request.</summary>
            <remarks>The HTTP header of the request does not contain a user-agent value.</remarks>
            <returns>Returns true and sets <see cref="P:com.softwarekey.Client.Utils.InternetConnectionInformation.IsConnected"/> to true if the test request was successful, or returns false and sets <see cref="P:com.softwarekey.Client.Utils.InternetConnectionInformation.IsConnected"/> if it failed.  If the request fails because proxy authentication is required, <see cref="P:com.softwarekey.Client.Utils.InternetConnectionInformation.ProxyAuthenticationRequired"/> is set to true.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.InternetConnectionInformation.IsConnected">
            <summary>Gets whether or not an Internet connection is present.  Note that this will always be true when <see cref="P:com.softwarekey.Client.Utils.InternetConnectionInformation.ProxyAuthenticationRequired"/> is true (meaning connectivity to a specific server is not verified when proxy authentication is required).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.InternetConnectionInformation.Proxy">
            <summary>Gets or sets the <see cref="T:System.Net.WebProxy"/> object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.InternetConnectionInformation.ProxyAddress">
            <summary>Gets the proxy server address (or an empty string if none is used).</summary>
            <remarks>
            <note type="caution"><para>The ProxyAddress property is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.Utils.InternetConnectionInformation.ProxyRequired">
            <summary>Gets whether or not this system is configured to use a proxy server.</summary>
            <remark>.NET Standard 2.0 automatically uses the proxy settings if available; it cannot detect if a Proxy Server is required unless proxy credentials are required.</remark>
        </member>
        <member name="P:com.softwarekey.Client.Utils.InternetConnectionInformation.ProxyAuthenticationRequired">
            <summary>Gets whether or not authentication is required by the proxy server configured for the system.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.LinuxVolumeInformation">
            <summary>Linux root volume information.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.LinuxVolumeInformation.#ctor">
            <summary>Creates a new instance of the <see cref="T:com.softwarekey.Client.Utils.LinuxVolumeInformation"/> class.</summary>
            <remarks><para>This will only retrieve data for the / (root) mount point.</para></remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.LinuxVolumeInformation.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:com.softwarekey.Client.Utils.LinuxVolumeInformation"/> class.</summary>
            <remarks><para>Retrieves information for the specified mount point.</para></remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.LinuxVolumeInformation.InitializeFstabData">
            <summary>Initializes data from /etc/fstab.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.LinuxVolumeInformation.InitializeMtabData">
            <summary>Initializes data from /etc/mtab.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.Device">
            <summary>Gets the device.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.DeviceByUuidDirectoryPath">
            <summary>Gets the device by UUID directory path.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.DriveName">
            <summary>Gets the name of the drive.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.FileSystemType">
            <summary>Gets the type of the file system.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.IdentifierData">
            <summary>Gets the identifier data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.Model">
            <summary>Gets the drive model.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.ModelFilePath">
            <summary>Gets the path of the model file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.MountPoint">
            <summary>Gets the mount point.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.MountPointFormattedForXmlAttributes">
            <summary>Gets the mount point formatted for xml attributes.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.VolumeName">
            <summary>Gets the name of the volume.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.VolumeSize">
            <summary>Gets the size of the volume.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.LinuxVolumeInformation.VolumeUuid">
            <summary>Gets the volume UUID.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.RecognizedPlatforms">
            <summary>Platforms recognized by PLUSManaged.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.FreeBSD">
            <summary>FreeBSD</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.Linux">
            <summary>Linux</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.MacOSX">
            <summary>Apple macOS</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.NetBSD">
            <summary>NetBSD</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.OpenBSD">
            <summary>OpenBSD</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.OtherUnix">
            <summary>Unknown Unix variant/derivative.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.Solaris">
            <summary>Oracle Solaris</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RecognizedPlatforms.Windows">
            <summary>Microsoft Windows</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.EnvironmentHelper">
            <summary>Provides additional information about the environment in which the application is running (beyond what is given in System.Environment).</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.FormatUnixPathForXmlAttribute(System.String)">
            <summary>Formats a path for use in XML attributes.</summary>
            <param name="path">The path to format.</param>
            <returns>Returns a string containing a path formatted for use in XML attributes.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.IsAtLeastMonoVersion(System.String)">
            <summary>Determines whether or not the application is running on a minimum or later version of Mono.</summary>
            <param name="minimumVersion">The minimum, required version.</param>
            <returns>Returns true if the version of Mono running the application is greater than or equal to the supplied version.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.IsAtLeastMonoVersion(System.Version)">
            <summary>Determines whether or not the application is running on a minimum or later version of Mono.</summary>
            <param name="minimumVersion">The minimum, required version.</param>
            <returns>Returns true if the version of Mono running the application is greater than or equal to the supplied version.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.ThrowExceptionIfNotSupported(com.softwarekey.Client.Utils.RecognizedPlatforms[])">
            <summary>Throws a <see cref="T:System.PlatformNotSupportedException"/> if the platform is not supported.</summary>
            <param name="supportedPlatforms">An array of supported platforms.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.DetermineUnixPlatform">
            <summary>If we find we are running on a Unix platform, then try to determine which platform we are running on.</summary>
            <returns>Returns the <see cref="T:com.softwarekey.Client.Utils.RecognizedPlatforms"/> enumeration value, which indicates which platform was detected.  If the platform could not be determined, <see cref="F:com.softwarekey.Client.Utils.RecognizedPlatforms.OtherUnix"/> is returned.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.EnvironmentHelper.InitializeMonoInformation">
            <summary>Initializes information about the Mono runtime that is running the application.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.EnvironmentHelper.CurrentPlatform">
            <summary>Determines the platform on which the application is running.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.EnvironmentHelper.IsRunningInMono">
            <summary>Gets whether the application is running in the Mono framework.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.EnvironmentHelper.MonoVersion">
            <summary>Gets the version of Mono being used to run the application, or returns null if the application is not running in Mono.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.EnvironmentHelper.MonoVersionString">
            <summary>Gets the complete version string from Mono, or an empty string if the application is not running in Mono.</summary>
            <remarks>
            <para>This generally contains more than just the version number, and should be similar to the
            first line you see when running the Mono -V command.  Use the <see cref="P:com.softwarekey.Client.Utils.EnvironmentHelper.MonoVersion"/> property
            if you only want the version number without any of the additional details.</para>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Utils.MacOSXVolumeInformation">
            <summary>MAC OSX root volume information.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.MacOSXVolumeInformation.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new instance of the <see cref="T:com.softwarekey.Client.Utils.MacOSXVolumeInformation"/> class.</summary>
            <param name="path">The path to the volume.</param>
            <param name="name">The name of the volume.</param>
            <param name="uuid">The volume UUID.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.MacOSXVolumeInformation.FromVolumePath(System.String)">
            <summary>Gets volume information for a given path.</summary>
            <param name="volumePath">The path to the volume.</param>
            <returns>Returns a <see cref="T:com.softwarekey.Client.Utils.MacOSXVolumeInformation"/> object, which contains information about the specified volume.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.MacOSXVolumeInformation.Initialize">
            <summary>Initialize NSApplication or AppKit stuff, it is required before calling methods of NSFileManager.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.MacOSXVolumeInformation.GetVolumeInformation(System.Object)">
            <summary>Gets the volume information of specified volume/drive NSUrl.</summary>
            <param name="nsUrl">NSUrl object, path of volume to get information.</param>
            <returns>NSDictionary.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.MacOSXVolumeInformation.FromNSDictionary(System.Object)">
            <summary>Initialize's this object's values from an NSDictionary object.</summary>
            <param name="dictionary">The NSDictionary object.</param>
        </member>
        <member name="P:com.softwarekey.Client.Utils.MacOSXVolumeInformation.VolumeUuidString">
            <summary>Gets the volume UUID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.MacOSXVolumeInformation.VolumeName">
            <summary>Gets the name of the volume.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.MacOSXVolumeInformation.VolumeNameFormattedForXmlAttributes">
            <summary>Gets the mount point formatted for xml attributes.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.MacOSXVolumeInformation.VolumePath">
            <summary>Gets the path to the volume.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.MacOSXVolumeInformation.MountedVolumeInformation">
            <summary>Gets an array of NSUrl objects for volumes presently mounted.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.NativeMethods">
            <summary>Contains methods that may be used to call native/unmanaged functions using platform invoke.</summary>
            <remarks>
            <note type="caution"><para>The NativeMethods class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.NativeMethods.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.Text.StringBuilder,System.UInt32)">
            <summary>Method for calling the GetVolumeInformation WinAPI function via platform invoke.</summary>
            <remarks><para>See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa364993.aspx"/> for additional details.</para></remarks>
            <param name="PathName">The path to the drive.</param>
            <param name="VolumeNameBuffer">The buffer for the volume name.</param>
            <param name="VolumeNameSize">The size of the volume name buffer.</param>
            <param name="VolumeSerialNumber">The volume serial number.</param>
            <param name="MaximumComponentLength">The maximum component size.</param>
            <param name="FileSystemFlags">Volume flags.</param>
            <param name="FileSystemNameBuffer">The file system name buffer.</param>
            <param name="FileSystemNameSize">The size of the file system name buffer.</param>
            <returns>Returns a non-zero value if all information is retrieved.  If zero is returned, refer to <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms679360.aspx">GetLastError</see> for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.NativeMethods.GetSystemMetrics(System.Int32)">
            <summary>Method for calling the GetSystemMetrics WinAPI function via platform invoke.</summary>
            <param name="nIndex">The system or metric setting to be retrieved.</param>
            <remarks><para>See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx"/> for additional details.</para></remarks>
            <returns>Returns 0 if the condition is false, or a non-zero value if the condition is true.</returns>
        </member>
        <member name="T:com.softwarekey.Client.Utils.RegistryViews">
            <summary>Windows registry views (requires .NET Framework 4.0 and later)</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RegistryViews.DefaultView">
            <summary>The default registry view.  If your code is running as a 32 bit program, then it will use 32 bit registry locations.  If your code is running as a 64 bit program, then it will use 64 bit registry locations.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RegistryViews.Use32BitView">
            <summary>Force the use of the 32 bit registry view (requires the application to target .NET 4.0 Framework or later).  This can be used to force a 64 bit application to use 32 bit registry locations.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.RegistryViews.Use64BitView">
            <summary>Force the use of the 64 bit registry view (requires the application to target .NET 4.0 Framework or later, and a 64 bit Windows).  This can be used to force a 32 bit application to use 64 bit registry locations.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's BIOS.</summary>
            <remarks>
            <note type="caution"><para>The BIOSInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent">
            <summary>Base class from which system component information implementations are derived.  This is designed to facilitate retrieving data about a system using Windows Management Instrumentation (WMI) queries.</summary>
            <remarks>
            <note type="caution"><para>The SystemComponent class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponent.#ctor(System.String[])">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> object, initialized with a set of specified Windows Management Instrumentation (WMI) queries.</summary>
            <param name="wmiQueries">An array of WMI queries</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponent.ExecuteQuery(System.String)">
            <summary>Executes a WMI query and populates the list of properties</summary>
            <param name="wmiQuery">The WMI query to execute</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponent.Initialize">
            <summary>Initializes this <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/>.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponent.ShouldIgnore(System.String)">
            <summary>Determines whether or not to ignore the given component property.</summary>
            <param name="value">The property value to examine.</param>
            <returns>Returns true if the property value should be ignored, or false if it should not be ignored.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponent.Properties">
            <summary>Gets a list of <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty"/> objects.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation.BIOSVersion">
            <summary>Gets the BIOSVersion property.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.BIOSInformation.SMBIOSBIOSVersion">
            <summary>Gets the SMBIOSBIOSVersion property.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.CDROMInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's CDROM/DVD drives.</summary>
            <remarks>
            <note type="caution"><para>The CDROMInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.CDROMInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.CDROMInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.CDROMInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.CDROMInformation.Names">
            <summary>Gets a list of <see cref="T:System.String"/> objects, each containing the name of a CD/DVD drive.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving basic computer system information.</summary>
            <remarks>
            <note type="caution"><para>The ComputerSystemInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which contains a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.Domain">
            <summary>Gets the computer's domain.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.Manufacturer">
            <summary>Gets the computer's manufacturer.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.Model">
            <summary>Gets the computer's model.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.ComputerName">
            <summary>Gets the computer's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ComputerSystemInformation.TotalPhysicalMemory">
            <summary>Gets the computer's total memory.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's hard drives.</summary>
            <remarks>
            <note type="caution"><para>The HardDriveInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation.Models">
            <summary>Gets a list of hard drive models.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation.SerialNumbers">
            <summary>Gets a list of hard drive serial numbers.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.HardDriveInformation.VolumeSerialNumbers">
            <summary>Gets a list of hard drive volume serial numbers.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's motherboard.</summary>
            <remarks>
            <note type="caution"><para>The MotherboardInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation.Manufacturer">
            <summary>Gets the motherboard manufacturer.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation.Product">
            <summary>Gets the motherboard product name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.MotherboardInformation.SerialNumber">
            <summary>Gets the motherboard serial number.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's network adapters.</summary>
            <remarks>
            <note type="caution"><para>The NetworkInterfaceInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation.ShouldIgnore(System.String)">
            <summary>Determines whether or not to ignore the given component property.</summary>
            <param name="value">The property value to examine.</param>
            <returns>Returns true if the component property should be ignored.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation.Names">
            <summary>Gets the list of network adapter names.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.NetworkInterfaceInformation.MACAddresses">
            <summary>Gets the list of MAC addresses.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.OperatingSystemInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's operating system</summary>
            <remarks>
            <note type="caution"><para>The OperatingSystemInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.OperatingSystemInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.OperatingSystemInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.OperatingSystemInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.OperatingSystemInformation.SerialNumber">
            <summary>Gets the operating system's serial number.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's processor (CPU)</summary>
            <remarks>
            <note type="caution"><para>The ProcessorInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.Architecture">
            <summary>Gets the processor's architecture.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.CurrentClockSpeed">
            <summary>Gets the processor's clock speed.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.ProcessorId">
            <summary>Gets the processor's ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.ProcessorType">
            <summary>Gets the processor's type.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.ProcessorInformation.Revision">
            <summary>Gets the processor's revision.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.SoundCardInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's sound cards.</summary>
            <remarks>
            <note type="caution"><para>The SoundCardInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SoundCardInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SoundCardInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SoundCardInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SoundCardInformation.ProductNames">
            <summary>Gets a list of sound card names.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty">
            <summary>Represents a property as a name/value pair of strings.</summary>
            <remarks>
            <note type="caution"><para>The SystemComponentProperty class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty"/> object, initialized with the name.</summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty"/> object, initialized with the name and value.</summary>
            <param name="name">The name of the property.</param>
            <param name="value">The property's value.</param>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty.Name">
            <summary>Gets or sets the property name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentProperty.Value">
            <summary>Gets or sets the property value.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation">
            <summary>Collection of various <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> objects, each of which contains information about the system.</summary>
            <remarks>
            <note type="caution"><para>The SystemComponentInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation"/> object, which contains information on various system components.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.BIOSInformation">
            <summary>Gets the BIOS information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.CDROMInformation">
            <summary>Gets the CD/DVD drive information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.ComputerSystemInformation">
            <summary>Gets general computer system information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.HardDriveInformation">
            <summary>Gets the hard drive information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.MotherboardInformation">
            <summary>Gets the motherboard information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.NetworkInterfaceInformation">
            <summary>Gets the network adapter information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.OperatingSystemInformation">
            <summary>Gets the operating system information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.ProcessorInformation">
            <summary>Gets the processor (CPU) information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.SoundCardInformation">
            <summary>Gets the sound card information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.UserAccountInformation">
            <summary>Gets the current user's information.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation.VideoCardInformation">
            <summary>Gets the video card information.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.UserAccountInformation">
            <summary><see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponent"/> implementation for retrieving information on the system's current user.</summary>
            <remarks>
            <note type="caution"><para>The UserAccountInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.UserAccountInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.UserAccountInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.UserAccountInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class.</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.UserAccountInformation.SID">
            <summary>Gets the user's security identifier (SID).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SystemComponent.VideoCardInformation">
            <summary>Information on the system's video cards.</summary>
            <remarks>
            <note type="caution"><para>The VideoCardInformation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.VideoCardInformation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.SystemComponent.VideoCardInformation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SystemComponent.VideoCardInformation.GetQuery">
            <summary>Gets the WMI query to pass to the base class</summary>
            <returns>Returns an array of strings, each of which is a WMI query.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SystemComponent.VideoCardInformation.Names">
            <summary>Gets the list of video card names.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.AuthorEncryptionKey">
            <summary>Class for internal encryption key data storage and use.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object, initialized with the specified envelope and envelope key data.</summary>
            <param name="envelopeKey">The Envelope Key received from SOLO Server.</param>
            <param name="envelope">The Envelope received from SOLO Server.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,System.String,System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object, initialized with the specified envelope and envelope key data.</summary>
            <param name="envelopeKey">The Envelope Key received from SOLO Server.</param>
            <param name="envelope">The Envelope received from SOLO Server.</param>
            <param name="useMachineKeyStore">Default is true; set to false to use the User Key Store instead.  The User Key Store is typically best suited for desktop applications, while the machine key store is best suited for services and web applications.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.#ctor(System.String,com.softwarekey.Client.Encryption.RsaHelper,com.softwarekey.Client.Encryption.RsaHelper)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object, initialized with pre-initialized key objects.</summary>
            <param name="encryptionKeyId">The Encryption Key ID from SOLO Server.</param>
            <param name="clientKey">The Client Key object.</param>
            <param name="serverKey">The Server Key object.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.Initialize(System.String,System.String,System.Boolean)">
            <summary>Initializes an <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object with the specified envelope and envelope key data.</summary>
            <param name="envelopeKey">The Envelope Key received from SOLO Server.</param>
            <param name="envelope">The Envelope received from SOLO Server.</param>
            <param name="useMachineKeyStore">Default is true; set to false to use the User Key Store instead.  The User Key Store is typically best suited for desktop applications, while the machine key store is best suited for services and web applications.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.Initialize(System.String,System.String,System.String,System.Boolean)">
            <summary>Initializes an <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object with the specified key data.</summary>
            <param name="encryptionKeyId">The Encryption Key ID from SOLO Server.</param>
            <param name="clientKey">The Client Key CSP blob from SOLO Server.</param>
            <param name="serverKey">The Server Key CSP blob from SOLO Server.</param>
            <param name="useMachineKeyStore">Default is true; set to false to use the User Key Store instead.  The User Key Store is typically best suited for desktop applications, while the machine key store is best suited for services and web applications.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.AuthorEncryptionKey.Clear">
            <summary>Clears out previous data - THIS WILL MAKE THIS OBJECT INSTANCE UNUSABLE!</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.ClientKey">
            <summary>Gets the Client Key object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.ServerKey">
            <summary>Gets the Server Key object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.Envelope">
            <summary>Gets the <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionEnvelope"/> object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.EncryptionKeyID">
            <summary>Gets the Encryption Key ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.LastError">
            <summary>Gets the last error (represented by a <see cref="T:com.softwarekey.Client.Licensing.LicenseError"/> object) which occurred in this object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.IsEvaluation">
            <summary>Gets whether or not the envelope being used is for an evaluation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.AuthorEncryptionKey.IsEvaluationExpired">
            <summary>Gets whether or not the envelope being used is for an evaluation which has expired.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.FileLock">
            <summary>Utility class for locking files to the current process.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.FileLock"/> object.</summary>
            <param name="filePath">The absolute path to the file which will be locked to this process.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String,com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.FileLock"/> object.</summary>
            <param name="filePath">The absolute path to the file which will be locked to this process.</param>
            <param name="deleteMode">How and if file deletion is necessary after unlocking the file (FileLockDeleteMode.Never is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.#ctor(System.String,System.Boolean,com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.FileLock"/> object.</summary>
            <param name="filePath">The absolute path to the file which will be locked to this process.</param>
            <param name="createMissing">Whether or not to create the file if it is missing. Creation occurs when attempting to lock the file with the Lock method.</param>
            <param name="deleteMode">How and if file deletion is necessary after unlocking the file (FileLockDeleteMode.Never is the default).</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.Lock">
            <summary>Locks the target file to the process.</summary>
            <returns>Returns true if successful.  If false is returned, refer to the <see cref="P:com.softwarekey.Client.Utils.FileLock.LastException"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.FileLock.Unlock">
            <summary>Unlocks the target file.</summary>
            <returns>Returns true if successful.  If false is returned, refer to the <see cref="P:com.softwarekey.Client.Utils.FileLock.LastException"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.FilePath">
            <summary>Gets the absolute path to the file which will be locked to this process.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.IsLocked">
            <summary>Gets whether or not the target file is presently locked.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.FileLock.LastException">
            <summary>Gets the last <see cref="T:System.Exception"/> that occurred (null if none occurred).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode">
            <summary>Enumeration for specifying how and if file deletion is necessary after unlocking the file.</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.Never">
            <summary>Never delete the file after unlocking it</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.WhenPossible">
            <summary>Only delete the file after unlocking it when possible</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.FileLock.FileLockDeleteMode.AlwaysRequired">
            <summary>Always require deletion of the file when unlocking it</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.IOHelper">
            <summary>Utility class for working with files, directories, and permissions.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.ToUncPath(System.String)">
            <summary>Converts a path containing a mapped drive to a UNC-formatted path.</summary>
            <param name="path">The absolute path to a network location (i.e. a location on a mapped drive).</param>
            <returns>Returns the UNC-formatted path to the network location.</returns>
            <note type="caution">This method is not supported in the .NET Standard assembly.  Attempting to call it will throw a <see cref="T:System.PlatformNotSupportedException"/>.</note>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.FilePathIsRemote(System.String)">
            <summary>Evaluates a path to determine whether it is at a network/remote location.</summary>
            <param name="path">The path to evaluate.</param>
            <returns>Returns true if the path given resides on a network resource, or false if it is on the local system/device.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DriveNotFoundException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <remarks>
            <note type="caution"><para>This function is presently only supported in Windows desktop operating systems.  Attempting to call it from any other will throw a <see cref="T:System.PlatformNotSupportedException"/>.</para></note>
            <note type="implementnotes"><para>When a valid path which includes a drive letter is given, this function will return true if it is a mapped network drive.
            When a UNC path is specified, this function always assumes it is a network/remote path (even if said path is hosted by the local device/system).</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)">
            <summary>Attempts to grant all users full control of the specified file.</summary>
            <note type="caution">
            <para>
            On Windows, this method attempts to write the license file to disk, and also attempts to give full permissions everyone
            access to this file (using <see cref="T:System.Security.Principal.WellKnownSidType">WellKnownSidType.WorldSid</see>).
            This is done to help avoid UAC issues, and is the same behavior performed by Protection PLUS 4 SDK libraries and Instant Protection PLUS 3.
            Please <see href="https://support.softwarekey.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=8&amp;nav=0,1&amp;group=csisupport" target="_blank">see our knowledge-base</see>
            for additional information.
            </para>
            <para>On Linux and macOS, this method attempts to use chmod to avoid issues with permissions when storing license files and aliases in a location shared by all users.
            However, you may need to add a reference to Mono.Posix to your Mono applications/builds for this to work.</para>
            </note>
            <note type="caution">This method is not supported in the .NET Standard assembly.  Attempting to call it will throw a <see cref="T:System.PlatformNotSupportedException"/>.</note>
            <param name="path">The absolute path to the file on which this method will attempt to alter permissions.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorldInternal(System.String)">
            <summary>Attempts to grant all users full control of the specified file.</summary>
            <note type="caution">
            <para>
            On Windows, this method attempts to write the license file to disk, and also attempts to give full permissions everyone
            access to this file (using <see cref="T:System.Security.Principal.WellKnownSidType">WellKnownSidType.WorldSid</see>).
            This is done to help avoid UAC issues, and is the same behavior performed by Protection PLUS 4 SDK libraries and Instant Protection PLUS 3.
            Please <see href="https://support.softwarekey.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=8&amp;nav=0,1&amp;group=csisupport" target="_blank">see our knowledge-base</see>
            for additional information.
            </para>
            <para>On Linux and macOS, this method attempts to use chmod to avoid issues with permissions when storing license files and aliases in a location shared by all users.
            However, you may need to add a reference to Mono.Posix to your Mono applications/builds for this to work.</para>
            </note>
            <note type="caution">
            This method does nothing in the .NET Standard 2.0 PLUSManaged assembly.   
            </note>
            <param name="path">The absolute path to the file on which this method will attempt to alter permissions.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.GetEveryoneAccountNameString">
            <summary>Uses <see cref="T:System.Security.Principal.WellKnownSidType">WellKnownSidType.WorldSid</see> to get the "Everyone" account name</summary>
            <returns>The "everyone" account name is returned.  This may vary depending on the system's regional settings.</returns>
            <note type="caution">This method is not supported in the .NET Standard assembly.  Attempting to call it will throw a <see cref="T:System.PlatformNotSupportedException"/>.</note>
        </member>
        <member name="M:com.softwarekey.Client.Utils.IOHelper.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>Gets an <see cref="T:System.Reflection.Assembly"/> object's file version in the format required by SOLO Server.</summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> from which the file version number will be retrieved.</param>
            <returns>Returns a string containing the assembly's file version number, or an empty string if the version
            could not be found, parsed, or is in a format not compatible with SOLO Server's required format (X.X.X.X,
            where X is an integer value between 0 and 99999).</returns>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SimpleNetworkTime">
            <summary>Class for performing SNTP queries.</summary>
            <remarks>
            <note type="caution">
            <para>
            This allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            <note type="caution"><para>The SimpleNetworkTime class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_host">
            <summary>The NTP server's host address</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_port">
            <summary>The NTP server's port</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_sendTimeout">
            <summary>The timeout (in milliseconds) for sending the request</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.m_receiveTimeout">
            <summary>The timeout (in milliseconds) for receiving the response</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.GetNetworkTime">
            <summary>Gets the current time from an NTP server.</summary>
            <returns>Returns the current time from an NTP server.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.DoNtpRequest">
            <summary>Processes a SNTP request.</summary>
            <returns>Returns a byte array of the data received from the SNTP request.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.SimpleNetworkTime.GetMilliseconds(System.Byte[],com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset)">
            <summary>Gets the time (in milliseconds) returned from the SNTP request</summary>
            <param name="data">The data received from the SNTP request.</param>
            <param name="eoffset">The offset to evaluate.</param>
            <returns>Returns the time (in milliseconds) returned by the NTP server.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.Host">
            <summary>Gets or sets the NTP host address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.Port">
            <summary>Gets or sets the NTP host port.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.SendTimeout">
            <summary>Gets or sets the time (in milliseconds) until a synchronous attempt to send data times out.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.SimpleNetworkTime.ReceiveTimeout">
            <summary>Gets or sets the time (in milliseconds) until a synchronous attempt to receive data times out.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset">
            <summary>Timestamp offsets</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReferenceId">
            <summary>Reference ID</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReferenceTime">
            <summary>Reference Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.OriginateTime">
            <summary>Originate Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.ReceiveTime">
            <summary>Receive Time</summary>
        </member>
        <member name="F:com.softwarekey.Client.Utils.SimpleNetworkTime.TimestampOffset.TransmitTime">
            <summary>Transmit Time</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation">
            <summary>Facilitates validating the date/time of the current system against Internet time servers (via Simple Network Time Protocol, or SNTP).</summary>
            <remarks>
            <note type="caution">
            <para>
            This class allows you to verify a system's time has not be altered by comparing it to the time on a
            specified Internet time server.  Sometimes, the availability of time servers may be somewhat unreliable
            (which is why this class allows you to specify multiple servers as fallbacks),
            and it is common for SNTP requests to be blocked by firewalls and proxy servers.
            </para>
            <para>
            Additionally, although it is technically possible to perform SNTP requests against public NTP servers
            in your application, we strongly recommend you get approval from the time server's administrators/owners
            first (as this could cause unexpected load on their time servers, which could cause problems for you and
            everyone else who might rely on them).
            </para>
            </note>
            <note type="caution"><para>The SystemDateTimeValidation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation"/> object which requires successful validation with an Internet time server (requires Internet connectivity).  The <see cref="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String)"/> method will need to be called at least once to allow validation to occur.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor(System.Boolean)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation"/> object.  The <see cref="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String)"/> method will need to be called at least once to allow validation to occur.</summary>
            <param name="validationRequired">Set to false if failure to reach an Internet time server is acceptable.  Otherwise, set to true if validation (and consequently, Internet access) is required.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.#ctor(System.Boolean,System.Double)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.SystemDateTimeValidation"/> object.  The <see cref="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String)"/> method will need to be called at least once to allow validation to occur.</summary>
            <param name="validationRequired">Set to false if failure to reach an Internet time server is acceptable.  Otherwise, set to true if validation (and consequently, Internet access) is absolutely required.</param>
            <param name="allowedVariation">The amount of time (in minutes) found acceptable for variation between the current systems date/time versus the Internet time server's date/time</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String)">
            <summary>Adds an SNTP server to the list of servers to check.</summary>
            <param name="host">The host name or IP address of the Internet time server.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check.</summary>
            <param name="host">The host name or IP address of the Internet time server.</param>
            <param name="port">The port from which the time server's NTP service may be reach (default is 123).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AddTimeServerCheck(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Add an SNTP server to the list of servers to check.</summary>
            <param name="host">The host name or IP address of the Internet time server.</param>
            <param name="port">The port from which the time server's NTP service may be reach (default is 123).</param>
            <param name="sendTimeout">The amount of time(in milliseconds) before the attempt to send the request times out (default is 1000).</param>
            <param name="receiveTimeout">The amount of time(in milliseconds) before the attempt to receive the request times out (default is 2000).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.SystemDateTimeValidation.Validate">
            <summary>Validates the current system's Date/Time against that of Internet time servers.</summary>
            <returns>Returns true if validation is successful.  If validation does not pass, check the <see cref="P:com.softwarekey.Client.Licensing.SystemValidation.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemDateTimeValidation.ValidationRequired">
            <summary>Gets or sets whether or not validation with an Internet time server is required.  Internet connectivity is required if true.  (True by default)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.SystemDateTimeValidation.AllowedVariation">
            <summary>Gets or sets the amount of time (in minutes) of acceptable variation between the current system's date/time versus the Internet time server's date/time. (5.0 by default)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.ManualRequestFile">
            <summary>Utility class for creating HTML files to simplify client manual request processing.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Utils.ManualRequestFile"/> object.</summary>
            <param name="requestData">The manual request XML data.</param>
            <param name="requestFilePath">The path to save the manual request file.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.Save">
            <summary>Saves the request file to the specified path.</summary>
            <remarks>See the <see cref="M:System.IO.File.WriteAllText(System.String,System.String)">File.WriteAllText</see> documentation for a list of exceptions which may be thrown.</remarks>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.ToString">
            <summary>Generates a string containing the request file contents.</summary>
            <returns>A string containing the request file contents.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetEncodedData(System.String)">
            <summary>Encodes XML data so it can be included in an HTML form</summary>
            <param name="requestData">The XML string to encode.</param>
            <returns>Returns encoded XML data.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetDefaultMarkupTop">
            <summary>Default Top Markup</summary>
            <returns>Returns the top markup for the default design.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.ManualRequestFile.GetDefaultMarkupBottom">
            <summary>Default Bottom Markup</summary>
            <returns>Returns the bottom markup for the default design.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestData">
            <summary>Gets or sets the Request Data.  (This should already be encrypted and signed.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestFilePath">
            <summary>Gets or sets the absolute path where the request file should be saved.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.MarkupTop">
            <summary>Gets or sets the markup prior to the form.  You may set or override this to implement a custom design.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.MarkupBottom">
            <summary>Gets or sets the markup after the form.  You may set or override this to implement a custom design.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.RequestFormUrl">
            <summary>Gets or sets the URL used in the request form, where data will be posted to in order to obtain the response document.  Set or override this if you are using the SOLO Server Dedicated URL option or purchased SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Utils.ManualRequestFile.FormMarkup">
            <summary>The markup for the form which is to be posted.  Make sure all other relevant properties are set before referencing this property.  Override this method if it is necessary to apply non-aesthetic customizations of the form (not common or recommended).</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.VirtualMachineValidation">
            <summary>Attempts to determine whether or not the application is running in a known virtual machine guest environment.  See the <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType"/> enumeration for a list of supported hypervisors.</summary>
            <remarks>
            <note type="caution">
            <para>
            This class can only detect supported hypervisors, which are documented in the
            <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType"/> enumeration.
            </para>
            </note>
            <note type="caution">
            <para>
            It is not possible to guarantee the detection of a virtual machine guest environment, as many hypervisors have
            settings (which may or may not even be officially supported or documented by the manufacturer of the hypervisor)
            which allow the hypervisor to change its behavior in ways that could make it difficult to detect.  Despite this,
            this class has been designed to avoid this kind of weakness as much as reasonably possible.  Additionally, using
            these settings for day-to-day application use is typically problematic, which makes it unlikely to encounter this
            kind of behavior (as users would not typically use such undocumented, unsupported, problematic settings).
            </para>
            </note>
            <note type="caution"><para>The VirtualMachineValidation class is not available in the .NET Standard PLUSManaged assembly.</para></note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.#ctor(com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.VirtualMachineValidation"/> object.</summary>
            <param name="sysInfo">An instance of the <see cref="T:com.softwarekey.Client.Utils.SystemComponent.SystemComponentInformation"/> class to evaluate (Windows only).</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.Validate">
            <summary>Determines if the system is running on a virtual machine.</summary>
            <remarks>
            <note type="caution">
            <para>This method runs WMI queries on Windows guests, which can take a while to run on some computers.  If you run this (Validate) method once,
            and retain the reference to the VirtualMachineValidation object, you may then use the <see cref="P:com.softwarekey.Client.Licensing.VirtualMachineValidation.IsVirtual"/> and <see cref="P:com.softwarekey.Client.Licensing.VirtualMachineValidation.Type"/>
            properties as needed to avoid making further, unnecessary WMI queries.</para>
            </note>
            <para>Failure to detect a virtual machine guest environment does not guarantee that the application is not running in one.  This function simply makes
            an effort to detect the most common hypervisors while avoiding the possibility of running into false-positives.  The guest environments this can detect include:</para>
            <list type="bullet">
                <item>Linux guests: HyperV, Parallels, VirtualBox, VMware, XenServer, KVM.</item>
                <item>macOS guests: VirtualBox, VMware.</item>
                <item>Windows guests: HyperV, Parallels, VirtualBox, VirtualPC, VMware, XenServer, KVM.</item>
            </list>
            </remarks>
            <returns>Returns true if the application is not running in a virtual machine guest environment. If a virtual machine guest environment was detected (or false is returned), check the <see cref="P:com.softwarekey.Client.Licensing.VirtualMachineValidation.Type"/> property to find which hypervisor was detected.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.ValidateLinux">
            <summary>Attempts to detect the presence of a Linux virtual machine guest environment.</summary>
            <returns>Returns false if a hypervisor was detected, or true if one was not detected.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.ValidateMacOSX">
            <summary>Attempts to detect the presence of a macOS virtual machine guest environment.</summary>
            <returns>Returns false if a hypervisor was detected, or true if one was not detected.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.ValidateWindows">
            <summary>Attempts to detect the presence of a Windows virtual machine guest environment.</summary>
            <returns>Returns false if a hypervisor was detected, or true if one was not detected.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.VirtualMachineValidation.IsVirtual">
            <summary>Gets whether the system is running on a virtual machine guest environment.  (This property should only be referenced after calling the <see cref="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.Validate"/> method once.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.VirtualMachineValidation.Type">
            <summary>Gets the type of virtual machine guest environment on which the system is running.  (This property should only be referenced after calling the <see cref="M:com.softwarekey.Client.Licensing.VirtualMachineValidation.Validate"/> method once.)</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType">
            <summary>Virtual Machine Types</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.None">
            <summary>None</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.MicrosoftHyperV">
            <summary>Microsoft Hyper V</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.VirtualPC">
            <summary>Virtual PC/Windows 10 Sandbox</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.VirtualBox">
            <summary>Virtual Box</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.VMWare">
            <summary>VMWare</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.Parallels">
            <summary>Parallels Workstation</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.XenServer">
            <summary>Xen Server</summary>
        </member>
        <member name="F:com.softwarekey.Client.Licensing.VirtualMachineValidation.VirtualMachineType.KVM">
            <summary>KVM</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService">
            <summary><see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> implementation for calling methods in SOLO Server's <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_Activation_Service.htm" target="_blank">XmlActivationService web service</see>.</summary>
            <remarks>
            <note type="implementnotes">
            <para>
            This class should only be used directly as needed for specifying customized information,
            such as different end-point URLs, proxy server access credentials, etc...  The
            <see cref="N:com.softwarekey.Client.WebService.XmlActivationService"/> namespace contains
            <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations for each
            supported web service method.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.#ctor">
            <summary>Creates a new XmlActivationService object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallation(System.String)">
            <summary>Calls the ActivateInstallation web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationAsync(System.String)">
            <summary>Begins an asynchronous call to the ActivateInstallation web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationAsync(System.String,System.Object)">
            <summary>Calls the ActivateInstallation web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.OnActivateInstallationOperationCompleted(System.Object)">
            <summary>Called when an asynchronous ActivateInstallation web method call is completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFile(System.String)">
            <summary>Calls the ActivateInstallationLicenseFile web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileAsync(System.String)">
            <summary>Calls the ActivateInstallationLicenseFile web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileAsync(System.String,System.Object)">
            <summary>Calls the ActivateInstallationLicenseFile web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.OnActivateInstallationLicenseFileOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to ActivateInstallationLicenseFile has completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatus(System.String)">
            <summary>Calls the CheckInstallationStatus web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusAsync(System.String)">
            <summary>Calls the CheckInstallationStatus web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusAsync(System.String,System.Object)">
            <summary>Calls the CheckInstallationStatus web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.OnCheckInstallationStatusOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to CheckInstallationStatus has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallation(System.String)">
            <summary>Calls the DeactivateInstallation web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationAsync(System.String)">
            <summary>Calls the DeactivateInstallation web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationAsync(System.String,System.Object)">
            <summary>Calls the DeactivateInstallation web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.OnDeactivateInstallationOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to DeactiveInstallation has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DecrementLicenseCounter(System.String)">
            <summary>Calls the DecrementLicenseCounter web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DecrementLicenseCounterAsync(System.String)">
            <summary>Calls the DecrementLicenseCounter web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DecrementLicenseCounterAsync(System.String,System.Object)">
            <summary>Calls the DecrementLicenseCounter web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.OnDecrementLicenseCounterOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to DecrementLicenseCounter has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CancelAsync(System.Object)">
            <summary>Cancels an asynchronous call to an XML Web service method (unless the call has already been completed).</summary>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.Url">
            <summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.UseDefaultCredentials">
            <summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials">System.Web.Services.Protocols.WebClientProtocol.Credentials</see> property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials">System.Net.CredentialCache.DefaultCredentials</see> property.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationCompleted">
            <summary>Occurs when a call to <see cref="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallation(System.String)"/> has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFileCompleted">
            <summary>Occurs when a call to <see cref="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.ActivateInstallationLicenseFile(System.String)"/> has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatusCompleted">
            <summary>Occurs when a call to <see cref="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.CheckInstallationStatus(System.String)"/> has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallationCompleted">
            <summary>Occurs when a call to <see cref="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DeactivateInstallation(System.String)"/> has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DecrementLicenseCounterCompleted">
            <summary>Occurs when a call to <see cref="M:com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService.DecrementLicenseCounter(System.String)"/> has completed.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventHandler">
            <summary>Delegate for handling asynchronous ActivateInstallation calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventHandler">
            <summary>Delegate for handling asynchronous ActivateInstallationLicenseFile calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFileCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventHandler">
            <summary>Delegate for handling asynchronous CheckInstallationStatus calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatusCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventHandler">
            <summary>Delegate for handling asynchronous DeactivateInstallation calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallationCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounterCompletedEventHandler">
            <summary>Delegate for handling asynchronous DecrementLicenseCounter calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounterCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounterCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounterCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService">
            <summary><see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> implementation for calling methods in SOLO Server's <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopc=Content/XML_License_File_Service.htm" target="_blank">XmlLicenseFileService web service</see>.</summary>
            <remarks>
            <note type="implementnotes">
            <para>
            This class should only be used directly as needed for specifying customized information,
            such as different end-point URLs, proxy server access credentials, etc...  The
            <see cref="N:com.softwarekey.Client.WebService.XmlLicenseFileService"/> namespace contains
            <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations for each
            supported web service method.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.#ctor">
            <summary>Creates a new XmlLicenseFileService object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFile(System.String)">
            <summary>Calls the GetLicenseFile web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileAsync(System.String)">
            <summary>Calls the GetLicenseFile web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileAsync(System.String,System.Object)">
            <summary>Calls the GetLicenseFile web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.OnGetLicenseFileOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to GetLicenseFile has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.CancelAsync(System.Object)">
            <summary>Cancels an asynchronous call to an XML Web service method (unless the call has already been completed).</summary>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.Url">
            <summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.UseDefaultCredentials">
            <summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials">System.Web.Services.Protocols.WebClientProtocol.Credentials</see> property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials">System.Net.CredentialCache.DefaultCredentials</see> property.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService.GetLicenseFileCompleted">
            <summary>Occurs when an asynchronous call to GetLicenseFile has completed.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventHandler">
            <summary>Delegate for handling asynchronous GetLicenseFile calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFileCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Licensing.WritableLicense">
            <summary>
            This is the base class from which all license implementations which must allow the application
            to write to the license file are derived.
            </summary>
            <remarks>
            <note type="caution">
            <para>
            It is <strong>very important</strong> to note that this implementation is <strong>less secure</strong> since
            it uses encryption data known to your application.  Implementing read-only License Files via the <see cref="T:com.softwarekey.Client.Licensing.License"/>
            class instead provides the highest level of  security, as it uses encryption information only known to SOLO Server.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey,System.Boolean,System.Boolean,System.Int32,System.String,System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm})">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.Licensing.WritableLicense"/> object with the cryptographic data (in the <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object), encryption options, product information, and identifier algorithms.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
            <param name="useEncryptedFile">When true, uses an encrypted License File.  (Set to true if unsure.)</param>
            <param name="useWebServiceEncryption">When try, XML web service requests are encrypted.  (Set to true if unsure.)</param>
            <param name="productId">The Product ID for the Product which is being licensed from SOLO Server.  (Set to zero (0) if you are not using SOLO Server.)</param>
            <param name="productVersion">The current version of the product (must be formatted like x.x.x.x, where each 'x' is a non-negative integer that is no longer than 5 digits).  Use an empty string to ignore the version number.</param>
            <param name="identifierAlgorithms">A generic list of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifierAlgorithm"/> objects (typically one object for each algorithm being used) to use to automatically initialize the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentIdentifiers"/> property.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.initializeFromXml(System.Xml.XmlDocument)">
            <summary>Initializes a WritableLicense from an XmlDocument</summary>
            <param name="xml">The XmlDocument containing the license data</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.Load(System.String)">
            <summary>Loads a License File from a <see cref="T:System.String"/> in memory.</summary>
            <param name="data">The License File data.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessActivateInstallationLicenseFileResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an activation XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)"/>
            method) may be processed from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XML response string</param>
            <param name="licenseContent">The License File content returned from SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessLicenseRefreshResponse(System.Xml.XmlNode,System.String@)">
            <summary>Processes an activation XML response string</summary>
            <remarks>
            <para>
            This method processes an XML response string which may be used to complete manual activation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetActivationInstallationLicenseFileRequest(System.Int32,System.String)"/>
            method) may be processed from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual activation processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <param name="licenseContent">The License File content returned from SOLO Server</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ProcessDeactivateInstallationResponse(System.Xml.XmlNode)">
            <summary>Processes a DeactivateInstallation XML response</summary>
            <remarks>
            <para>
            This method processes an XML response which may be used to complete manual deactivation processing, which is where
            the requests (generated from the <see cref="M:com.softwarekey.Client.Licensing.License.GetDeactivateInstallationRequest"/> method) may be processed
            from another computer with Internet access (if the system being licensed has no or limited Internet connectivity).
            </para>
            <note type="caution">
            <para>
            Before calling this method, set the <see cref="P:com.softwarekey.Client.Licensing.License.CurrentSessionCode"/> property (if the application
            needs to support resuming the manual status check processing after having been closed).  Immediately after calling this
            method, the <see cref="M:com.softwarekey.Client.Licensing.License.ResetSessionCode"/> method should be called to prevent replay attacks and
            brute-force attacks.
            </para>
            </note>
            </remarks>
            <param name="response">The XmlNode or XmlDocument object containing the response XML</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.GetWritableLicenseFile(System.String@)">
            <summary>Creates a writable License File.</summary>
            <param name="lfContent">The contents of the writable License File.</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.AddAlias(com.softwarekey.Client.Licensing.LicenseAlias)">
            <summary>Adds an alias, or a hidden copy of the writable License File.</summary>
            <param name="alias">The <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> which will be written and validated with this writable license.</param>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteAliases(System.Int32@,System.Int32@)">
            <summary>Writes to all alias locations.</summary>
            <param name="filesToWrite">The number of aliases.</param>
            <param name="filesWritten">The number of aliases written.</param>
            <returns>Returns true if all aliases are written to successfully.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property and the filesToWrite and filesWritten arguments for details.  Please note that each alias has its own <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property, which may also contain additional details.</returns>
            <note type="implementnotes">
            <para>You should only allow saving the aliases when the current system identifiers are valid.</para>
            </note>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteAliases(System.Int32@,System.Int32@,System.Boolean)">
            <summary>Writes to all alias locations.</summary>
            <param name="filesToWrite">The number of aliases.</param>
            <param name="filesWritten">The number of aliases written.</param>
            <param name="forceUpdate">Whether or not the aliases should be written to, even if the system appears to have been back-dated.</param>
            <returns>Returns true if all aliases are written to successfully.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property and the filesToWrite and filesWritten arguments for details.  Please note that each alias has its own <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property, which may also contain additional details.</returns>
            <note type="implementnotes">
            <para>You should only allow saving the aliases when the current system identifiers are valid.</para>
            </note>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.CheckAliases(System.Int32@,System.Int32@)">
            <summary>Checks all License File aliases.</summary>
            <param name="numToValidate">The number of aliases to validate.</param>
            <param name="numValid">The number of valid aliases (which passed the checks).</param>
            <returns>Returns true if all aliases passed validation.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError">LastError</see> property and the numToValidate and numValid arguments for details.  Please note that each alias has its own <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property, which may also contain additional details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.DeleteAliases">
            <summary>Attempts to delete all aliases.</summary>
            <returns>Returns true if all aliases passed validation.  If false is returned, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property.  Please note that each alias has its own <see cref="P:com.softwarekey.Client.Licensing.LicenseAlias.LastError"/> property, which may also contain additional details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteLicenseFile(System.String)">
            <summary>Writes a License File to the file system.</summary>
            <note type="caution">
            <para>
            This method uses the <see cref="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)"/> to try to give all users full control of the license file.  This helps
            avoid problems with the UAC in Windows, and helps avoid problems that can often be encountered when your application stores license files
            in a location that is shared by all users.
            </para>
            </note>
            <param name="path">The absolute path to the License File</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
            <note type="implementnotes">
            <para>You should only allow saving the license file when the current system identifiers are valid.</para>
            </note>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.WriteAliasToLicenseFile(com.softwarekey.Client.Licensing.LicenseAlias,System.String)">
            <summary>Overwrites a License File with an alias</summary>
            <note type="caution">
            <para>
            This method uses the <see cref="M:com.softwarekey.Client.Utils.IOHelper.GrantControlToWorld(System.String)"/> to try to give all users full control of the license file.  This helps
            avoid problems with the UAC in Windows, and helps avoid problems that can often be encountered when your application stores license files
            in a location that is shared by all users.
            </para>
            </note>
            <param name="alias">The <see cref="T:com.softwarekey.Client.Licensing.LicenseAlias"/> object that will overwrite the License File</param>
            <param name="path">The absolute path of the License File</param>
            <returns>Returns true if successful.  If this is not successful, check the <see cref="P:com.softwarekey.Client.Licensing.License.LastError"/> property for details.</returns>
            <note type="implementnotes">
            <para>You should only allow saving the license file when the current system identifiers are valid.</para>
            </note>
        </member>
        <member name="M:com.softwarekey.Client.Licensing.WritableLicense.ToXml">
            <summary>Generates an unencrypted XmlDocument containing the license file data.</summary>
            <returns>Returns an unencrypted XmlDocument containing the license file data.</returns>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LastUpdated">
            <summary>Gets the last time the license was updated (in UTC time).</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.Aliases">
            <summary>Gets the list of aliases.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseID">
            <summary>Gets or sets the License ID of the license purchased and activated.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ActivationPassword">
            <summary>Gets or sets the activation password, which is usually randomly generated by SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.QuantityOrdered">
            <summary>Gets or sets the latest version of the product available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.InstallationID">
            <summary>Gets or sets the Installation ID which uniquely identifies the activation of the current system.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.SignatureDate">
            <summary>Gets or sets the date in which the license file itself was created and signed.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.EffectiveStartDate">
            <summary>Gets or sets the date in which the license becomes effective.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.EffectiveEndDate">
            <summary>Gets or sets the date in which the license expires.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString1">
            <summary>Gets or sets the User Defined String Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString2">
            <summary>Gets or sets the User Defined String Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString3">
            <summary>Gets or sets the User Defined String Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString4">
            <summary>Gets or sets the User Defined String Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString5">
            <summary>Gets or sets the User Defined String Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString6">
            <summary>Gets or sets the User Defined String Field 6 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString7">
            <summary>Gets or sets the User Defined String Field 7 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString8">
            <summary>Gets or sets the User Defined String Field 8 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString9">
            <summary>Gets or sets the User Defined String Field 9 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedString10">
            <summary>Gets or sets the User Defined String Field 10 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate1">
            <summary>Gets or sets the User Defined Date-Time Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate2">
            <summary>Gets or sets the User Defined Date-Time Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate3">
            <summary>Gets or sets the User Defined Date-Time Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate4">
            <summary>Gets or sets the User Defined Date-Time Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedDate5">
            <summary>Gets or sets the User Defined Date-Time Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber1">
            <summary>Gets or sets the User Defined Number Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber2">
            <summary>Gets or sets the User Defined Number Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber3">
            <summary>Gets or sets the User Defined Number Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber4">
            <summary>Gets or sets the User Defined Number Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedNumber5">
            <summary>Gets or sets the User Defined Number Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat1">
            <summary>Gets or sets the User Defined Float Field 1 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat2">
            <summary>Gets or sets the User Defined Float Field 2 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat3">
            <summary>Gets or sets the User Defined Float Field 3 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat4">
            <summary>Gets or sets the User Defined Float Field 4 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.UserDefinedFloat5">
            <summary>Gets or sets the User Defined Float Field 5 value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LatestVersion">
            <summary>Gets or sets the latest version of the product available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.TriggerCode">
            <summary>Gets or sets the Trigger Code number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.TriggerCodeFixedValue">
            <summary>Gets or sets the Trigger Code Fixed Value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseCustomData">
            <summary>Gets or sets the License Custom Data, which contains custom XML or alphanumeric data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseCounter">
            <summary>Gets or sets the License Counter value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseeEmail">
            <summary>Gets or sets the licensee's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseeName">
            <summary>Gets or sets the licensee's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.LicenseUpdate">
            <summary>Gets or sets the License Update data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.SerialNumber">
            <summary>Gets the Serial Number value</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference1">
            <summary>Gets or sets the External Reference 1 value, which is a unique identifier generated by a third-party system or service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference1Source">
            <summary>Gets or sets the source of the <see cref="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference1"/> value.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference2">
            <summary>Gets or sets the External Reference 2 value, which is a unique identifier generated by a third-party system or service.</summary>
        </member>
        <member name="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference2Source">
            <summary>Gets or sets the source of the <see cref="P:com.softwarekey.Client.Licensing.WritableLicense.ExternalReference2"/> value.</summary>
        </member>
        <member name="T:com.softwarekey.Client.Utils.XmlHelper">
            <summary>Contains common XML manipulation routines.</summary>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetIso8601DateTimeNodeValue(System.Xml.XmlNode,System.String,System.DateTime@,System.Boolean)">
            <summary>Gets an XML node's ISO-8601 value and stores it to a DateTime variable (converted to local time automatically).</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The DateTime parsed from the XML node.  This will be set to <see cref="F:System.DateTime.MinValue">DateTime.MinValue</see> if parsing fails.</param>
            <param name="convertToLocalTime">Optional parameter to signify if the date is converted to local time. The default value is true.  Set to false to skip the conversion to local time.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Int32@)">
            <summary>Gets an XML node's value and stores it to an Int32 variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The Int32 value parsed from the XML node.  This will be set to 0 if parsing fails.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>Gets an XML node's value and stores it to a Boolean variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The Boolean value parsed from the XML node.  This will be set to false if parsing fails.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.Decimal@)">
            <summary>Gets an XML node's value and stores it to a decimal variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The decimal value parsed from the XML node.  This will be set to 0 if parsing fails.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.DateTime@)">
            <summary>Gets an XML node's value and stores it to an DateTime variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The DateTime value parsed from the XML node.  This will be set to DateTime.MinValue if parsing fails.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.String@)">
            <summary>Gets an XML node's value and stores it to a string variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The string value parsed from the XML node.  This will be set to an empty string ("") if parsing fails.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.String@,System.Boolean)">
            <summary>Gets an XML node's value and stores it to a string variable.</summary>
            <param name="xml">The root XML node.</param>
            <param name="xpath">The XPath of the node to parse.</param>
            <param name="value">The string value parsed from the XML node.  This will be set to an empty string ("") if parsing fails.</param>
            <param name="textOnly">When true, only retrieves the InnerText instead of the InnerXml</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.CreateDocument(System.String)">
            <summary>Creates a new, empty XML document.</summary>
            <param name="documentElementName">The tag name of the document/root element.</param>
            <returns>Returns a new XmlDocument object containing only the specified document/root element.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.String)">
            <summary>Adds a new XML element to an XML document.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The value/text in the element which will be added.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Int32)">
            <summary>Adds a new XML element to an XML document.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The integer value in the element which will be added.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Double)">
            <summary>Adds a new XML element to an XML document.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The double value in the element which will be added.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.Decimal)">
            <summary>Adds a new XML element to an XML document.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The decimal value in the element which will be added.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.String,System.DateTime)">
            <summary>Adds a new XML element to an XML document.</summary>
            <remarks>ISO-8601 formatting is used when storing the DateTime value in the XML element.</remarks>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The DateTime value in the element which will be added.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.String)">
            <summary>Adds a new XML element to an XML document's referenced node.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="element">The root XmlElement, under which the new element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The new node's string value.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Int32)">
            <summary>Adds a new XML element to an XML document's referenced node.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="element">The root XmlElement, under which the new element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The new element's integer value.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Decimal)">
            <summary>Adds a new XML element to an XML document's referenced node.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="element">The root XmlElement, under which the new element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The new node's decimal value.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.Double)">
            <summary>Adds a new XML element to an XML document's referenced node.</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="element">The root XmlElement, under which the new element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The new node's double value.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.AddNewElement(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.String,System.DateTime)">
            <summary>Adds a new XML element to an XML document's referenced node</summary>
            <param name="xml">The XmlDocument to which the element will be added.</param>
            <param name="element">The root XmlElement, under which the new element will be added.</param>
            <param name="tagName">The tag name of the element which will be added.</param>
            <param name="value">The new node's DateTime value.</param>
            <returns>Returns a reference to the newly created XmlElement.</returns>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.ImportDocument(System.Xml.XmlDocument@,System.Xml.XmlDocument)">
            <summary>Imports an xml document as a child element of the document element</summary>
            <param name="doc">The destination XmlDocument object.</param>
            <param name="docToImport">The source XmlDocument document to import.</param>
        </member>
        <member name="M:com.softwarekey.Client.Utils.XmlHelper.ImportDocument(System.Xml.XmlDocument@,System.Xml.XmlElement@,System.Xml.XmlDocument)">
            <summary>Imports an xml document as a child element of the specified element</summary>
            <param name="doc">The destination XmlDocument object.</param>
            <param name="element">The root XmlElement in the destination XmlDocument, under which the source document will be imported.</param>
            <param name="docToImport">The source XmlDocument document to import.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService">
            <summary><see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> implementation for calling methods in SOLO Server's <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlActivationService web service</see>.</summary>
            <remarks>
            <note type="implementnotes">
            <para>
            This class should only be used directly as needed for specifying customized information,
            such as different end-point URLs, proxy server access credentials, etc...  The
            <see cref="N:com.softwarekey.Client.WebService.XmlLicenseService"/> namespace contains
            <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations for each
            supported web service method.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.#ctor">
            <summary>Creates a new XmlLicenseFileService object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheck(System.Xml.XmlNode)">
            <summary>Calls the UpdateCheck web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckAsync(System.Xml.XmlNode)">
            <summary>Calls the UpdateCheck web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the UpdateCheck web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateCheckOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateCheck has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckS(System.String)">
            <summary>Calls the UpdateCheckS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckSAsync(System.String)">
            <summary>Calls the UpdateCheckS web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckSAsync(System.String,System.Object)">
            <summary>Calls the UpdateCheck web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateCheckSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateCheck has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheck(System.Xml.XmlNode)">
            <summary>Calls the InfoCheck web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckAsync(System.Xml.XmlNode)">
            <summary>Calls the InfoCheck web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the InfoCheck web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnInfoCheckOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to InfoCheck has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckS(System.String)">
            <summary>Calls the InfoCheckS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckSAsync(System.String)">
            <summary>Calls the InfoCheckS web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckSAsync(System.String,System.Object)">
            <summary>Calls the InfoCheckS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnInfoCheckSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to InfoCheckS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistration(System.Xml.XmlNode)">
            <summary>Calls the ValidateRegistration web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationAsync(System.Xml.XmlNode)">
            <summary>Calls the ValidateRegistration web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the ValidateRegistration web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnValidateRegistrationOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to ValidateRegistration has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationS(System.String)">
            <summary>Calls the ValidateRegistrationS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationSAsync(System.String)">
            <summary>Calls the ValidateRegistrationS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationSAsync(System.String,System.Object)">
            <summary>Calls the ValidateRegistration web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnValidateRegistrationSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to ValidateRegistrationS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.Register(System.Xml.XmlNode)">
            <summary>Calls the Register web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterAsync(System.Xml.XmlNode)">
            <summary>Calls the Register web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the Register web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnRegisterOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to Register has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterS(System.String)">
            <summary>Calls the RegisterS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterSAsync(System.String)">
            <summary>Calls the RegisterS web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterSAsync(System.String,System.Object)">
            <summary>Calls the RegisterS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnRegisterSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to RegisterS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistration(System.Xml.XmlNode)">
            <summary>Calls the UpdateRegistration web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationAsync(System.Xml.XmlNode)">
            <summary>Calls the UpdateRegistration web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the UpdateRegistration web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateRegistrationOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateRegistration has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationS(System.String)">
            <summary>Calls the UpdateRegistrationS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationSAsync(System.String)">
            <summary>Calls the UpdateRegistrationS web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationSAsync(System.String,System.Object)">
            <summary>Calls the UpdateRegistrationS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateRegistrationSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateRegistrationS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFields(System.Xml.XmlNode)">
            <summary>Calls the UpdateUserDefinedFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsAsync(System.Xml.XmlNode)">
            <summary>Calls the UpdateUserDefinedFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the UpdateUserDefinedFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateUserDefinedFieldsOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateUserDefinedFields has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsS(System.String)">
            <summary>Calls the UpdateUserDefinedFieldsS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsSAsync(System.String)">
            <summary>Calls the UpdateUserDefinedFieldsS web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsSAsync(System.String,System.Object)">
            <summary>Calls the UpdateUserDefinedFieldsS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateUserDefinedFieldsSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateUserDefinedFieldsS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.Add(System.Xml.XmlNode)">
            <summary>Calls the Add web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddAsync(System.Xml.XmlNode)">
            <summary>Calls the Add web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the Add web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnAddOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to Add has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddS(System.String)">
            <summary>Calls the AddS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddSAsync(System.String)">
            <summary>Calls the AddS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddSAsync(System.String,System.Object)">
            <summary>Calls the AddS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnAddSOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to AddS has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateActivationFields(System.String)">
            <summary>Calls the UpdateActivationFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateActivationFieldsAsync(System.String)">
            <summary>Calls the UpdateActivationFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateActivationFieldsAsync(System.String,System.Object)">
            <summary>Calls the UpdateActivationFields web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.OnUpdateActivationFieldsOperationCompleted(System.Object)">
            <summary>Called when an asynchronous call to UpdateActivationFields has been completed.</summary>
            <param name="arg">Event arguments.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomData(System.Xml.XmlNode)">
            <summary>Calls the GetLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataAsync(System.Xml.XmlNode)">
            <summary>Calls the GetLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the GetLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataS(System.String)">
            <summary>Calls the GetLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataSAsync(System.String)">
            <summary>Calls the GetLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataSAsync(System.String,System.Object)">
            <summary>Calls the GetLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomData(System.Xml.XmlNode)">
            <summary>Calls the UpdateLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataAsync(System.Xml.XmlNode)">
            <summary>Calls the UpdateLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataAsync(System.Xml.XmlNode,System.Object)">
            <summary>Calls the UpdateLicenseCustomData web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataS(System.String)">
            <summary>Calls the UpdateLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataSAsync(System.String)">
            <summary>Calls the UpdateLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataSAsync(System.String,System.Object)">
            <summary>Calls the UpdateLicenseCustomDataS web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.CancelAsync(System.Object)">
            <summary>Cancels an asynchronous call to an XML Web service method (unless the call has already been completed).</summary>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.Url">
            <summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UseDefaultCredentials">
            <summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials">System.Web.Services.Protocols.WebClientProtocol.Credentials</see> property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials">System.Net.CredentialCache.DefaultCredentials</see> property.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckCompleted">
            <summary>Occurs when an asynchronous call to UpdateCheck has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateCheckSCompleted">
            <summary>Occurs when an asynchronous call to UpdateCheckS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckCompleted">
            <summary>Occurs when an asynchronous call to InfoCheck has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.InfoCheckSCompleted">
            <summary>Occurs when an asynchronous call to InfoCheckS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationCompleted">
            <summary>Occurs when an asynchronous call to ValidateRegistration has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.ValidateRegistrationSCompleted">
            <summary>Occurs when an asynchronous call to ValidateRegistrationS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterCompleted">
            <summary>Occurs when an asynchronous call to Register has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.RegisterSCompleted">
            <summary>Occurs when an asynchronous call to RegisterS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationCompleted">
            <summary>Occurs when an asynchronous call to UpdateRegistration has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateRegistrationSCompleted">
            <summary>Occurs when an asynchronous call to UpdateRegistrationS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsCompleted">
            <summary>Occurs when an asynchronous call to UpdateUserDefinedFields has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateUserDefinedFieldsSCompleted">
            <summary>Occurs when an asynchronous call to UpdateUserDefinedFieldsS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddCompleted">
            <summary>Occurs when an asynchronous call to Add has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.AddSCompleted">
            <summary>Occurs when an asynchronous call to AddS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateActivationFieldsCompleted">
            <summary>Occurs when an asynchronous call to UpdateActivationFields has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataCompleted">
            <summary>Occurs when an asynchronous call to GetLicenseCustomData has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.GetLicenseCustomDataSCompleted">
            <summary>Occurs when an asynchronous call to GetLicenseCustomDataS has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataCompleted">
            <summary>Occurs when an asynchronous call to UpdateLicenseCustomData has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService.UpdateLicenseCustomDataSCompleted">
            <summary>Occurs when an asynchronous call to UpdateLicenseCustomDataS has completed.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateCheck calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckSCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateCheckS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckCompletedEventHandler">
            <summary>Delegate for handling asynchronous InfoCheck calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckSCompletedEventHandler">
            <summary>Delegate for handling asynchronous InfoCheckS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheckSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationCompletedEventHandler">
            <summary>Delegate for handling asynchronous ValidateRegistration calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationSCompletedEventHandler">
            <summary>Delegate for handling asynchronous ValidateRegistrationS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistrationSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterCompletedEventHandler">
            <summary>Delegate for handling asynchronous Register calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.RegisterCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterSCompletedEventHandler">
            <summary>Delegate for handling asynchronous RegisterS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.RegisterSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.RegisterSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateRegistration calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationSCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateRegistrationS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistrationSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateUserDefinedFields calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsSCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateUserDefinedFieldsS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateUserDefinedFieldsSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.AddCompletedEventHandler">
            <summary>Delegate for handling asynchronous Add calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.AddCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.AddCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.AddCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.AddSCompletedEventHandler">
            <summary>Delegate for handling asynchronous AddS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.AddSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.AddSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.AddSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateActivationFieldsCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateActivationFields calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateActivationFieldsCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateActivationFieldsCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateActivationFieldsCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataCompletedEventHandler">
            <summary>Delegate for handling asynchronous GetLicenseCustomData calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataSCompletedEventHandler">
            <summary>Delegate for handling asynchronous GetLicenseCustomDataS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.GetLicenseCustomDataSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateLicenseCustomData calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataSCompletedEventHandler">
            <summary>Delegate for handling asynchronous UpdateLicenseCustomDataS calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataSCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataSCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateLicenseCustomDataSCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService">
            <summary><see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> implementation for calling methods in SOLO Server's XmlNetworkFloatingService web service.</summary>
            <remarks>
            <note type="implementnotes">
            <para>
            This class should only be used directly as needed for specifying customized information,
            such as different end-point URLs, proxy server access credentials, etc...  The
            <see cref="N:com.softwarekey.Client.WebService.XmlNetworkFloatingService"/> namespace contains
            <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations for each
            supported web service method.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.#ctor">
            <summary>Creates a new XmlLicenseFileService object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.OpenSession(System.String)">
            <summary>Calls the OpenSession web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.OpenSessionAsync(System.String)">
            <summary>Calls the OpenSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.OpenSessionAsync(System.String,System.Object)">
            <summary>Calls the OpenSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.PollSession(System.String)">
            <summary>Calls the PollSession web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.PollSessionAsync(System.String)">
            <summary>Calls the PollSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.PollSessionAsync(System.String,System.Object)">
            <summary>Calls the PollSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CloseSession(System.String)">
            <summary>Calls the CloseSession web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CloseSessionAsync(System.String)">
            <summary>Calls the CloseSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CloseSessionAsync(System.String,System.Object)">
            <summary>Calls the CloseSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckoutSession(System.String)">
            <summary>Calls the CheckoutSession web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckoutSessionAsync(System.String)">
            <summary>Calls the CheckoutSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckoutSessionAsync(System.String,System.Object)">
            <summary>Calls the CheckoutSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckinSession(System.String)">
            <summary>Calls the CheckinSession web method.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <returns>Returns the XML formatted result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckinSessionAsync(System.String)">
            <summary>Calls the CheckinSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckinSessionAsync(System.String,System.Object)">
            <summary>Calls the CheckinSession web method asynchronously.</summary>
            <remarks>
            <note type="caution">
            <para>This method should not typically be called directly.  Please use the
            <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/>
            class instead.</para>
            </note>
            </remarks>
            <param name="xml">An XML formatted request string.</param>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CancelAsync(System.Object)">
            <summary>Cancels an asynchronous call to an XML Web service method (unless the call has already been completed).</summary>
            <param name="userState">The user state <see cref="T:System.Object"/>.</param>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.Url">
            <summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.UseDefaultCredentials">
            <summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials">System.Web.Services.Protocols.WebClientProtocol.Credentials</see> property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials">System.Net.CredentialCache.DefaultCredentials</see> property.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.OpenSessionCompleted">
            <summary>Occurs when an asynchronous call to OpenSession has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.PollSessionCompleted">
            <summary>Occurs when an asynchronous call to PollSession has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CloseSessionCompleted">
            <summary>Occurs when an asynchronous call to CloseSession has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckoutSessionCompleted">
            <summary>Occurs when an asynchronous call to CheckoutSession has completed.</summary>
        </member>
        <member name="E:com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService.CheckinSessionCompleted">
            <summary>Occurs when an asynchronous call to CheckinSession has completed.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSessionCompletedEventHandler">
            <summary>Delegate for handling asynchronous OpenSession calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSessionCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSessionCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSessionCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSessionCompletedEventHandler">
            <summary>Delegate for handling asynchronous PollSession calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSessionCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSessionCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSessionCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSessionCompletedEventHandler">
            <summary>Delegate for handling asynchronous CloseSession calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSessionCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSessionCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSessionCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSessionCompletedEventHandler">
            <summary>Delegate for handling asynchronous CheckoutSession calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSessionCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSessionCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSessionCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSessionCompletedEventHandler">
            <summary>Delegate for handling asynchronous CheckinSession calls.</summary>
            <param name="sender">The <see cref="T:System.Object"/> which is calling the delegate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSessionCompletedEventArgs">
            <summary>Class containing arguments for the <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSessionCompletedEventHandler"/> delegate.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSessionCompletedEventArgs.Result">
            <summary>The Xml formatted result.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebFormCallHttpMethod">
            <summary>HTTP method verbs supported by WebFormCall implementations.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebFormCallHttpMethod.Get">
            <summary>Standard HTTP GET.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebFormCallHttpMethod.Post">
            <summary>Standard HTTP POST.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.IWebServiceCall">
            <summary>Interface implemented for all <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> implementations.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.IWebServiceCall.GeneratePlainTextRequest">
            <summary>Generates a plain-text web service request XML string.</summary>
            <returns>Returns the plain-text web service request XML string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.IWebServiceCall.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlDocument or root XmlNode object of the web service response.</param>
            <returns>Returns true if processing is successful.</returns>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebServiceCall">
            <summary>
            <para>The base/abstract class from which all WebServiceCall implementations are derived.  Key functions of this class include:
            <list type="bullet">
                <item>Signing and encrypting web service requests.</item>
                <item>Decrypting and verifying web service responses.</item>
                <item>Validation of session codes (to prevent replay attacks).</item>
                <item>Providing a common means in which web service requests may be generated and responses may be processed, regardless of whether or not direct Internet connectivity is being used.</item>
            </list>
            </para>
            <para>Web services presently implemented include:
            <list type="table">
                <listheader>
                    <term>Name</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term><see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService</see></term>
                    <description>Includes methods for Electronic License Activation, status checking, and deactivation.</description>
                </item>
                <item>
                    <term><see href="https://secure.softwarekey.com/solo/authors/manual/#XML_License_File_Service.htm" target="_blank">XmlLicenseFileService</see></term>
                    <description>Used for retrieving and refreshing License Files electronically.</description>
                </item>
                <item>
                    <term><see href="https://secure.softwarekey.com/solo/authors/manual/#XML_License_Service.htm" target="_blank">XmlLicenseService</see></term>
                    <description>Used for retrieving and sending license data (such as checks for product updates, customer registration, etc...).</description>
                </item>
                <item>
                    <term><see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Network_Floating_Service.htm" target="_blank">XmlNetworkFloatingService</see></term>
                    <description>Used for SOLO Server-based Network Floating licensing implementations.  This allows limiting the number
                    of concurrent users/open sessions, status checking, closing sessions, and provides a means to "check-out" sessions for
                    off-line use (when allowed) and to "check-in" any checked-out sessions when off-line use is no longer required.         
                    </description>
                </item>
            </list>
            </para>
            <remarks>
            <note>
            By default, the .NET Framework sets the user-agent in the HTTP header to "Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol x.x.x.x)" where x.x.x.x is the version of the common language runtime.
            It is possible to specify the user-agent value when using the web service references by modifying the 
            <see href="https://docs.microsoft.com/en-us/dotnet/api/system.web.services.protocols.httpwebclientprotocol.useragent" target="_blank">HttpWebClientProtocol.UserAgent</see> property .
            </note>
            </remarks>
            </summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.#ctor(System.String,System.String,System.Web.Services.Protocols.SoapHttpClientProtocol,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.WebServiceCall"/> object.</summary>
            <param name="className">The name of the web service client class.</param>
            <param name="methodName">The name of the web service method to be called.</param>
            <param name="client">For .NET Framework, the System.Web.Services.Protocols.SoapHttpClientProtocol object used to make the web service method calls.
            When using the .NET Standard 2.0 assembly, the XmlWebService object used to make the web service method calls.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object, which is required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.GeneratePlainTextRequest">
            <summary>Generates a plain-text web service call XML request string.</summary>
            <returns>Returns the plain-text web service call XML request string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.InvokeMethod(System.String)">
            <summary>Invokes the web service method.</summary>
            <param name="xml">The XML input.</param>
            <returns>The XML result.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.GenerateEncryptedRequest">
            <summary>Generates an encrypted web service call XML request string.</summary>
            <returns>Returns the encrypted web service call XML request string.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ResetSessionCode">
            <summary>Sets the SessionCode value to a new, randomized value.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ProcessResponse(System.String@)">
            <summary>Processes a web service response XML string.</summary>
            <param name="response">The response XML string.</param>
            <returns>Returns true if successful.  If not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response XML.</summary>
            <param name="response">XmlNode object reference, which references the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ValidateWebServiceResponseFormat(System.Xml.XmlNode)">
            <summary>Verifies the format of the response received is such that expected and required content can be found and parsed.</summary>
            <param name="response">The <see cref="T:System.Xml.XmlNode"/> containing the web service response.</param>
            <returns>True if the element is found, otherwise false.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService">
            <summary>Calls the web service method.</summary>
            <returns>Returns true if successful.  If not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.ParseSOLOServerStatus(System.String)">
            <summary>Parses a status string returned by SOLO Server web services.</summary>
            <param name="value">The SOLO Server status string.</param>
            <returns>Returns a <see cref="T:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus"/> enumeration value representing the status of the License ID in SOLO Server.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.AppendSessionCode(System.String)">
            <summary>Appends the SessionCode value to an XML request string depending on the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCodeValidation"/> setting, and returns the updated XML string</summary>
            <param name="xml">The plain-text XML request string.</param>
            <returns>Returns true if successful.  If not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.WebServiceCall.AppendSessionCode(System.Xml.XmlDocument)">
            <summary>Appends the SessionCode value to an XmlDocument depending on the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCodeValidation"/> setting, and returns the updated XML string</summary>
            <param name="xml">The plain-text request XmlDocument.</param>
            <returns>Returns true if successful.  If not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.EncryptionKey">
            <summary>Gets or sets the author encryption key data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ClassName">
            <summary>Gets or sets the class name of the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceClient"/> object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.MethodName">
            <summary>Gets or sets the name of the method which will be called from the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceClient"/> object.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ResultCode">
            <summary>Gets or sets the result code returned by the web service method call.  (See <see href="http://www.softwarekey.com/go/?ID=20" target="_blank">http://www.softwarekey.com/go/?ID=20</see> for a list of possible values.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.ErrorMessage">
            <summary>Gets or sets the error message returned by the web service method call.  (See <see href="http://www.softwarekey.com/go/?ID=20" target="_blank">http://www.softwarekey.com/go/?ID=20</see> for a list of possible values.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.LastError">
            <summary>Gets or sets the last error which occurred.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceClient">
            <summary>Gets or sets the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> object (.NET Framework) or the XmlWebService object (.NET Standard 2.0) used to perform the web service method call.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption">
            <summary>Gets or sets whether or not encryption is to be used or is required for the web service call.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.UseDigitalSignature">
            <summary>Gets or sets whether or not a digital signature is to be used or is required for the web service call.  (This can only be set to false if <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption"/> is already set to false.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.WebServiceResponse">
            <summary>Gets or set the XmlNode object reference for the root XML node of the web service response.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCode">
            <summary>Gets or sets the randomized session code (used to deter replay attacks).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.SessionCodeValidation">
            <summary>Gets or sets whether or not session code validation should be done automatically.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.WebServiceCall.RequireSsl">
            <summary>Gets or sets whether or not SSL certificate validation to check.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation">
            <summary>Session Validation Levels</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.None">
            <summary>Do not use session validation.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.WhenAvailable">
            <summary>Only use session validation when available.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SessionValidation.Required">
            <summary>Always require the use of session validation and require it (recommended).</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus">
            <summary>Possible SOLO Server license status values.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.OK">
            <summary>The License ID valid or "OK."</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Duplicate">
            <summary>The License ID is a duplicate.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Fraud">
            <summary>The License ID has been determined to be part of a fraudulent order.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Expired">
            <summary>The License ID has expired.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Check">
            <summary>The License ID is not valid, and requires review.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Upgrade">
            <summary>The License ID has been upgraded to another License ID.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Void">
            <summary>The License ID has been cancelled or voided, or is part of an order which has been cancelled or voided.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Returned">
            <summary>The License ID has been returned, or is part of an order which has been returned.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Delete">
            <summary>The License ID has been marked for deletion by a system administrator, and will soon be unavailable.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.WebServiceCall.SOLOServerLicenseStatus.Unknown">
            <summary>An unknown or unrecognized status is present.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation">
             <summary>Implements the XmlActivationService web service's ActivateInstallation method, which activates and retrieves an Installation ID.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>If you wish to call these web services for PLUSManaged License implementations, we recommend you use the
             <see cref="M:com.softwarekey.Client.Licensing.License.ActivateOnline(System.Int32,System.String,System.String)">License.ActivateOnline</see> method, which implements this call for you.</para>
             </note>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be activated with this method must have the "Issue Installation ID" option enabled.  Please refer to the <see href="https://secure.softwarekey.com/solo/authors/manual/#Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, some properties must be set:</para>
             <list type="bullet">
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.LicenseID"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.Password"/>, or <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.SerialNumber"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductID"/>.</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode1"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode2"/> (the default values will suffice unless you are using <see cref="N:com.softwarekey.Client.Compatibility.ProtectionPLUS4">Protection PLUS 4 compatibility</see> features).</item>
             </list>
             </note>
             <note type="implementnotes">
             <para>Properties strongly recommended to have set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method include:</para>
             <list type="bullet">
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ActivationData"/>, which includes the system identification data.  This can be generated via the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductID"/>, which having set as valid (non-zero) Product ID will result in SOLO Server validating that the License ID being activated is for the specified Product ID.  This is an important mechanism for preventing someone from activating the wrong product (or activated "Product A" with a license for "Product B", for example).</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.InstallationName"/>, which may be used to specify a friendly name for the Installation ID issued during activation.  This could include a user-specified name, or a name of your choosing (such as the computer name or username).</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersion"/>, which you may use to identify which version of your product is being activated.  This can be very helpful for support and troubleshooting purposes.</item>
             </list>
             </note>
             <example>This example shows how to make a typical activation call for a PLUSManaged license:
             <code language="cs">
             public bool Activate(AuthorEncryptionKey encryptionKey,
                 Int32 licenseId, string password, Int32 productID,
                 string installationName, List&lt;SystemIdentifier&gt; currentIdentifiers,
                 ref LicenseError lastError)
             {
                 ActivateInstallation ws = new ActivateInstallation(encryptionKey);
                 ws.LicenseID = licenseId;
                 ws.Password = password;
                 ws.ProductID = productID;
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version;
                 ws.InstallationName = installationName;
                 if (currentIdentifiers.Count &gt; 0)
                     ws.ActivationData = SystemIdentifier.GenerateActivationDataXml(currentIdentifiers);
                 
                 XmlActivationService client = new XmlActivationService();
                 // If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 // set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     lastError = ws.LastError;
                     return false;
                 }
            
                 //TODO: Store the new Installation ID from the value in the ws.InstallationID property
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function Activate(ByVal encryptionKey As AuthorEncryptionKey, ByVal licenseId As Int32, _
                 ByVal password As String, ByVal productID As Int32, _
                 ByVal installationName As String, ByVal currentIdentifiers As List(Of SystemIdentifier), _
                 ByRef lastError As LicenseError) As Boolean
                 
                 Dim ws As New ActivateInstallation(encryptionKey)
                 ws.LicenseID = licenseId
                 ws.Password = password
                 ws.ProductID = productID
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version
                 ws.InstallationName = installationName
                 If currentIdentifiers.Count &gt; 0 Then
                     ws.ActivationData = SystemIdentifier.GenerateActivationDataXml(currentIdentifiers)
                 End If
                 
                 Dim client As New XmlActivationService()
                 ' If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 ' set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     lastError = ws.LastError
                     Return False
                 End If
            
                 ' TODO: Store the new Installation ID from the value in the ws.InstallationID property
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> object.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> object.</summary>
            <param name="client">The XmlActivationService object used to perform the web service method call.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for ActivateInstallation calls.</summary>
            <returns>Returns the plain-text XML request string for ActivateInstallation calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlNode reference to the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.LicenseID">
            <summary>Gets or sets the License ID, which is required for License ID and Password validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.Password">
            <summary>Gets or sets password, which is required for License ID and Password validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.SerialNumber">
            <summary>Gets or sets the serial number.  This is only required when using serial number and Product ID validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductID">
            <summary>Gets or sets the Product ID.  When the value is non-zero, the Product ID in SOLO Server will be validated against the product for which the License ID was issued.  This is only required when using serial number and Product ID validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProdOptionID">
            <summary>Gets or sets the Product Option ID.  When the value is non-zero, the Product Option ID in SOLO Server will be validated against the product for which the License ID was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode1">
            <summary>Gets or sets User Code 1.  Although the web service requires a non-zero value in this field, this property is only relevant if you are using Protection PLUS 4 (where it is also referred to as the "Session Code") "Trigger Code" compatibility features.  (The default value will suffice if you are not using these features.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.UserCode2">
            <summary>Gets or sets User Code 2.  Although the web service requires a non-zero value in this field, this property is only relevant if you are using Protection PLUS 4 (where it is also referred to as the "Computer ID") "Trigger Code" compatibility features.  (The default value will suffice if you are not using these features.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RegistrationKey1">
            <summary>Gets or sets Activation Code 1.  This is also known as "RegKey1" in Protection PLUS 4, and will be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the response successfully.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RegistrationKey2">
            <summary>Gets or sets Activation Code 2.  This is also known as "RegKey2" in Protection PLUS 4, and may be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the response successfully.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.RequireRegistration">
            <summary>Gets or sets whether or not customer registration is required for activation.   Customer registration is where the customer enters information (such as name, email, address, etc...) about himself or herself with SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.InstallationName">
            <summary>Gets or sets the Installation Name, which may be a name of your choice or the user's choice.  You may opt to use things like a username or computer name here, or you may also allow the user to specify a friendly name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.InstallationID">
            <summary>Gets or sets the Installation ID, which is a unique identifier for the given activation which was issued.  If you specify the Installation ID of a prior activation, SOLO Server will show that the specified Installation ID is related to the new Installation ID (if issued).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersion">
            <summary>Gets or sets the product version number, which is optional.  When set, this must be formatted like NNNNN.NNNNN.NNNNN.NNNNN format, where N represents a digit.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersionNumber">
            <summary>Gets or sets the product version number, which is optional.  This corresponds with the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ProductVersion">ProductVersion</see> property, but uses the System.Version class to create the ProductVersion string.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation.ActivationData">
            <summary>Gets or sets the Activation Data document, which contains the SystemIdentifier information.  This field is optional, but recommended.  This document may be generated using the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile">
             <summary>Implements the XmlActivationService web service's ActivateInstallationLicenseFile method, which activates, retrieves an Installation ID, and retrieves a signed License File.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>If you wish to call these web services for PLUSManaged License implementations, we recommend you use the
             <see cref="M:com.softwarekey.Client.Licensing.License.ActivateInstallationLicenseFile(System.Int32,System.String,System.String,System.String@)">License.ActivateInstallationLicenseFile</see> method, which implements this call for you.</para>
             </note>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be activated with this method must have the "Issue Installation ID" option enabled.  Please refer to the <see href="https://secure.softwarekey.com/solo/authors/manual/#Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="caution">
             <para>After activating successfully, the raw contents of the License File from SOLO Server are available in the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseFileContents"/> property.
             Once this data is available to you, it is recommended that you save the License File contents so that the data is available to your application.  Additionally, if you are using
             a PLUSManaged License implementation, you may use the <see cref="M:com.softwarekey.Client.Licensing.License.Load(System.String)">License.Load</see> method (when using Read-Only License Files)
             or the <see cref="M:com.softwarekey.Client.Licensing.WritableLicense.Load(System.String)">WritableLicense.Load</see> method (for writable License Files) to update the license properties with
             the data from new data in <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseFileContents"/>.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, some properties must be set:</para>
             <list type="bullet">
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseID"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.Password"/>, or <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.SerialNumber"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductID"/>.</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode1"/> and <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode2"/> (the default values will suffice unless you are using <see cref="N:com.softwarekey.Client.Compatibility.ProtectionPLUS4">Protection PLUS 4 compatibility</see> features).</item>
             </list>
             </note>
             <note type="implementnotes">
             <para>Properties strongly recommended to have set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService">CallWebService</see> method include:</para>
             <list type="bullet">
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ActivationData"/>, which includes the system identification data.  This can be generated via the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductID"/>, which having set as valid (non-zero) Product ID will result in SOLO Server validating that the License ID being activated is for the specified Product ID.  This is an important mechanism for preventing someone from activating the wrong product (or activated "Product A" with a license for "Product B", for example).</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.InstallationName"/>, which may be used to specify a friendly name for the Installation ID issued during activation.  This could include a user-specified name, or a name of your choosing (such as the computer name or username).</item>
                 <item><see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersion"/>, which you may use to identify which version of your product is being activated.  This can be very helpful for support and troubleshooting purposes.</item>
             </list>
             </note>
             <example>This example shows how to make a typical activation call for a PLUSManaged license:
             <code language="cs">
             public bool ActivateLicenseFile(AuthorEncryptionKey encryptionKey,
                 Int32 licenseId, string password, Int32 productID,
                 string installationName, List&lt;SystemIdentifier&gt; currentIdentifiers,
                 ref LicenseError lastError)
             {
                 ActivateInstallationLicenseFile ws = new ActivateInstallationLicenseFile(encryptionKey);
                 ws.LicenseID = licenseId;
                 ws.Password = password;
                 ws.ProductID = productID;
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version;
                 ws.InstallationName = installationName;
                 if (currentIdentifiers.Count &gt; 0)
                     ws.ActivationData = SystemIdentifier.GenerateActivationDataXml(currentIdentifiers);
                 
                 XmlActivationService client = new XmlActivationService();
                 //If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server, set the
                 // client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     lastError = ws.LastError;
                     return false;
                 }
            
                 //TODO: Store the new Installation ID from the value in the ws.InstallationID property
                 
                 //TODO: Save the contents of the License File (in ws.LicenseFileContents) to disk.  This can be done with
                 //      a call to <see cref="M:System.IO.File.WriteAllText(System.String,System.String)">File.WriteAllText</see>.
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function ActivateLicenseFile(ByVal encryptionKey As AuthorEncryptionKey, ByVal licenseId As Int32, _
                 ByVal password As String, ByVal productID As Int32, _
                 ByVal installationName As String, ByVal currentIdentifiers As List(Of SystemIdentifier), _
                 ByRef lastError As LicenseError) As Boolean
                 
                 Dim licenseContents As String = ""
                 Dim ws As New ActivateInstallationLicenseFile(encryptionKey)
                 ws.LicenseID = licenseId
                 ws.Password = password
                 ws.ProductID = productID
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version
                 ws.InstallationName = installationName
                 If currentIdentifiers.Count &gt; 0 Then
                     ws.ActivationData = SystemIdentifier.GenerateActivationDataXml(currentIdentifiers)
                 End If
                 
                 Dim client As New XmlActivationService()
                 'If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server, set the
                 ' client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     lastError = ws.LastError
                     Return False
                 End If
            
                 'TODO: Store the new Installation ID from the value in the ws.InstallationID property
                 'TODO: Save the contents of the License File (in ws.LicenseFileContents) to disk.  This can be done with
                 '      a call to <see cref="M:System.IO.File.WriteAllText(System.String,System.String)">File.WriteAllText</see>.
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/> object.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/> object.</summary>
            <param name="client">The XmlActivationService object used to perform the web service method call.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for ActivateInstallationLicenseFile calls.</summary>
            <returns>Returns the plain-text XML request string for ActivateInstallationLicenseFile calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlNode reference to the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError">LastError</see> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseID">
            <summary>Gets or sets the License ID, which is required for License ID and Password validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.Password">
            <summary>Gets or sets password, which is required for License ID and Password validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.SerialNumber">
            <summary>Gets or sets the serial number.  This is only required when using serial number and Product ID validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductID">
            <summary>Gets or sets the Product ID.  When the value is non-zero, the Product ID in SOLO Server will be validated against the product for which the License ID was issued.  This is only required when using serial number and Product ID validation.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProdOptionID">
            <summary>Gets or sets the Product Option ID.  When the value is non-zero, the Product Option ID in SOLO Server will be validated against the product for which the License ID was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode1">
            <summary>Gets or sets User Code 1.  Although the web service requires a non-zero value in this field, this property is only relevant if you are using Protection PLUS 4 (where it is also referred to as the "Session Code") "Trigger Code" compatibility features.  (The default value will suffice if you are not using these features.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.UserCode2">
            <summary>Gets or sets User Code 2.  Although the web service requires a non-zero value in this field, this property is only relevant if you are using Protection PLUS 4 (where it is also referred to as the "Computer ID") "Trigger Code" compatibility features.  (The default value will suffice if you are not using these features.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RegistrationKey1">
            <summary>Gets or sets Activation Code 1.  This is also known as "RegKey1" in Protection PLUS 4, and will be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the response successfully.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RegistrationKey2">
            <summary>Gets or sets Activation Code 2.  This is also known as "RegKey2" in Protection PLUS 4, and may be populated with a Protection PLUS 4 compatible activation code (or "Trigger Code") after processing the response successfully.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.RequireRegistration">
            <summary>Gets or sets whether or not customer registration is required for activation.   Customer registration is where the customer enters information (such as name, email, address, etc...) about himself or herself with SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.InstallationName">
            <summary>Gets or sets the Installation Name, which may be a name of your choice or the user's choice.  You may opt to use things like a username or computer name here, or you may also allow the user to specify a friendly name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.InstallationID">
            <summary>Gets or sets the Installation ID, which is a unique identifier for the given activation which was issued.  If you specify the Installation ID of a prior activation, SOLO Server will show that the specified Installation ID is related to the new Installation ID (if issued).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersion">
            <summary>Gets or sets the product version number, which is optional.  When set, this must be formatted like NNNNN.NNNNN.NNNNN.NNNNN format, where N represents a digit.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersionNumber">
            <summary>Gets or sets the product version number, which is optional.  This corresponds with the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ProductVersion">ProductVersion</see> property, but uses the System.Version class to create the ProductVersion string.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.ActivationData">
            <summary>Gets or sets the Activation Data document, which contains the SystemIdentifier information.  This field is optional, but recommended.  This document may be generated using the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile.LicenseFileContents">
            <summary>Gets or sets the License File contents returned from SOLO Server.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus">
             <summary>Implements the XmlActivationService web service's CheckInstallationStatus method to validate the status of an Installation ID.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>If you wish to call these web services for PLUSManaged License implementations, we recommend you use the
             <see cref="M:com.softwarekey.Client.Licensing.License.CheckInstallationStatus">License.CheckInstallationStatus</see> method, which implements this call for you.</para>
             </note>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be validated with this method must have the
             "Issue Installation ID" option enabled, and must be activated with <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> or
             <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>.  Please refer to the
             <see href="https://secure.softwarekey.com/solo/authors/manual/#Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.InstallationID"/> property must be set.</para>
             </note>
             <example>This example shows how to make a typical activation call for a PLUSManaged license:
             <code language="cs">
             public bool CheckInstallation(AuthorEncryptionKey encryptionKey,
                 string installationId, ref LicenseError lastError)
             {
                 //make sure we have an Installation ID to use first
                 if (string.IsNullOrEmpty(installationId))
                 {
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED);
                     return false;
                 }
                 
                 CheckInstallationStatus ws = new CheckInstallationStatus(encryptionKey);
                 ws.InstallationID = installationId;
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version;
                 
                 XmlActivationService client = new XmlActivationService();
                 // If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 // set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     //If you wish to revoke the local license when web-based validation fails, you can add code to do so here.
                     lastError = ws.LastError;
                     return false;
                 }
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function CheckInstallation(ByVal encryptionKey As AuthorEncryptionKey, _
                 ByVal installationId As String, ByRef lastError As LicenseError) As Boolean
                 
                 //make sure we have an Installation ID to use first
                 If String.IsNullOrEmpty(installationId) Then
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED)
                     Return False
                 End If
             
                 Dim ws As New CheckInstallationStatus(encryptionKey)
                 ws.InstallationID = installationId
                 ws.ProductVersionNumber = System.Reflection.Assembly.GetCallingAssembly().GetName().Version
                 
                 Dim client As New XmlActivationService()
                 'If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 ' set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     'If you wish to revoke the local license when web-based validation fails, you can add code to do so here.
                     lastError = ws.LastError
                     Return False
                 End If
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus"/> object.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus"/> object.</summary>
            <param name="client">The XmlActivationService object used to perform the web service method call.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for CheckInstallationStatus calls.</summary>
            <returns>Returns the plain-text XML request string for CheckInstallationStatus calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlNode reference to the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.InstallationID">
            <summary>Gets or sets the Installation ID (required), which is a unique identifier for the given activation which was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProductVersion">
            <summary>Gets or sets the product version number, which is optional.  When set, this must be formatted like NNNNN.NNNNN.NNNNN.NNNNN format, where N represents a digit.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProductVersionNumber">
            <summary>Gets or sets the product version number, which is optional.  This corresponds with the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ProductVersion"/> property, but uses the System.Version class to create the ProductVersion string.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ActivationData">
            <summary>The Activation Data document, which contains the SystemIdentifier information.  This field is optional, but recommended.  This document may be generated using the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.Log">
            <summary>Gets or sets the optional XmlDocument containing metering usage log data.  (This is for Instant Metering users.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.CheckInstallationStatus.ExpirationDate">
            <summary>Gets the Installation/License's expiration date from SOLO Server.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation">
             <summary>Implements the XmlActivationService web service's DeactivateInstallation method to validate the status of an Installation ID.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>If you wish to call these web services for PLUSManaged License implementations, we recommend you use the
             <see cref="M:com.softwarekey.Client.Licensing.License.DeactivateInstallation">License.DeactivateInstallation</see> method, which implements this call for you.</para>
             </note>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be validated with this method must have the
             "Issue Installation ID" option enabled, and must be activated with <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> or
             <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>.  Please refer to the
             <see href="https://secure.softwarekey.com/solo/authors/manual/#Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.InstallationID"/> property must be set.</para>
             </note>
             <example>This example shows how to make a typical deactivation call for a Protection PLUS 5 license:
             <code language="cs">
             public bool Deactivate(AuthorEncryptionKey encryptionKey,
                 string installationId, ref LicenseError lastError)
             {
                 //make sure we have an Installation ID to use first
                 if (string.IsNullOrEmpty(installationId))
                 {
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED);
                     return false;
                 }
                 
                 DeactivateInstallation ws = new DeactivateInstallation(encryptionKey);
                 ws.InstallationID = installationId;
                 
                 XmlActivationService client = new XmlActivationService();
                 // If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 // set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     //If you wish to revoke the local license, you can add code to do so here.
                     lastError = ws.LastError;
                     return false;
                 }
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function Deactivate(ByVal encryptionKey As AuthorEncryptionKey, _
                 ByVal installationId As String, ByRef lastError As LicenseError) As Boolean
                 
                 //make sure we have an Installation ID to use first
                 If String.IsNullOrEmpty(installationId) Then
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED)
                     Return False
                 End If
             
                 Dim ws As New DeactivateInstallation(encryptionKey)
                 ws.InstallationID = installationId
                 
                 Dim client As New XmlActivationService()
                 'If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 ' set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     'If you wish to revoke the local license, you can add code to do so here.
                     lastError = ws.LastError
                     Return False
                 End If
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation"/> object.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation"/> object.</summary>
            <param name="client">The XmlActivationService object used to perform the web service method call.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for DeactivateInstallation calls</summary>
            <returns>Returns the plain-text XML request string for DeactivateInstallation calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlNode reference to the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DeactivateInstallation.InstallationID">
            <summary>Gets or sets the Installation ID (required), which is a unique identifier for the given activation which was issued.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter">
             <summary>Implements the XmlActivationService web service's DecrementLicenseCounter method to decrement the License Counter value of a license.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#XML_Activation_Service.htm" target="_blank">XmlActivationService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be validated with this method must have the
             "Issue Installation ID" option enabled, and must be activated with <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> or
             <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>.  Please refer to the
             <see href="https://secure.softwarekey.com/solo/authors/manual/#Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.InstallationID"/> property must be set.</para>
             </note>
             <example>This example shows how to make a typical activation call for a PLUSManaged license:
             <code language="cs">
             public bool DecrementLicenseCounterOnline(AuthorEncryptionKey encryptionKey,
                 string installationId, ref licenseCounter, ref LicenseError lastError)
             {
                 //make sure we have an Installation ID to use first
                 if (string.IsNullOrEmpty(installationId))
                 {
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED);
                     return false;
                 }
                 
                 DecrementLicenseCounter ws = new DecrementLicenseCounter(encryptionKey);
                 ws.InstallationID = installationId;
                 ws.DecrementAmount = 1;
                 
                 XmlActivationService client = new XmlActivationService();
                 // If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 // set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     lastError = ws.LastError;
                     return false;
                 }
            
                 licenseCounter = ws.LicenseCounter;
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function DecrementLicenseCounterOnline(ByVal encryptionKey As AuthorEncryptionKey, _
                 ByVal installationId As String, ByRef licenseCounter as Integer, ByRef lastError As LicenseError) As Boolean
                 
                 //make sure we have an Installation ID to use first
                 If String.IsNullOrEmpty(installationId) Then
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED)
                     Return False
                 End If
             
                 Dim ws As New DecrementLicenseCounter(encryptionKey)
                 ws.InstallationID = installationId
                 ws.DecrementAmount = 1;
                 
                 Dim client As New XmlActivationService()
                 'If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 ' set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     lastError = ws.LastError
                     Return False
                 End If
            
                 licenseCounter = ws.LicenseCounter;
             
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new DecrementLicenseCounter object.</summary>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.#ctor(com.softwarekey.Client.WebService.XmlActivationService.XmlActivationService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new DecrementLicenseCounter object.</summary>
            <param name="client">The XmlActivationService object used to perform the web service method call.</param>
            <param name="encryptionKey">The pre-initialized <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for DecrementLicenseCounter calls.</summary>
            <returns>Returns the plain-text XML request string for DecrementLicenseCounter calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a web service response.</summary>
            <param name="response">The XmlNode reference to the root/document node of the web service response.</param>
            <returns>Returns true if successful.  If it is not successful, check the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.InstallationID">
            <summary>Gets or sets the Installation ID (required), which is a unique identifier for the given activation which was issued.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.DecrementAmount">
            <summary>Sets the amount to decrement the License Counter.  The Default value is 1.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.LicenseCounter">
            <summary>Gets the License Counter value returned from the server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlActivationService.DecrementLicenseCounter.DeactivationDate">
            <summary>Gets the Deactivation Date of the installation.  If the installation is not deactivated the value will be <see cref="F:System.DateTime.MinValue"></see>.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile">
             <summary>Implements the XmlLicenseFileService web service's GetLicenseFile method to validate the status of an Installation ID.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_File_Service.htm" target="_blank">XmlLicenseFileService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>If you wish to call these web services for PLUSManaged License implementations, we recommend you use the
             <see cref="M:com.softwarekey.Client.Licensing.License.RefreshLicense(System.String@)">License.RefreshLicense</see> method, which implements this call for you.</para>
             </note>
             <note type="caution">
             <para>Any Product Options in SOLO Server which you intend to use when issuing License IDs which will be validated with this method must have the
             "Issue Installation ID" option enabled, and must be activated with <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallation"/> or
             <see cref="T:com.softwarekey.Client.WebService.XmlActivationService.ActivateInstallationLicenseFile"/>.  Please refer to the
             <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/Product_Options.htm" target="_blank">SOLO Server manual</see> for details.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.InstallationID"/> property must be set.</para>
             </note>
             <example>This example shows how to make a typical license refresh call for a Protection PLUS 5 license:
             <code language="cs">
             public bool DownloadLicenseFile(AuthorEncryptionKey encryptionKey,
                 string installationId, ref LicenseError lastError)
             {
                 //make sure we have an Installation ID to use first
                 if (string.IsNullOrEmpty(installationId))
                 {
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED);
                     return false;
                 }
                 
                 GetLicenseFile ws = new GetLicenseFile(encryptionKey);
                 ws.InstallationID = installationId;
                 
                 XmlLicenseFileService client = new XmlLicenseFileService();
                 // If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 // set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client;
            
                 if (!ws.CallWebService())
                 {
                     //If you wish to revoke the local license when web-based validation fails, you can add code to do so here.
                     lastError = ws.LastError;
                     return false;
                 }
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function DownloadLicenseFile(ByVal encryptionKey As AuthorEncryptionKey, _
                 ByVal installationId As String, ByRef lastError As LicenseError) As Boolean
                 
                 //make sure we have an Installation ID to use first
                 If String.IsNullOrEmpty(installationId) Then
                     lastError = new LicenseError(LicenseError.ERROR_INSTALLATIONID_REQUIRED)
                     Return False
                 End If
             
                 Dim ws As New GetLicenseFile(encryptionKey)
                 ws.InstallationID = installationId
                 
                 Dim client As New XmlLicenseFileService()
                 'If you are using SOLO Server Dedicated URL or a self-hosted instance of SOLO Server,
                 ' set the client.Url property here.  You may also configure proxy settings on this object here, if necessary.
                 ws.WebServiceClient = client
            
                 If Not ws.CallWebService() Then
                     'If you wish to revoke the local license when web-based validation fails, you can add code to do so here.
                     lastError = ws.LastError
                     Return False
                 End If
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>GetLicenseFile Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.#ctor(com.softwarekey.Client.WebService.XmlLicenseFileService.XmlLicenseFileService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>GetLicenseFile Constructor - Accepts a pre-initialized AuthorEncryptionKey</summary>
            <param name="client">XmlActivationService</param>
            <param name="encryptionKey">AuthorEncryptionKey</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for GetLicenseFile calls</summary>
            <returns>string</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">XmlNode</param>
            <returns>bool</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.InstallationID">
            <summary>Installation ID</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.LicenseFileContents">
            <summary>License file contents</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.ProductVersion">
            <summary>Product Version (Optional - must be formatted like x.x.x.x)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseFileService.GetLicenseFile.ProductVersionNumber">
            <summary>Product Version (Optional - this is the same as the ProductVersion property, but uses the System.Version class to create the ProductVersion string)</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck">
             <summary>Implements the XmlLicenseService web service's InfoCheck method to retrieve and check license information.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlLicenseService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseID"/> property must be set.
             The <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Password"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ProductID"/> properties may optionally be set before calling
             the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method for extra validation.  Setting the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Password"/> field will
             also afford you access to additional data in the results, including customer registration data and user-defined data.</para>
             </note>
             <example>This example shows how to make a typical InfoCheck call:
             <code language="cs">
             public bool CheckLicenseInformation(int licenseID, string password, int productID)
             {
                 InfoCheck infoChecker = new InfoCheck();
                 infoChecker.LicenseID = licenseID;
                 infoChecker.Password = password;
                 infoChecker.ProductID = productID;
            
                 if (!infoChecker.CallWebService())
                 {
                     //TODO: check the LastError property and add error reporting here!
                     return false;
                 }
                 
                 //TODO: Add your custom logic here!
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function CheckLicenseInformation(ByVal licenseID As Integer, ByVal password As String, ByVal productID As Integer) As Boolean
                 Dim infoChecker As New InfoCheck()
                 infoChecker.LicenseID = licenseID
                 infoChecker.Password = password
                 infoChecker.ProductID = productID
            
                 If Not infoChecker.CallWebService() Then
                     'TODO: check the LastError property and add error reporting here!
                     Return False
                 End If
            
                 'TODO: Add your custom logic here!
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.#ctor(com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck"/> object with a specified web service client (<see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>) object.</summary>
            <param name="client">The <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>, web service client object, which may be initialized with a different URL and/or proxy server information.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for InfoCheck calls</summary>
            <returns>Returns a plain-text XML request string for InfoCheck calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ProcessResponse(System.Xml.XmlNode@)">
            <param name="response">The XML formatted response.</param>
            <returns>Returns true if the web service response was processed successfully.  If false is returned, see the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for additional information.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UseEncryption">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption"/> property to reflect the fact that this web service method does not support encryption.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UseDigitalSignature">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseDigitalSignature"/> property to reflect the fact that this web service method does not support digital signatures.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseID">
            <summary>Gets or sets the License ID.</summary>
            <remarks>
            <para>If the License ID specified is not valid, or a bad <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Password"/> is specified, then
            the result code returned by SOLO Server is 100.</para>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Password">
            <summary>Gets or sets the password (optional). This may be set to the activation password assigned to the license, or the customer password, in SOLO Server.</summary>
            <remarks>
            <para>When a value is specified, it will be validated by SOLO Server.  When validation fails,
            the result code returned by SOLO Server is 100.</para>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ProductID">
            <summary>Gets or sets the Product ID to which the License ID belongs (optional, recommended).</summary>
            <remarks>
            <para>When a value is specified, the Product ID will be validated against the License ID in SOLO Server.
            Otherwise, this extra validation is omitted when this property's value is 0 (zero). When validation fails,
            the result code returned by SOLO Server is 200.</para>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ProductName">
            <summary>Gets the product name in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseStatus">
            <summary>Gets the status of the SOLO Server License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ReplacedBy">
            <summary>Gets the License ID of the license which has replaced this <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseID"/> (typically used to indicate the License ID of an upgrade license).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LatestVersion">
            <summary>Gets the latest, free version available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.InvoiceNo">
            <summary>Gets the Invoice Number for the License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.CurrentVersion">
            <summary>Gets the Current Version of the License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseeEmail">
            <summary>Gets the licensee's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseeName">
            <summary>Gets the name of the licensee.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseUpdate">
            <summary>Gets the License Update data for the License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.DownloadExpiration">
            <summary>Gets the date in which the license and/or download will expire.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.RemainingActivations">
            <summary>Gets the number of activations remaining for this License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.RemainingDeactivations">
            <summary>Gets the number of deactivations remaining for this License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Quantity">
            <summary>Gets the quantity ordered.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.EnteredDate">
            <summary>Gets the date in which the license was created in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.TCFixedValue">
            <summary>Gets the Trigger Code Fixed Value (or "TC Fixed Value") parameter from the product option.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.OptionName">
            <summary>Gets the name of the Product Option.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.ProdOptionID">
            <summary>Gets the Product Option ID with which the License ID was created.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.CustomerID">
            <summary>Gets the Customer ID, which uniquely identifies the customer to which this License ID belongs.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.IsTestLicense">
            <summary>Gets whether the license is a test license.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LicenseCounter">
            <summary>Gets the License Counter field.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Company">
            <summary>Gets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.FirstName">
            <summary>Gets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.LastName">
            <summary>Gets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Address1">
            <summary>Gets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Address2">
            <summary>Gets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.City">
            <summary>Gets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.StateProvince">
            <summary>Gets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.PostalCode">
            <summary>Gets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Country">
            <summary>Gets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Email">
            <summary>Gets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Phone">
            <summary>Gets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.Fax">
            <summary>Gets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar1">
            <summary>Gets the user-defined string field 1 (UDefChar1) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar2">
            <summary>Gets the user-defined string field 2 (UDefChar2) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar3">
            <summary>Gets the user-defined string field 3 (UDefChar3) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar4">
            <summary>Gets the user-defined string field 4 (UDefChar4) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar5">
            <summary>Gets the user-defined string field 5 (UDefChar5) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar6">
            <summary>Gets the user-defined string field 6 (UDefChar6) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar7">
            <summary>Gets the user-defined string field 7 (UDefChar7) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar8">
            <summary>Gets the user-defined string field 8 (UDefChar8) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar9">
            <summary>Gets the user-defined string field 9 (UDefChar9) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefChar10">
            <summary>Gets the user-defined string field 10 (UDefChar10) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefNum1">
            <summary>Gets the user-defined number field 1 (UDefNum1) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefNum2">
            <summary>Gets the user-defined number field 2 (UDefNum2) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefNum3">
            <summary>Gets the user-defined number field 3 (UDefNum3) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefNum4">
            <summary>Gets the user-defined number field 4 (UDefNum4) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefNum5">
            <summary>Gets the user-defined number field 5 (UDefNum5) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefFloat1">
            <summary>Gets the user-defined float field 1 (UDefFloat1) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefFloat2">
            <summary>Gets the user-defined float field 2 (UDefFloat2) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefFloat3">
            <summary>Gets the user-defined float field 3 (UDefFloat3) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefFloat4">
            <summary>Gets the user-defined float field 4 (UDefFloat4) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefFloat5">
            <summary>Gets the user-defined float field 5 (UDefFloat5) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefDate1">
            <summary>Gets the user-defined date-time field 1 (UDefDate1) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefDate2">
            <summary>Gets the user-defined date-time field 2 (UDefDate2) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefDate3">
            <summary>Gets the user-defined date-time field 3 (UDefDate3) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefDate4">
            <summary>Gets the user-defined date-time field 4 (UDefDate4) data.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.InfoCheck.UDefDate5">
            <summary>Gets the user-defined date-time field 5 (UDefDate5) data.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.Register">
             <summary>Implements the XmlLicenseService web service's Register method to update customer registration information.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlLicenseService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="implementnotes"><para>This function will only update a customer's registration if the customer is not already registered.
             If you wish to update registration details even when the customer is already registered, use <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration"/> instead.</para></note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LicenseID"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Password"/>
             properties must be set, or the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.SerialNumber"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.ProductID"/> properties must be set.</para>
             </note>
             <example>This example shows how to make a basic Register call
             <code language="cs">
             public bool RegisterCustomer(int licenseID, string password, string company, string firstName, string lastName, string email)
             {
                 Register registration = new Register();
                 registration.LicenseID = licenseID;
                 registration.Password = password;
                 registration.Company = company;
                 registration.FirstName = firstName;
                 registration.LastName = lastName;
                 registration.Email = email;
            
                 if (!registration.CallWebService())
                 {
                     //TODO: check the LastError property and add error reporting here!
                     return false;
                 }
                 
                 //TODO: Add your custom, post-registration logic here!
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function RegisterCustomer(ByVal licenseID As Integer, ByVal password As String, ByVal company As String, ByVal firstName As String, ByVal lastName As String, ByVal email As String) As Boolean
                 Dim registration As New Register()
                 registration.LicenseID = licenseID
                 registration.Password = password
                 registration.Company = company
                 registration.FirstName = firstName
                 registration.LastName = lastName
                 registration.Email = email
            
                 If Not registrationChecker.CallWebService() Then
                     'TODO: check the LastError property and add error reporting here!
                     Return False
                 End If
            
                 'TODO: Add your custom logic here!
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.Register.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.Register"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.Register.#ctor(com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.Register"/> object with a specified web service client (<see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>) object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.Register.#ctor(System.String,System.String,com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Internal pass-through constructor for Update Registration.</summary>
            <param name="className">The name of the web service client class.</param>
            <param name="methodName">The name of the web service method to be called.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService object derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The pre-initialized AuthorEncryptionKey object, which is used for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.Register.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for Register calls</summary>
            <returns>Returns a plain-text XML request string for Register calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.Register.ProcessResponse(System.Xml.XmlNode@)">
            <param name="response">The XML formatted response.</param>
            <returns>Returns true if the web service response was processed successfully.  If false is returned, see the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for additional information.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.UseEncryption">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption"/> property to reflect the fact that this web service method does not support encryption.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.UseDigitalSignature">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseDigitalSignature"/> property to reflect the fact that this web service method does not support digital signatures.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LicenseID">
            <summary>Gets or sets the License ID (requires a value for the Password property when non-zero).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Password">
            <summary>Gets or sets the password (required when LicenseID is set to a non-zero value).  This may be set to the activation password assigned to the license, or the customer password, in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.SerialNumber">
            <summary>Gets or sets the Serial number (requires a value for the ProductID property when not empty).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.ProductID">
            <summary>Gets or sets the Product ID (required when SerialNumber is not empty).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Company">
            <summary>Gets or sets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.FirstName">
            <summary>Gets or sets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LastName">
            <summary>Gets or sets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Address1">
            <summary>Gets or sets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Address2">
            <summary>Gets or sets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.City">
            <summary>Gets or sets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.StateProvince">
            <summary>Gets or sets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.PostalCode">
            <summary>Gets or sets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Country">
            <summary>Gets or sets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Email">
            <summary>Gets or sets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Phone">
            <summary>Gets or sets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Fax">
            <summary>Gets or sets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Notes">
            <summary>Gets or sets notes about the customer.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LicenseeEmail">
            <summary>Gets or sets the licensee's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LicenseeName">
            <summary>Gets or sets the licensee's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.EuropeanUnionVATNumber">
            <summary>Gets or sets the customer's European Union VAT number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.NewPassword">
            <summary>Gets or sets the customer's new password (leave empty unless you need to reset the customer's password).</summary>
            <remarks>
            <para><note type="caution">Resetting the customer's password will impact any License IDs under that customer record, which will all
            then be required to use the new password.</note></para>
            </remarks>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.CustomerID">
            <summary>Gets the Customer ID to which the License ID belongs.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck">
             <summary>Implements the XmlLicenseService web service's UpdateCheck method to check for product or application updates.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlLicenseService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="caution">
             <para>Please refer to the
             <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/Product_Updates.htm" target="_blank">SOLO Server manual</see>
             for details on configuring product updates.</para>
             </note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseID"/>,
             <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.CurrentVersion"/>, and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ProductUpdateName"/> properties must be set.  The
             <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.Password"/>, <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ProductID"/>, <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LanguageCode"/>,
             and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.VerifyLicenseExpirationDate"/> properties may optionally be set before calling
             the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
             </note>
             <example>This example shows how to make a typical UpdateCheck call:
             <code language="cs">
             public bool CheckForUpdates(int licenseID)
             {
                 UpdateCheck updateChecker = new UpdateCheck();
                 updateChecker.LicenseID = licenseID; //Optional if the ProductID property is set.
                 updateChecker.ProductID = 12345; //Optional if the LicenseID property is set. TODO: Remove or update this line to your ProductID assigned in SOLO Server!  
                 updateChecker.CurrentVersion = "1.2.3.4"; //TODO: Update this line to use your application's version number!
                 updateChecker.ProductUpdateName = "XYZ Product"; //TODO: Update this line of code to use the Product Update Name configured in SOLO Server!
            
                 if (!updateChecker.CallWebService())
                 {
                     //TODO: check the LastError property and add error reporting here!
                     return false;
                 }
            
                 if (updateChecker.ActionToTake != UpdateCheck.UpdateAction.None)
                 {
                     //TODO: Add your update logic here!
                 }
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function CheckForUpdates(ByVal licenseID As Integer) As Boolean
                 Dim updateChecker As New UpdateCheck()
                 updateChecker.LicenseID = licenseID 'Optional if the ProductID property is set.
                 updateChecker.ProductID = 12345 'Optional if the LicenseID property is set. TODO: Remove or update this line to your ProductID assigned in SOLO Server!  
                 updateChecker.CurrentVersion = "1.2.3.4" 'TODO: Update this line to use your application's version number!
                 updateChecker.ProductUpdateName = "XYZ Product" 'TODO: Update this line of code to use the Product Update Name configured in SOLO Server!
            
                 If Not updateChecker.CallWebService() Then
                     'TODO: check the LastError property and add error reporting here!
                     Return False
                 End If
            
                 If updateChecker.ActionToTake &lt;&gt; UpdateCheck.UpdateAction.None Then
                     'TODO: Add your update logic here!
                 End If
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.#ctor(com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck"/> object with a specified web service client (<see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>) object.</summary>
            <param name="client">The <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>, web service client object, which may be initialized with a different URL and/or proxy server information.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for UpdateCheck calls</summary>
            <returns>Returns a plain-text XML request string for UpdateCheck calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response XmlNode</summary>
            <param name="response">The XML formatted response.</param>
            <returns>Returns true if the web service response was processed successfully.  If false is returned, see the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for additional information.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ParseActionToTake(System.String)">
            <summary>Parses the action to take for an update.</summary>
            <param name="value">The SOLO Server response string to parse.</param>
            <returns>Returns a <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction"/> enumeration value.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UseEncryption">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption"/> property to reflect the fact that this web service method does not support encryption.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UseDigitalSignature">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseDigitalSignature"/> property to reflect the fact that this web service method does not support digital signatures.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseID">
            <summary>Gets or sets the License ID of the activated license.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.Password">
            <summary>Gets or sets the password (optional).  When a value is specified, it will be validated by SOLO Server.  This may be set to the activation password assigned to the license, or the customer password, in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ProductID">
            <summary>Gets or sets the Product ID.  If a Product ID is specified before calling <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> (this optional, but recommended), the Product ID will be validated against the License ID in SOLO Server.  When this property's value is 0 (zero), this extra validation is omitted.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ProductUpdateName">
            <summary>Gets or sets the product update name to search for in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LanguageCode">
            <summary>Gets or sets the language code of the message to retrieve. (The default is "en", for U.S. English.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.VerifyLicenseExpirationDate">
            <summary>Gets or sets whether or not the License ID's expiration date will be validated.  (The default value is false.)</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.CurrentVersion">
            <summary>Gets or sets the Current Version of the application.  This must be in the format X.X.X.X, where X may be any number from 0 to 99999.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseStatus">
            <summary>Gets the status of the SOLO Server License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ReplacedBy">
            <summary>Gets the License ID which has replaced this <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseID"/>.  A zero value means the license has not been replaced by (or upgraded to) another License ID.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseUpdate">
            <summary>Gets a small, arbitrary string which may be used for customized status updates.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ActionToTake">
            <summary>Gets which action should be taken, as indicated by SOLO Server's response.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.InformationUrl">
            <summary>Gets the URL where more information about the available update may be found.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.DownloadUrl">
            <summary>Gets the URL where the new file/update, or information on how to download the new file(s)/update(s), may be found.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LatestVersion">
            <summary>Gets the latest, free version available.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ReleaseDate">
            <summary>Gets the date in which the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LatestVersion"/> was released.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.ShortMessage">
            <summary>Gets a short, HTML-formatted message, which may be displayed to the user.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction">
            <summary>Possible actions to take, as indicated by UpdateCheck responses.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.None">
            <summary>No action required, or no update available.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.DownloadFtp">
            <summary>Download a file using File Transfer Protocol (FTP).</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.DownloadHttp">
            <summary>Download a file using HyperText Transfer Protocol (HTTP).</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.Secure">
            <summary>The <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.Password"/> for the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.LicenseID"/> is required and must pass validation.  Prompt the user for his or her password and try again.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.GoToUrl">
            <summary>Navigate to a URL using the user's default browser.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheck.UpdateAction.DisplayMessage">
            <summary>Display a message to the user.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl">
            <summary>Class to help parse download URLs returned from SOLO Server's UpdateCheck responses.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.#ctor(System.String)">
            <summary>Initializes Download URL information based on the value returned from SOLO Server in an UpdateCheck response.</summary>
            <param name="downloadUrl"></param>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.ServerName">
            <summary>Gets the server to connect to, or the download URL.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.Port">
            <summary>Gets the port to connect to.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.PathOrFileName">
            <summary>Gets the path or file name to download.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.UserName">
            <summary>Gets the username to use for authentication.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.UpdateCheckDownloadUrl.Password">
            <summary>Gets the password to use for authentication.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration">
             <summary>Implements the XmlLicenseService web service's UpdateRegistration method to update customer registration information.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlLicenseService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="implementnotes"><para>This function will always update a customer's registration, even if the customer is already registered.
             If you wish to only update registration details when the customer is unregistered, use <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.Register"/> instead.</para></note>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.LicenseID"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.Password"/>
             properties must be set, or the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.SerialNumber"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.Register.ProductID"/> properties must be set.</para>
             </note>
             <example>This example shows how to make a basic UpdateRegistration call
             <code language="cs">
             public bool RegisterCustomer(int licenseID, string password, string company, string firstName, string lastName, string email)
             {
                 UpdateRegistration registration = new UpdateRegistration();
                 registration.LicenseID = licenseID;
                 registration.Password = password;
                 registration.Company = company;
                 registration.FirstName = firstName;
                 registration.LastName = lastName;
                 registration.Email = email;
            
                 if (!registration.CallWebService())
                 {
                     //TODO: check the LastError property and add error reporting here!
                     return false;
                 }
                 
                 //TODO: Add your custom, post-registration logic here!
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function RegisterCustomer(ByVal licenseID As Integer, ByVal password As String, ByVal company As String, ByVal firstName As String, ByVal lastName As String, ByVal email As String) As Boolean
                 Dim registration As New UpdateRegistration()
                 registration.LicenseID = licenseID
                 registration.Password = password
                 registration.Company = company
                 registration.FirstName = firstName
                 registration.LastName = lastName
                 registration.Email = email
            
                 If Not registrationChecker.CallWebService() Then
                     'TODO: check the LastError property and add error reporting here!
                     Return False
                 End If
            
                 'TODO: Add your custom logic here!
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration.#ctor(com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.UpdateRegistration"/> object with a specified web service client (<see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>) object.</summary>
            <param name="client">The <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>, web service client object, which may be initialized with a different URL and/or proxy server information.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration">
             <summary>Implements the XmlLicenseService web service's ValidateRegistration method to retrieve and check customer registration information.</summary>
             <remarks>
             <para>
             The <see href="https://secure.softwarekey.com/solo/authors/manual/#StartTopic=Content/XML_License_Service.htm" target="_blank">XmlLicenseService documentation</see>
             should be referenced for the most current information.
             </para>
             <note type="implementnotes">
             <para>Before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method, the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.LicenseID"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Password"/>
             properties must be set, or the <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.SerialNumber"/> and <see cref="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.ProductID"/> properties must be set.</para>
             </note>
             <example>This example shows how to make a typical ValidateRegistration call
             <code language="cs">
             public bool CheckRegistration(int licenseID, string password)
             {
                 ValidateRegistration registrationChecker = new ValidateRegistration();
                 registrationChecker.LicenseID = licenseID;
                 registrationChecker.Password = password;
            
                 if (!registrationChecker.CallWebService())
                 {
                     //TODO: check the LastError property and add error reporting here!
                     return false;
                 }
                 
                 //TODO: Add your custom logic here!
            
                 return true;
             }
             </code>
             <code language="vbnet">
             Public Function CheckRegistration(ByVal licenseID As Integer, ByVal password As String) As Boolean
                 Dim registrationChecker As New ValidateRegistration()
                 registrationChecker.LicenseID = licenseID
                 registrationChecker.Password = password
            
                 If Not registrationChecker.CallWebService() Then
                     'TODO: check the LastError property and add error reporting here!
                     Return False
                 End If
            
                 'TODO: Add your custom logic here!
            
                 Return True
             End Function
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.#ctor">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration"/> object.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.#ctor(com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration"/> object with a specified web service client (<see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>) object.</summary>
            <param name="client">The <see cref="T:com.softwarekey.Client.WebService.XmlLicenseService.XmlLicenseService"/>, web service client object, which may be initialized with a different URL and/or proxy server information.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.GeneratePlainTextRequest">
            <summary>Generates a plain-text XML request string for ValidateRegistration calls</summary>
            <returns>Returns a plain-text XML request string for ValidateRegistration calls.</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.ProcessResponse(System.Xml.XmlNode@)">
            <param name="response">The XML formatted response.</param>
            <returns>Returns true if the web service response was processed successfully.  If false is returned, see the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for additional information.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.UseEncryption">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseEncryption"/> property to reflect the fact that this web service method does not support encryption.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.UseDigitalSignature">
            <summary>Overrides the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.UseDigitalSignature"/> property to reflect the fact that this web service method does not support digital signatures.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.LicenseID">
            <summary>Gets or sets the License ID (requires a value for the Password property when non-zero).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Password">
            <summary>Gets or sets the password (required when LicenseID is set to a non-zero value). This may be set to the activation password assigned to the license, or the customer password, in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.SerialNumber">
            <summary>Gets or sets the Serial number (requires a value for the ProductID property when not empty).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.ProductID">
            <summary>Gets or sets the Product ID (required when SerialNumber is not empty).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.CustomerID">
            <summary>Gets the Customer ID, which uniquely identifies the customer to which this License ID belongs.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Company">
            <summary>Gets the customer's company name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.FirstName">
            <summary>Gets the customer's first name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.LastName">
            <summary>Gets the customer's last name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Address1">
            <summary>Gets the customer's street address (or line 1 of the customer's address).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Address2">
            <summary>Gets the customer's second address line (i.e. apartment or suite number).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.City">
            <summary>Gets the city of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.StateProvince">
            <summary>Gets the state/province of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.PostalCode">
            <summary>Gets the customer's zip/postal code.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Country">
            <summary>Gets the country of the customer's address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Email">
            <summary>Gets the customer's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Phone">
            <summary>Gets the customer's phone number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Fax">
            <summary>Gets the customer's fax number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.Notes">
            <summary>Gets notes about the customer.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.LicenseeEmail">
            <summary>Gets the licensee's email address.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.LicenseeName">
            <summary>Gets the licensee's name.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.EuropeanUnionVATNumber">
            <summary>Gets the customer's European Union VAT number.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlLicenseService.ValidateRegistration.ProdOptionID">
            <summary>Gets the Product Option ID with which the License ID was created.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession">
            <summary><see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> implementation for checking-in a session which has been checked out by a <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/> call.</summary>
            <remarks>
            <note type="caution">
            <para>Unless a custom implementation is required, the
            <see cref="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckinSession">NetworkSession.CheckinSession</see>
            method should be used instead.</para>
            </note>
            <note type="caution">
            <para>The following properties must be set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.SessionID"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ActivationData"/> (Necessary if you wish to bind the certificate to the system for check-outs.)</item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall">
            <summary>Base class from which all calls to SOLO Server's XmlNetworkFloatingService are implemented.</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType,com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> object</summary>
            <param name="callType">The type of web service call being made.</param>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.GeneratePlainTextRequest">
            <summary>Generates a plain-text request for a call to the XmlNetworkFloatingService web service</summary>
            <returns>Returns a plain-text request for a call to the XmlNetworkFloatingService web service</returns>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ProcessResponse(System.Xml.XmlNode@)">
            <summary>Processes a response from the XmlNetworkFloatingService web service and returns true if successful</summary>
            <param name="response">The XmlNode or XmlDocument object to process.</param>
            <returns>Returns true if successful.  If it is not successful, see the <see cref="P:com.softwarekey.Client.WebService.WebServiceCall.LastError"/> property for details.</returns>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.LicenseID">
            <summary>Gets or sets the License ID issued in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.Password">
            <summary>Gets or sets the password.  This may be set to the activation password assigned to the license, or the customer password, in SOLO Server.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.SessionID">
            <summary>Gets or sets the Session ID issued by SOLO Server (used in <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/>).</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ComputerName">
            <summary>Gets or sets the Computer Name.  This value is optional.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.RequestedCheckoutDuration">
            <summary>Gets or sets the requested checkout duration (in hours) for check-out requests.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.CertificatePath">
            <summary>Gets or sets the absolute path to the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate"/> file.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ActivationData">
            <summary>Gets or sets the XmlDocument of <see cref="T:com.softwarekey.Client.Licensing.SystemIdentifier"/> information to bind the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSession"/> to a specific computer.
            This document may be generated using the <see cref="M:com.softwarekey.Client.Licensing.SystemIdentifier.GenerateActivationDataXml(System.Collections.Generic.List{com.softwarekey.Client.Licensing.SystemIdentifier})">SystemIdentifier.GenerateActivationDataXml</see> method.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.AlwaysIncludeCertificatePath">
            <summary>Gets or sets whether the certificate path is always include in requests even when the session is not checked-out..</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.CertificateDocument">
            <summary>Gets the certificate XmlDocument obtained from processing a web service response.</summary>
        </member>
        <member name="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.Certificate">
            <summary>Gets the <see cref="T:com.softwarekey.Client.Licensing.Network.NetworkSessionCertificate"/> object returned from the web service.</summary>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType">
            <summary>Types of web service calls that can be made.</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType.OpenSession">
            <summary>Open Session</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType.PollSession">
            <summary>Poll Session</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType.CloseSession">
            <summary>Close Session</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType.CheckinSession">
            <summary>Check-in Session</summary>
        </member>
        <member name="F:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.NetworkFloatingServiceCallType.CheckoutSession">
            <summary>Check-out Session</summary>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/> object.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/> object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession">
            <summary><see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> implementation for checking a session out for offline use, which may later be checked back in by a <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckinSession"/> call.</summary>
            <remarks>
            <note type="caution">
            <para>Unless a custom implementation is required, the
            <see cref="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CheckoutSession(System.Decimal)">NetworkSession.CheckoutSession</see>
            method should be used instead.</para>
            </note>
            <note type="caution">
            <para>The following properties must be set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.SessionID"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.RequestedCheckoutDuration"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.CertificatePath"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ActivationData"/> (Necessary if you wish to bind the certificate to the system for check-outs.)</item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/> object.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CheckoutSession"/> object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession">
            <summary><see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> implementation for closing a session which has been opened by an <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/> call.</summary>
            <remarks>
            <note type="caution">
            <para>Unless a custom implementation is required, the
            <see cref="M:com.softwarekey.Client.Licensing.Network.NetworkSession.CloseSession">NetworkSession.CloseSession</see>
            method should be used instead.</para>
            </note>
            <note type="caution">
            <para>The following <see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.SessionID"/> property must be set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/> object.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/> object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession.ValidateWebServiceResponseFormat(System.Xml.XmlNode)">
            <summary>Bypasses the validation of the response's format for this particular request.</summary>
            <param name="response">The <see cref="T:System.Xml.XmlNode"/> containing the web service response.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession">
            <summary><see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> implementation for opening a new session.  The opened session can be polled/checked by a <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/> call, or closed by a <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.CloseSession"/> call.</summary>
            <remarks>
            <note type="caution">
            <para>Unless a custom implementation is required, the
            <see cref="M:com.softwarekey.Client.Licensing.Network.NetworkSession.OpenSession(System.Int32,System.String)">NetworkSession.OpenSession</see>
            method should be used instead.</para>
            </note>
            <note type="caution">
            <para>The following properties must be set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.LicenseID"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.Password"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ActivationData"/> (Necessary if you wish to bind the certificate to the system for check-outs.)</item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/> object.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/> object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession">
            <summary><see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall"/> implementation for polling a session which was opened by an <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.OpenSession"/> call.</summary>
            <remarks>
            <note type="caution">
            <para>Unless a custom implementation is required, the
            <see cref="M:com.softwarekey.Client.Licensing.Network.NetworkSession.PollSession">NetworkSession.PollSession</see>
            method should be used instead.</para>
            </note>
            <note type="caution">
            <para>The following properties must be set before calling the <see cref="M:com.softwarekey.Client.WebService.WebServiceCall.CallWebService"/> method.</para>
            <list type="bullet">
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.SessionID"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.CertificatePath"/></item>
                <item><see cref="P:com.softwarekey.Client.WebService.XmlNetworkFloatingService.NetworkFloatingServiceCall.ActivationData"/> (Necessary if you wish to bind the certificate to the system for check-outs.)</item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession.#ctor(com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/> object.</summary>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
        <member name="M:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession.#ctor(com.softwarekey.Client.WebService.XmlNetworkFloatingService.XmlNetworkFloatingService,com.softwarekey.Client.Utils.AuthorEncryptionKey)">
            <summary>Creates a new <see cref="T:com.softwarekey.Client.WebService.XmlNetworkFloatingService.PollSession"/> object.</summary>
            <param name="client">
            For the .NET Framework PLUSManaged assembly, the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived object used to perform the web service call. <br/>
            For the .NET Standard PLUSManaged assembly, the XmlWebService derived object used to perform the web service call.
            </param>
            <param name="encryptionKey">The <see cref="T:com.softwarekey.Client.Utils.AuthorEncryptionKey"/> object required for cryptographic routines.</param>
        </member>
    </members>
</doc>
